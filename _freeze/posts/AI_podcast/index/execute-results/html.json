{
  "hash": "72ffcfbd27ac59aa98b5b0c65efa085f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"使用AI给播客语音转文字并作摘要\"\nsubtitle: \"Using AI to create Summary for podcast\"\nauthor: \"Tony D\"\ndate: \"2025-03-28\"\n\ncategories: \n  - AI\n  - R\n  - Python\n\n  \nexecute:\n  warning: false\n  error: false\n  eval: false\n\nimage: 'images/my screenshots.png'\n---\n\nA guide on transcribing podcast audio and generating summaries using AI, covering downloading MP3s, using `mlx_whisper` for transcription, and leveraging the Gemini 2.0 Flash model for summarization.\n\nThis document provides a comprehensive guide to transcribing podcast audio and generating summaries using a combination of AI tools. It outlines a multi-step process that includes downloading MP3 files from various podcast platforms, using the `mlx_whisper` model for accurate audio-to-text transcription, and then leveraging the Gemini 2.0 Flash model for summarization and correction of the transcribed text. The guide includes R code snippets for each step, making it a practical resource for anyone looking to automate the process of podcast transcription and summarization.\n\n\n\nArticle abstract for podcast like firstory/poddtoppen/小宇宙FM using mlx_whisper for transcription and Gemini 2.0 Flash for summarization \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#pak::pkg_install('tuneR')\nlibrary(ellmer)\nlibrary(tidyverse)\nlibrary(srt)\nlibrary(openxlsx)\nlibrary(readxl)\nlibrary(lares)\nlibrary(tuneR)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(av)\n```\n:::\n\n\n\n\n# Step 1:  download mp3 \n\n::: panel-tabset\n\n## from firstory \n\n### get all mp3 link from episodes_link\n\n::: {.cell}\n\n```{.r .cell-code}\ni=\"https://open.firstory.me/story/cm8mfryux2mj001socwiefcw4\"\npage_content <- read_html(i) \n\nhtml_list=html_elements(page_content, css = \"script\") |> \n    html_text() |> paste(collapse = \" \")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na=html_list |> str_extract_all( 'audioUrl(.+?).mp3')\ninput_link=a |> unlist()|> str_extract_all( 'https:(.+?).mp3') |> unlist()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutput='output.mp3'\ndownload.file(url = input_link, destfile = output)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files()\n```\n:::\n\n\n### check mp3 duration\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the MP3 file\nmp3_file <- readMP3(\"output.mp3\" )\n\n# Get the duration in seconds\nduration_mins <- (length(mp3_file@left) / mp3_file@samp.rate)/60\nduration_mins\n```\n:::\n\n### trim mp3 if needed\n\n::: {.cell}\n\n```{.r .cell-code}\ntrim_mp3(\n  'output.mp3',\n  start_time = 1,\n  end_time = 600,\n  overwrite = FALSE,\n  ext = \"mp3\",\n  quiet = FALSE\n)\n\n# # output file:output_trim.mp3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the MP3 file\nmp3_file <- readMP3(\"output_trimmed.mp3\" ) \n# Get the duration in seconds\n(length(mp3_file@left) / mp3_file@samp.rate)/60\n```\n:::\n\n## from poddtoppen\n\n### get  mp3 link from episodes_link\n\n::: {.cell}\n\n```{.r .cell-code}\ni=\"https://poddtoppen.se/podcast/1670019206/%E6%A5%AD%E5%8B%99%E7%94%A8%E5%A8%81%E5%A3%AB%E5%BF%8C%E6%8C%87%E5%8D%97/ep69%E8%AA%B0%E4%B8%8D%E6%84%9B%E9%A4%BE%E9%85%92\"\npage_content <- read_html(i) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml_list=html_elements(page_content, css = \"div.episodes__list__item\") |> \n    html_attr(\"data-audio\")\n\nhtml_list\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#a=html_list |> str_extract_all( 'data-audio=(.+?).mp3')\n#input_link=a |> unlist()|> str_extract_all( 'https:(.+?).mp3') |> unlist()\ninput_link=html_list\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutput='output.mp3'\ndownload.file(url = input_link, destfile = output)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files()\n```\n:::\n\n\n### check mp3 duration\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the MP3 file\nmp3_file <- readMP3(\"output.mp3\" )\n\n# Get the duration in seconds\nduration_mins <- (length(mp3_file@left) / mp3_file@samp.rate)/60\nduration_mins\n```\n:::\n\n### trim mp3 if needed\n\n::: {.cell}\n\n```{.r .cell-code}\n# trim_mp3(\n#   'output.mp3',\n#   start_time = 1,\n#   end_time = 600,\n#   overwrite = FALSE,\n#   ext = \"mp3\",\n#   quiet = FALSE\n# )\n\n# # output file:output_trim.mp3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the MP3 file\nmp3_file <- readMP3(\"output_trimmed.mp3\" ) \n# Get the duration in seconds\n(length(mp3_file@left) / mp3_file@samp.rate)/60\n```\n:::\n\n\n\n\n\n## from xiaoyuzhou 小宇宙FM\n\n### get  mp3 link from episodes_link\n\nhttps://www.xiaohongshu.com/user/profile/64034a70000000001001d5e7?xsec_token=ABhaT1fRn3eiAgLpQycyyc-rKPx7wiVd43VWTkC9cznbM=&xsec_source=pc_search\n\nhttps://www.xiaohongshu.com/user/profile/5cd7cac4000000001000da74?xsec_token=ABZS9k_q_Yve0bqEqs8EOUgYOp0yLuRdlXTecaQlHcTt4=&xsec_source=pc_search\n\nhttps://www.xiaohongshu.com/user/profile/63bfc800000000002502cbdc?xsec_token=ABY8GKfUekMVr5qho4f8G9Dr6MgOMgQ5B6H-lOvb_usAA=&xsec_source=pc_note\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni='https://www.xiaoyuzhoufm.com/podcast/670e1e6477e599f60e29dacf'\npage <- read_html(i) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 定位所有class=\"jsx-7bbe0f84186f1998\"的li元素\nli_elements <- page %>%\n  html_nodes(\"li.jsx-7bbe0f84186f1998\")\n\n# 提取每个li元素中的class=\"jsx-744662fb2f5b91b6 card\"的a元素的href值\nhref_links <- li_elements %>%\n  html_nodes(\"a.jsx-744662fb2f5b91b6.card\") %>%\n  html_attr(\"href\")\n\n# 添加前缀，构成完整的音频文件URL\nfull_links <- paste0(\"https://www.xiaoyuzhoufm.com\", href_links)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# download the lastest one\nnew_url=full_links[1]\nnew_url\n# 访问新的URL并解析\naudio_page <- read_html(new_url)\n    \n# 提取音频标题，property=\"og:title\"的meta元素的content值\ntitle <- audio_page %>%\nhtml_nodes('meta[property=\"og:title\"]') %>%\nhtml_attr(\"content\")\n    \n# 处理标题中的特殊字符\nsafe_title <- str_replace_all(title, \"[\\\\/:,*?\\\"<>|]\", \"_\")\nsafe_title <- str_replace_all(safe_title, \"[\\\\s]\", \"_\")\n    \n# 提取音频下载链接，property=\"og:audio\"的meta元素的content值\naudio_url <- audio_page %>%\nhtml_nodes('meta[property=\"og:audio\"]') %>%\nhtml_attr(\"content\")\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsafe_title\naudio_url\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#output_file_name=paste0(safe_title ,'output.mp3')\noutput_file_name='output.m4a'\ndownload.file(url = audio_url, destfile = output_file_name)\n```\n:::\n### convert m4a to mp3\n\n::: {.cell}\n\n```{.r .cell-code}\nav_audio_convert('output.m4a', 'output.mp3')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files()\n```\n:::\n\n\n### check mp3 duration\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the MP3 file\nmp3_file <- readMP3('output.mp3')\n\n# Get the duration in seconds\nduration_mins <- (length(mp3_file@left) / mp3_file@samp.rate)/60\nduration_mins\n```\n:::\n\n### trim mp3 if needed\n\n::: {.cell}\n\n```{.r .cell-code}\n# trim_mp3(\n#   'output.mp3',\n#   start_time = 1,\n#   end_time = 600,\n#   overwrite = FALSE,\n#   ext = \"mp3\",\n#   quiet = FALSE\n# )\n\n# # output file:output_trim.mp3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Load the MP3 file\n# mp3_file <- readMP3(\"output_trimmed.mp3\" ) \n# # Get the duration in seconds\n# (length(mp3_file@left) / mp3_file@samp.rate)/60\n```\n:::\n\n\n::: \n\n# Step 2: using mlx_whisper model to get text from audio(mp3,m4a)\n\n\nrun audio_txt.py \n\n```python\nimport mlx_whisper\nfrom whisper.utils import get_writer\nspeech_file=\"output.mp3\"\n# Using mlx-community/whisper-large-v3-turbo model\nresult = mlx_whisper.transcribe(speech_file, \n                                path_or_hf_repo=\"mlx-community/whisper-large-v3-turbo\",\n                                word_timestamps=True\n                                )\n\nsrt_writer = get_writer(\"srt\",'.')\nsrt_writer(result,'text.srt')\n\nsrt_writer = get_writer(\"txt\",'.')\nsrt_writer(result,'text.txt')\n\n\n\n\n\n```\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os \nos.system(\"python3.11 audio_txt.py\")\n```\n:::\n\noutput is text.txt and text.srt\n\n# Step 3: Using gemini model to summary\n\nmodel gemini-2.5-pro-exp-03-25 or gemini-2.0-flash\n\n## define model\n\n::: {.cell}\n\n```{.r .cell-code}\nchat_gemini_model<- chat_gemini(\n  system_prompt = \"你是一个中文，英文，威士忌专家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#testing model connection\nchat_result=chat_gemini_model$chat(\"hello\")\nchat_result\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchat_gemini_model$get_turns(include_system_prompt = TRUE)\n```\n:::\n\n## Run model\n\n::: {.cell}\n\n```{.r .cell-code}\nsrt_txt0=read_srt('text.srt')\nsrt_txt2=srt_txt0$subtitle|> as.character()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(srt_txt2)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprompt_text=paste0('请给以下文字作500字内摘要：',srt_txt2)\nsummary_text=chat_gemini_model$chat(prompt_text)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_text |> tibble() |> write_delim('summary.txt')\n```\n:::\n\n\n# Step 4: correct summary\n\n## define model\n\n::: {.cell}\n\n```{.r .cell-code}\nchat_gemini_model<- chat_gemini(\n  system_prompt = \"你是一个中文和英文的威士忌专家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model\n```\n:::\n\n\n## Run model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprompt_text=paste0('请更正以下文字的错别字，并且改正胡云为壶云，希游记为嬉游忌,Wish Jokey为WhisJockey,不要空白行',summary_text)\ncorrect_summary_text=chat_gemini_model$chat(prompt_text)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrect_summary_text |> str_replace_all('\\n\\n','\\n')|> tibble() |> write_delim('correct_summary2.txt')\n```\n:::\n\n\n# Step 5:  summary str text\n\n## define model\n\n::: {.cell}\n\n```{.r .cell-code}\nchat_gemini_model<- chat_gemini(\n  system_prompt = \"你是一个中文和英文的威士忌专家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #model = \"gemini-2.5-pro-exp-03-25\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model\n```\n:::\n\n\n## Run model\n\n::: {.cell}\n\n```{.r .cell-code}\nsrt_txt_format=read.delim('text.srt')\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprompt_text=paste0('下面的内容是srt文档。请按每5分钟做一个摘要，再更正以下文字，胡云为壶云，希游记为嬉游忌,Wish Jokey为WhisJockey',srt_txt_format)\ncorrect_summary_text=chat_gemini_model$chat(prompt_text)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrect_summary_text|> tibble() |> write_delim('correct_srt_summary.txt')\n```\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}