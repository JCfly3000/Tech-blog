{
  "hash": "aadccfa03209c61f1a89a349c60137d2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"使用AI给视频自动生成中英文字幕\"\nsubtitle: \"Using AI to create Chinese and English Subtitles\"\nauthor: \"Tony Duan\"\ndate: \"2025-03-27\"\n\ncategories: \n  - AI\n  - R\n  - Python\n\n  \nexecute:\n  warning: false\n  error: false\n  eval: false\n\nimage: 'images/unnamed.png'\n---\n\nUse mlx_whisper for transcribe Audio to Text,and use gemini-2.0-flash for correction\n\nload R package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#pak::pkg_install('tuneR')\nlibrary(ellmer)\nlibrary(tidyverse)\nlibrary(srt)\nlibrary(openxlsx)\nlibrary(readxl)\nlibrary(lares)\nlibrary(tuneR)\nlibrary(stringr)\n```\n:::\n\n\n\n\n# Step 1:  download mp3 from youtube\n\n::: {.cell}\n\n```{.r .cell-code}\nyoutube_url='https://www.youtube.com/watch?v=eZrzJtdUntg'\n\n\n#title=system(paste0(\"yt-dlp --simulate --print '%(title)s' \",youtube_url),intern = TRUE)\n#title=paste0(title,'.mp3')\n#title\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_command_mp3=paste0(\"yt-dlp --cookies-from-browser chrome -x --audio-format mp3 --audio-quality 0 '\",youtube_url,\"' -o '%(title)s'\")\n\ndownload_command_mp3\n\ndownload_command_video=paste0(\"yt-dlp --cookies-from-browser chrome '\",youtube_url,\"'\")\n\ndownload_command_video\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem(download_command_mp3)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem(download_command_video)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files()\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmp3_title=list.files() |> str_subset(pattern = \".mp3\")\nmp3_title\n```\n:::\n\n\n\n## check mp3 duration\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the MP3 file\n# Load the MP3 file\nmp3_file <- readMP3(mp3_title)\n\n# Get the duration in seconds\nduration_mins <- (length(mp3_file@left) / mp3_file@samp.rate)/60\nduration_mins\n```\n:::\n\n## trim mp3 if needed\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(lares)\n# trim_mp3(\n#   mp3_title,\n#   start_time = 1,\n#   end_time = 9999999,\n#   overwrite = FALSE,\n#   ext = \"mp3\",\n#   quiet = FALSE\n# )\n\n\n# output file:\n#paste0(mp3_title |> str_replace('.mp3,',''),\"_trim.mp3\")\n```\n:::\n\n\n# Step 2: using mlx_whisper model to get text from mp4\n\n\nrun audio_txt.py \n\n```python\nimport mlx_whisper\nimport argparse\nfrom whisper.utils import get_writer\n\n\n# Create the parser\nparser = argparse.ArgumentParser(description=\"A simple example using argparse\")\n\n\nparser.add_argument('-n', '--name', type=str, help='Your name', required=True)\n\n# Parse the arguments\nargs = parser.parse_args()\n\n# Access the arguments\nprint(f\"Hello, {args.name}!\")\n\n\n\n\nspeech_file= args.name\n# Using mlx-community/whisper-large-v3-turbo model\nresult = mlx_whisper.transcribe(speech_file, \n                                path_or_hf_repo=\"mlx-community/whisper-large-v3-turbo\",\n                                word_timestamps=True\n                                )\n\nsrt_writer = get_writer(\"srt\",'.')\nsrt_writer(result,'text.srt')\n\nsrt_writer = get_writer(\"txt\",'.')\nsrt_writer(result,'text.txt')\n\n\n\n\n\n```\n\n::: {.cell}\n\n```{.python .cell-code}\nfile_name=r.mp3_title\n```\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os \ncomand=\"python3.11 audio_txt.py -n='\"+file_name+\"'\"\ncomand\nos.system(comand)\n```\n:::\n\noutput is text.txt and text.srt\n\n# Step 3: Using gemini model to correct word\n\nmodel gemini-2.5-pro-exp-03-25 or gemini-2.0-flash\n\n## define model\n\n::: {.cell}\n\n```{.r .cell-code}\nchat_gemini_model<- chat_gemini(\n  system_prompt = \"你是一个中文和英文的语言学家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#testing model connection\nchat_result=chat_gemini_model$chat(\"hello\")\nchat_result\n```\n:::\n\n## Run model\n\n::: {.cell}\n\n```{.r .cell-code}\nsrt_txt0=read_srt('text.srt')\nsrt_txt2=srt_txt0$subtitle|> as.character()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(srt_txt2)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprompt_text=paste0('把以下文字是通过语言识别出来的文字。如果有错别字请更正并输出中文。保持更正后的文字与原文的文字长度一样。也保持句子总长度与更正后的句子总长度一致。比如hovah请更正为福建人。没有错则不变。有更正的句子后面加上!!!!。不要多余的反馈。输出格式为:更正前的句子《---》更正后的句子 ',srt_txt2)\nchat_result1=chat_gemini_model$chat(prompt_text)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_result2=unlist(strsplit(chat_result1, \"\\n\"))\nlength(all_result2)\n#all_result2= c(all_result2,\"\")\n```\n:::\n\n## add to data\n\n::: {.cell}\n\n```{.r .cell-code}\nsrt_txt=srt_txt0 |> mutate(correct_txt=all_result2 |> str_replace('!!!!','')|> str_extract( \"(?<=《---》).*\")\n                           ,all_correct_txt=all_result2\n                           \n                           )\n```\n:::\n\n\n\n\n# Step 4: Translate to English\n\n## define model\n\n中翻英 using google LLM model gemini-2.0-flash\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchat_gemini_model_translate<- chat_gemini(\n  system_prompt = \"你是一个中文和英文的翻译专家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model_translate\n```\n:::\n\n\n## run model\n::: {.cell}\n\n```{.r .cell-code}\ncorrect_txt=srt_txt$correct_txt|> as.character()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprompt_text=paste0('请联系上下文把以下文字翻译成英文。总句子数量不变。不要多余的反馈。输出格式为:原来的文字《---》翻译成英文',correct_txt)\nchat_result1=chat_gemini_model_translate$chat(prompt_text)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_result2=unlist(strsplit(chat_result1, \"\\n\"))\nlength(all_result2)\n#all_result2=all_result2[1:422]\n```\n:::\n\n\n## add to data\n::: {.cell}\n\n```{.r .cell-code}\nsrt_txt=srt_txt |> mutate(correct_english_txt=all_result2 |> str_extract( \"(?<=《---》).*\"))\n```\n:::\n\n\n\n\n# Step 5:output chinese and english subtites to srt\n::: {.cell}\n\n```{.r .cell-code}\ncn_correct_srt_txt=srt_txt |> select(n,start,end,subtitle=correct_txt)\nen_correct_srt_txt=srt_txt |> select(n,start,end,subtitle=correct_english_txt)\n\nsrt::write_srt(cn_correct_srt_txt,\"corrected_cn_srt2.srt\",wrap = FALSE)\nsrt::write_srt(en_correct_srt_txt,\"corrected_en_srt2.srt\",wrap = FALSE)\n```\n:::\n\n## output srt_txt\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.xlsx(srt_txt,'srt_data.xlsx')\n```\n:::\n\n\n# Step 6:embed srt to mp4  using ffmpeg\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify input and output file paths\ninput_video <- \"input.mp4\"\nsubtitle_file <- \"corrected_cn_srt2.srt\"\noutput_video <- \"output.mp4\"\n\n# Use ffmpeg to add subtitles\nffmpeg_command <- paste0(\n  \"ffmpeg -i \\\"\", input_video, \"\\\"\",\n  \" -vf \\\"subtitles=\", subtitle_file, \":force_style='Fontsize=20'\\\"\",\n  \" -c:a copy -c:v libx264 -crf 23 -preset veryfast \\\"\", output_video, \"\\\"\"\n)\n# Execute the command\nsystem(ffmpeg_command)\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}