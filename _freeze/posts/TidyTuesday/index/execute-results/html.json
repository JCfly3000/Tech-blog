{
  "hash": "2022ada91c78f8578a3d4253de78cc2b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"数据星期二\"\nsubtitle: \"TidyTuesday\"\nauthor: \"Tony D\"\ndate: \"2025-04-10\"\n\ncategories: \n  - Tool\n  - R\n  - Python\n\n  \nexecute:\n  warning: false\n  error: false\n\nimage: 'images/tt_logo.png'\n\nfilters:\n  - shinylive\n---\n\n\n\nTidyTuesday data project.[github](https://github.com/rfordatascience/tidytuesday)\n\n# getting the data\n\n\n\n::: panel-tabset\n\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#pak::pak('tidytuesdayR')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\n```\n:::\n\n\n### download the data\n\nall available data\n\n::: {.cell}\n\n```{.r .cell-code}\n#tt_available() \n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load('2025-04-01')\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata\n```\n:::\n\n### read data\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=tuesdata$pokemon_df\n#glimpse(data)\n```\n:::\n\nor read directly from the url\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv')\n```\n:::\n\n\n### using shinyapps assistant to create shinyapp\n\nhttps://gallery.shinyapps.io/assistant\n\ngo to project folder and install quarto-ext/shinylive\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto add quarto-ext/shinylive\n```\n:::\n\n\n#### Prompt 1:\ncreate a shinyapp with this data from github:https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv.\nleft side:\nselector type_1\nnumber of pokemon\nright side:\nhistogram of height, color by type_2\nhistogram of weight, color by type_2\nhistogram of attack, color by type_2\nhistogram of defense color by type_2\nbarplot of color_1\n\nthere is no weight_kg,height_m.please use correct name.\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Load the Pokemon data\npokemon_data <- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv\")\n\nui <- page_sidebar(\n  title = \"Pokemon Data Explorer\",\n  sidebar = sidebar(\n    selectInput(\"type1\", \"Select Type 1:\", \n                choices = sort(unique(pokemon_data$type_1)),\n                selected = \"water\"),\n    hr(),\n    textOutput(\"pokemon_count\")\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Height Distribution by Type 2\"),\n      plotOutput(\"height_hist\")\n    ),\n    card(\n      card_header(\"Weight Distribution by Type 2\"),\n      plotOutput(\"weight_hist\")\n    )\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Attack Distribution by Type 2\"),\n      plotOutput(\"attack_hist\")\n    ),\n    card(\n      card_header(\"Defense Distribution by Type 2\"),\n      plotOutput(\"defense_hist\")\n    )\n  ),\n  \n  card(\n    card_header(\"Pokemon Color Distribution\"),\n    plotOutput(\"color_barplot\")\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Filtered data based on the selected type_1\n  filtered_data <- reactive({\n    pokemon_data %>%\n      filter(type_1 == input$type1)\n  })\n  \n  # Display number of Pokemon\n  output$pokemon_count <- renderText({\n    count <- nrow(filtered_data())\n    paste(\"Number of Pokemon with Type 1 '\", input$type1, \"': \", count)\n  })\n  \n  # Height histogram colored by type_2\n  output$height_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = height, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Height\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Weight histogram colored by type_2\n  output$weight_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = weight, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Weight\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Attack histogram colored by type_2\n  output$attack_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = attack, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Attack\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Defense histogram colored by type_2\n  output$defense_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = defense, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Defense\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Barplot of color_1\n  output$color_barplot <- renderPlot({\n    color_counts <- filtered_data() %>%\n      count(color_1) %>%\n      arrange(desc(n))\n    \n    ggplot(color_counts, aes(x = reorder(color_1, n), y = n, fill = color_1)) +\n      geom_col() +\n      coord_flip() +\n      scale_fill_brewer(palette = \"Set3\") +\n      theme_minimal() +\n      labs(x = \"Color\", y = \"Count\", fill = \"Color\") +\n      theme(legend.position = \"none\")\n  })\n}\n\nshinyApp(ui, server)\n\n```\n\n\n\n## Python\n\n\n:::\n\n\n\n# Reference:\n\nhttps://github.com/rfordatascience/tidytuesday\n\nhttps://github.com/posit-dev/python-tidytuesday\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}