{
  "hash": "4f762c2ba14fbc0718ecef23b01d75b4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"数据星期二\"\nsubtitle: \"TidyTuesday\"\nauthor: \"Tony D\"\ndate: \"2025-04-10\"\n\ncategories: \n  - Tool\n  - R\n  - Python\n\n  \nexecute:\n  warning: false\n  error: false\n  eval: false\n\nimage: 'images/tt_logo.png'\n\nfilters:\n  - shinylive\n---\n\nA guide to the TidyTuesday data project, demonstrating how to access data and create interactive Shiny apps in both R and Python for data exploration and visualization.\n\nThis document provides a comprehensive guide to the TidyTuesday data project, demonstrating how to access and work with the data in both R and Python. It also includes detailed instructions on how to create interactive Shiny apps for data exploration and visualization. The guide covers everything from downloading the data to building a complete Shiny app with various plots and user inputs. This is a valuable resource for anyone looking to participate in the TidyTuesday project and improve their data science skills.\n\nExplores the TidyTuesday data project, demonstrating data access and interactive Shiny app creation in R and Python.\n\nTidyTuesday data project\n\n\ndata from [github](https://github.com/rfordatascience/tidytuesday)\n\n# getting the data\n\n\n\n::: panel-tabset\n\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#pak::pak('tidytuesdayR')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\n```\n:::\n\n\n### download the data\n\nall available data\n\n::: {.cell}\n\n```{.r .cell-code}\n#tt_available() \n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load('2025-04-01')\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata\n```\n:::\n\n\n## Python\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport pydytuesday\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npydytuesday.get_date('2025-04-15')\n```\n:::\n\n:::\n\n# make a shiny\n\n::: panel-tabset\n\n## R\n\n### read data\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=tuesdata$pokemon_df\n#glimpse(data)\n```\n:::\n\nor read directly from the url\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv')\n```\n:::\n\n\n### using shinyapps assistant to create shinyapp\n\nhttps://gallery.shinyapps.io/assistant\n\ngo to project folder and install quarto-ext/shinylive\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto add quarto-ext/shinylive\n```\n:::\n\n\n### Prompt:\n\ncreate a shinyapp with this data from github:https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv.\nleft side:\nselector type_1\nnumber of pokemon\nright side:\nhistogram of height, color by type_2\nhistogram of weight, color by type_2\nhistogram of attack, color by type_2\nhistogram of defense color by type_2\nbarplot of color_1\n\nthere is no weight_kg,height_m.please use correct name.\n\n### Shiny R in quarto\n\nif adding shiny in quarto then adding this to yaml header\n\n```yaml\n---\n\nfilters:\n  - shinylive\n---\n```\n\n\n::: {.cell standalone='true' viewerHeight='800'}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Load the Pokemon data\npokemon_data <- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv\")\n\nui <- page_sidebar(\n  title = \"Pokemon Data Explorer\",\n  sidebar = sidebar(\n    selectInput(\"type1\", \"Select Type 1:\", \n                choices = sort(unique(pokemon_data$type_1)),\n                selected = \"water\"),\n    hr(),\n    textOutput(\"pokemon_count\")\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Height Distribution by Type 2\"),\n      plotOutput(\"height_hist\")\n    ),\n    card(\n      card_header(\"Weight Distribution by Type 2\"),\n      plotOutput(\"weight_hist\")\n    )\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Attack Distribution by Type 2\"),\n      plotOutput(\"attack_hist\")\n    ),\n    card(\n      card_header(\"Defense Distribution by Type 2\"),\n      plotOutput(\"defense_hist\")\n    )\n  ),\n  \n  card(\n    card_header(\"Pokemon Color Distribution\"),\n    plotOutput(\"color_barplot\")\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Filtered data based on the selected type_1\n  filtered_data <- reactive({\n    pokemon_data %>%\n      filter(type_1 == input$type1)\n  })\n  \n  # Display number of Pokemon\n  output$pokemon_count <- renderText({\n    count <- nrow(filtered_data())\n    paste(\"Number of Pokemon with Type 1 '\", input$type1, \"': \", count)\n  })\n  \n  # Height histogram colored by type_2\n  output$height_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = height, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Height\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Weight histogram colored by type_2\n  output$weight_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = weight, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Weight\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Attack histogram colored by type_2\n  output$attack_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = attack, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Attack\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Defense histogram colored by type_2\n  output$defense_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = defense, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Defense\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Barplot of color_1\n  output$color_barplot <- renderPlot({\n    color_counts <- filtered_data() %>%\n      count(color_1) %>%\n      arrange(desc(n))\n    \n    ggplot(color_counts, aes(x = reorder(color_1, n), y = n, fill = color_1)) +\n      geom_col() +\n      coord_flip() +\n      scale_fill_brewer(palette = \"Set3\") +\n      theme_minimal() +\n      labs(x = \"Color\", y = \"Count\", fill = \"Color\") +\n      theme(legend.position = \"none\")\n  })\n}\n\nshinyApp(ui, server)\n```\n:::\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Load the Pokemon data\npokemon_data <- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv\")\n\nui <- page_sidebar(\n  title = \"Pokemon Data Explorer\",\n  sidebar = sidebar(\n    selectInput(\"type1\", \"Select Type 1:\", \n                choices = sort(unique(pokemon_data$type_1)),\n                selected = \"water\"),\n    hr(),\n    textOutput(\"pokemon_count\")\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Height Distribution by Type 2\"),\n      plotOutput(\"height_hist\")\n    ),\n    card(\n      card_header(\"Weight Distribution by Type 2\"),\n      plotOutput(\"weight_hist\")\n    )\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Attack Distribution by Type 2\"),\n      plotOutput(\"attack_hist\")\n    ),\n    card(\n      card_header(\"Defense Distribution by Type 2\"),\n      plotOutput(\"defense_hist\")\n    )\n  ),\n  \n  card(\n    card_header(\"Pokemon Color Distribution\"),\n    plotOutput(\"color_barplot\")\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Filtered data based on the selected type_1\n  filtered_data <- reactive({\n    pokemon_data %>%\n      filter(type_1 == input$type1)\n  })\n  \n  # Display number of Pokemon\n  output$pokemon_count <- renderText({\n    count <- nrow(filtered_data())\n    paste(\"Number of Pokemon with Type 1 '\", input$type1, \"': \", count)\n  })\n  \n  # Height histogram colored by type_2\n  output$height_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = height, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Height\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Weight histogram colored by type_2\n  output$weight_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = weight, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Weight\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Attack histogram colored by type_2\n  output$attack_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = attack, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Attack\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Defense histogram colored by type_2\n  output$defense_hist <- renderPlot({\n    ggplot(filtered_data(), aes(x = defense, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Defense\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Barplot of color_1\n  output$color_barplot <- renderPlot({\n    color_counts <- filtered_data() %>%\n      count(color_1) %>%\n      arrange(desc(n))\n    \n    ggplot(color_counts, aes(x = reorder(color_1, n), y = n, fill = color_1)) +\n      geom_col() +\n      coord_flip() +\n      scale_fill_brewer(palette = \"Set3\") +\n      theme_minimal() +\n      labs(x = \"Color\", y = \"Count\", fill = \"Color\") +\n      theme(legend.position = \"none\")\n  })\n}\n\nshinyApp(ui, server)\n\n```\n\n\n\n## Python\n\n### install shiny in python\n\nNeed to down grade shinylive Python version to  0.7.1 in order to match shinylive R version\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nos.system(\"pip install 'shinylive==0.7.1'\")\n```\n:::\n\n\n### read data\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins = pd.read_csv('penguins.csv')\npenguins_raw = pd.read_csv('penguins_raw.csv')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Option 2: Read directly from GitHub and assign to an object\n#penguins = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-15/penguins.csv')\n#penguins_raw = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-15/penguins_raw.csv')\n```\n:::\n\n\n### using shinyapps assistant to create shinyapp\n\nhttps://gallery.shinyapps.io/assistant\n\ninstall shinylive\n\n::: {.cell}\n\n```{.bash .cell-code}\npip install shinylive\n```\n:::\n\n\n### Prompt:\n\ncreate a shinyapp with this data from github:https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-15/penguins_raw.csv.\n\nspecies choices is not correct,please use correct choices.\n\n\n### Shiny Python in quarto\n\nif adding shiny in quarto then adding this to yaml header\n\n```yaml\n---\n\nfilters:\n  - shinylive\n---\n```\n\n::: {.cell standalone='true' viewerHeight='800'}\n\n```{.python .cell-code  code-fold=\"true\"}\nfrom shiny import App, reactive, render, ui\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport urllib3\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.h3(\"Penguin Data Explorer\"),\n        ui.input_select(\n            \"species\",\n            \"Select Penguin Species\",\n            choices=[\"All Species\", \"Adelie Penguin (Pygoscelis adeliae)\", \n                     \"Gentoo penguin (Pygoscelis papua)\", \n                     \"Chinstrap penguin (Pygoscelis antarctica)\"]\n        ),\n        ui.input_select(\n            \"plot_type\",\n            \"Select Plot Type\",\n            choices=[\n                \"Body Mass vs Flipper Length\",\n                \"Culmen Length vs Depth\",\n                \"Histogram of Body Mass\"\n            ]\n        ),\n        ui.input_checkbox_group(\n            \"islands\",\n            \"Select Islands\",\n            choices=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n            selected=[\"Torgersen\", \"Biscoe\", \"Dream\"]\n        ),\n        ui.hr(),\n        ui.p(\"Data from Palmer Penguins dataset via TidyTuesday.\"),\n    ),\n    ui.card(\n        ui.card_header(\"Penguin Data Visualization\"),\n        ui.output_plot(\"penguin_plot\")\n    ),\n    ui.card(\n        ui.card_header(\"Data Summary\"),\n        ui.output_table(\"summary_table\")\n    )\n)\n\ndef server(input, output, session):\n    # Load data\n    @reactive.calc\n    def load_data():\n        http = urllib3.PoolManager()\n        url = \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-15/penguins_raw.csv\"\n        \n        try:\n            response = http.request('GET', url)\n            if response.status != 200:\n                # If file not found, use fallback URL\n                fallback_url = \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins_raw.csv\"\n                response = http.request('GET', fallback_url)\n                \n            data = pd.read_csv(pd.io.common.StringIO(response.data.decode('utf-8')))\n            return data\n        except Exception as e:\n            print(f\"Error loading data: {e}\")\n            # Return empty dataframe if there are issues\n            return pd.DataFrame()\n\n    @reactive.calc\n    def filtered_data():\n        data = load_data()\n        if data.empty:\n            return pd.DataFrame()\n        \n        # Clean column names\n        data.columns = [col.strip() for col in data.columns]\n        \n        # Filter data based on inputs\n        filtered = data.copy()\n        \n        # Filter by species\n        if input.species() != \"All Species\":\n            filtered = filtered[filtered['Species'] == input.species()]\n        \n        # Filter by islands\n        filtered = filtered[filtered['Island'].isin(input.islands())]\n        \n        return filtered\n\n    @output\n    @render.plot\n    def penguin_plot():\n        data = filtered_data()\n        if data.empty:\n            fig, ax = plt.subplots()\n            ax.text(0.5, 0.5, \"No data available or error loading data\", \n                    ha='center', va='center')\n            ax.set_xlim(0, 1)\n            ax.set_ylim(0, 1)\n            ax.axis('off')\n            return fig\n        \n        fig, ax = plt.subplots(figsize=(10, 6))\n        \n        plot_type = input.plot_type()\n        \n        if plot_type == \"Body Mass vs Flipper Length\":\n            sns.scatterplot(\n                data=data, \n                x='Flipper Length (mm)', \n                y='Body Mass (g)',\n                hue='Species',\n                style='Sex',\n                ax=ax\n            )\n            ax.set_title(\"Body Mass vs Flipper Length\")\n            \n        elif plot_type == \"Culmen Length vs Depth\":\n            sns.scatterplot(\n                data=data, \n                x='Culmen Length (mm)', \n                y='Culmen Depth (mm)',\n                hue='Species',\n                style='Sex',\n                ax=ax\n            )\n            ax.set_title(\"Culmen Length vs Depth\")\n            \n        elif plot_type == \"Histogram of Body Mass\":\n            sns.histplot(\n                data=data,\n                x='Body Mass (g)',\n                hue='Species',\n                kde=True,\n                ax=ax\n            )\n            ax.set_title(\"Distribution of Body Mass\")\n            \n        plt.tight_layout()\n        return fig\n\n    @output\n    @render.table\n    def summary_table():\n        data = filtered_data()\n        if data.empty:\n            return pd.DataFrame({'Message': ['No data available or error loading data']})\n        \n        # Create a summary table with counts by species and island\n        summary = data.groupby(['Species', 'Island', 'Sex']).size().reset_index(name='Count')\n        \n        # Add some descriptive statistics\n        stats = data.groupby(['Species']).agg({\n            'Body Mass (g)': ['mean', 'std'],\n            'Flipper Length (mm)': ['mean', 'std'],\n            'Culmen Length (mm)': ['mean', 'std'],\n            'Culmen Depth (mm)': ['mean', 'std']\n        }).round(2)\n        \n        stats.columns = ['_'.join(col).strip() for col in stats.columns.values]\n        stats = stats.reset_index()\n        \n        return summary\n\napp = App(app_ui, server)\n```\n:::\n\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 800\nfrom shiny import App, reactive, render, ui\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport urllib3\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.h3(\"Penguin Data Explorer\"),\n        ui.input_select(\n            \"species\",\n            \"Select Penguin Species\",\n            choices=[\"All Species\", \"Adelie Penguin (Pygoscelis adeliae)\", \n                     \"Gentoo penguin (Pygoscelis papua)\", \n                     \"Chinstrap penguin (Pygoscelis antarctica)\"]\n        ),\n        ui.input_select(\n            \"plot_type\",\n            \"Select Plot Type\",\n            choices=[\n                \"Body Mass vs Flipper Length\",\n                \"Culmen Length vs Depth\",\n                \"Histogram of Body Mass\"\n            ]\n        ),\n        ui.input_checkbox_group(\n            \"islands\",\n            \"Select Islands\",\n            choices=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n            selected=[\"Torgersen\", \"Biscoe\", \"Dream\"]\n        ),\n        ui.hr(),\n        ui.p(\"Data from Palmer Penguins dataset via TidyTuesday.\"),\n    ),\n    ui.card(\n        ui.card_header(\"Penguin Data Visualization\"),\n        ui.output_plot(\"penguin_plot\")\n    ),\n    ui.card(\n        ui.card_header(\"Data Summary\"),\n        ui.output_table(\"summary_table\")\n    )\n)\n\ndef server(input, output, session):\n    # Load data\n    @reactive.calc\n    def load_data():\n        http = urllib3.PoolManager()\n        url = \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-15/penguins_raw.csv\"\n        \n        try:\n            response = http.request('GET', url)\n            if response.status != 200:\n                # If file not found, use fallback URL\n                fallback_url = \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins_raw.csv\"\n                response = http.request('GET', fallback_url)\n                \n            data = pd.read_csv(pd.io.common.StringIO(response.data.decode('utf-8')))\n            return data\n        except Exception as e:\n            print(f\"Error loading data: {e}\")\n            # Return empty dataframe if there are issues\n            return pd.DataFrame()\n\n    @reactive.calc\n    def filtered_data():\n        data = load_data()\n        if data.empty:\n            return pd.DataFrame()\n        \n        # Clean column names\n        data.columns = [col.strip() for col in data.columns]\n        \n        # Filter data based on inputs\n        filtered = data.copy()\n        \n        # Filter by species\n        if input.species() != \"All Species\":\n            filtered = filtered[filtered['Species'] == input.species()]\n        \n        # Filter by islands\n        filtered = filtered[filtered['Island'].isin(input.islands())]\n        \n        return filtered\n\n    @output\n    @render.plot\n    def penguin_plot():\n        data = filtered_data()\n        if data.empty:\n            fig, ax = plt.subplots()\n            ax.text(0.5, 0.5, \"No data available or error loading data\", \n                    ha='center', va='center')\n            ax.set_xlim(0, 1)\n            ax.set_ylim(0, 1)\n            ax.axis('off')\n            return fig\n        \n        fig, ax = plt.subplots(figsize=(10, 6))\n        \n        plot_type = input.plot_type()\n        \n        if plot_type == \"Body Mass vs Flipper Length\":\n            sns.scatterplot(\n                data=data, \n                x='Flipper Length (mm)', \n                y='Body Mass (g)',\n                hue='Species',\n                style='Sex',\n                ax=ax\n            )\n            ax.set_title(\"Body Mass vs Flipper Length\")\n            \n        elif plot_type == \"Culmen Length vs Depth\":\n            sns.scatterplot(\n                data=data, \n                x='Culmen Length (mm)', \n                y='Culmen Depth (mm)',\n                hue='Species',\n                style='Sex',\n                ax=ax\n            )\n            ax.set_title(\"Culmen Length vs Depth\")\n            \n        elif plot_type == \"Histogram of Body Mass\":\n            sns.histplot(\n                data=data,\n                x='Body Mass (g)',\n                hue='Species',\n                kde=True,\n                ax=ax\n            )\n            ax.set_title(\"Distribution of Body Mass\")\n            \n        plt.tight_layout()\n        return fig\n\n    @output\n    @render.table\n    def summary_table():\n        data = filtered_data()\n        if data.empty:\n            return pd.DataFrame({'Message': ['No data available or error loading data']})\n        \n        # Create a summary table with counts by species and island\n        summary = data.groupby(['Species', 'Island', 'Sex']).size().reset_index(name='Count')\n        \n        # Add some descriptive statistics\n        stats = data.groupby(['Species']).agg({\n            'Body Mass (g)': ['mean', 'std'],\n            'Flipper Length (mm)': ['mean', 'std'],\n            'Culmen Length (mm)': ['mean', 'std'],\n            'Culmen Depth (mm)': ['mean', 'std']\n        }).round(2)\n        \n        stats.columns = ['_'.join(col).strip() for col in stats.columns.values]\n        stats = stats.reset_index()\n        \n        return summary\n\napp = App(app_ui, server)\n\n\n```\n\n\n\n\n:::\n\n\n  \n  \n\n# Reference\n\nhttps://github.com/rfordatascience/tidytuesday\n\nhttps://github.com/posit-dev/python-tidytuesday\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}