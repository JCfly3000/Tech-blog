{
  "hash": "4132f0abba0458b8ff3de85670f35f11",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"使用R httr2 调用API\"\nsubtitle: \"Using R httr2 to call API\"\nauthor: \"Tony D\"\n\ndate: \"2025-03-15\"\n\ncategories: \n  - Tool\n  - R\n\n  \nexecute:\n  warning: false\n  error: false\n  eval: false\n\nimage: 'logo.png'\n  \n---\n\nPackage httr2 for pipeable API for working with web APIs\n\n\n# Example 1: call US weather API\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install('httr2')\n```\n:::\n\nhttps://api.weather.gov/points/38.8894,-77.0352\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(tidyverse)\n```\n:::\n\n\n## API link\n::: {.cell}\n\n```{.r .cell-code}\nNWS_base_url <- 'https://api.weather.gov'\n\nNWS_response_link <- request(NWS_base_url) |> \n  req_url_path_append(\n    'points',\n    '38.8894,-77.0352'\n  ) \n\nNWS_response_link\n```\n:::\n\n## create response and check connection\n::: {.cell}\n\n```{.r .cell-code}\nNWS_response=NWS_response_link|> req_perform()\nNWS_response\n```\n:::\n\n## get forecast hourly url  from response\n\n::: {.cell}\n\n```{.r .cell-code}\nNWS_response |> \n  resp_body_json() |> \n  glimpse()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast_url <- NWS_response |> \n  resp_body_json() |> \n  pluck('properties', 'forecastHourly')\n\nforecast_url\n```\n:::\n\n## make forecast hourly  response\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast_response <- request(forecast_url) |> \n  req_perform()\n\nforecast_response |> \n  resp_body_json() |> \n  glimpse()\n```\n:::\n\n## get forecast hourly data\n\n::: {.cell}\n\n```{.r .cell-code}\nextracted_data <- forecast_response |> \n  resp_body_json() |> \n  pluck('properties', 'periods') |> \n  map_dfr( # iterates over each list and binds rows to a tibble\n    \\(x) {\n      tibble(\n        time = x |> pluck('startTime'),\n        temp_F = x |> pluck('temperature'),\n        rain_prob = x |> pluck('probabilityOfPrecipitation', 'value'),\n        forecast = x |> pluck('shortForecast')\n      )\n    }\n  )\n\nextracted_data\n```\n:::\n\n\n\n# Example 2 :openweathermap\n\n\nhttps://home.openweathermap.org/\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install('httr2')\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\n```\n:::\n\n## create response\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keyring)\nopenweathermap_base_url <- 'https://api.openweathermap.org/data/2.5'\n\nopenweathermap_api_key=key_get(\"openweathermap_api_key\")\n\ncity='Bangkok'\n\nopenweathermap_response_link <- request(openweathermap_base_url) |> \n  req_url_path_append(\n    paste0('weather?q=',city,'&appid=',openweathermap_api_key,'&units=metric')\n  ) \n\nopenweathermap_response_link\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nopenweathermap_response=openweathermap_response_link|> req_perform()\nopenweathermap_response\n```\n:::\n\n## get data from response\n\n::: {.cell}\n\n```{.r .cell-code}\nopenweathermap_response |> \n  resp_body_json() |> \n  glimpse()\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopenweathermap_response |> \n  resp_body_json() |> \n  pluck('main', 'temp') \n\na=openweathermap_response |> \n  resp_body_json() |> \n  pluck('weather') \n\n(a[[1]])$main\n\nopenweathermap_response |> \n  resp_body_json() |> \n  pluck('name') \n\nopenweathermap_response |> \n  resp_body_json() |> \n  pluck('coord', 'lon') \n\nopenweathermap_response |> \n  resp_body_json() |> \n  pluck('coord', 'lat') \n```\n:::\n\n\nLondon air_pollution:\n\nhttp://api.openweathermap.org/data/2.5/air_pollution?lat=51.5085&lon=-0.1257&appid=625ae405e4f11b5b957af484b77fbd62\n\n\n\n\n\n# Reference\n\nhttps://httr2.r-lib.org/\n\nhttps://www.youtube.com/watch?v=8tilyqp4bZY\n\nhttps://www.youtube.com/watch?v=hmtE4QGIOuk\n\nhttps://openweathermap.org/current\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}