{
  "hash": "c56de2b42b101d52781cea6f1fd1eb8a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Gemini CLI\"\nsubtitle: \"Your AI assistant in the terminal\"\nauthor: \"Tony D\"\ndate: \"2025-07-18\"\n\ncategories:\n  - Tool\n  - AI\n  - CLI\n\nexecute:\n  warning: false\n  error: false\n  eval: false\n\n---\n\nThis post is an introduction to the Gemini CLI, a powerful tool that brings Google's Gemini models to your command line interface.\n\n![](images/clipboard-1691937458.png)\n\n# What is Gemini CLI?\n\nGemini CLI is a command-line interface that allows you to interact with Google's Gemini large language models directly from your terminal. It's designed for developers, data scientists, and anyone who wants to leverage the power of AI for their daily tasks without leaving the command line.\n\n# Key Features\n\n-   **Direct access to Gemini models:** Interact with Gemini Pro and other models.\n-   **Code generation and understanding:** Ask for code snippets, get explanations of code, and even get help with debugging.\n-   **File system interaction:** Gemini CLI can read your files, help you search for content, and even apply changes to your code.\n-   **Shell command execution:** Run shell commands directly through the CLI.\n-   **Context-aware:** Gemini CLI can understand the context of your project and provide more relevant assistance.\n\n\n\n# Introduction to the Gemini CLI\n\nThe Gemini CLI is a command-line interface that allows you to interact with Google's Gemini models directly from your terminal. It provides a convenient way to experiment with Gemini, test prompts, and build powerful shell scripts that leverage the capabilities of large language models.\n\nThis guide will walk you through the process of installing and configuring the Gemini CLI.\n\n# Prerequisites: Node.js Installation\n\nThe Gemini CLI is distributed as an npm package, so you need to have Node.js and npm installed on your system. The recommended way to install Node.js is by using the Node Version Manager (nvm).\n\n::: {.cell}\n\n```{.python .cell-code}\n# Download and install nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n\n# Activate nvm for the current shell session\nsource ~/.nvm/nvm.sh\n\n# Install the latest stable version of Node.js\nnvm install 20\n\n# Verify the installation\nnode -v\nnpm -v\n```\n:::\n\n# Installing the Gemini CLI\n\nOnce you have Node.js and npm ready, you can install the Gemini CLI globally on your system.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Install the Gemini CLI package\nnpm install -g @google/gemini-cli\n```\n:::\n\n## Upgrading the Gemini CLI\n\nTo ensure you have the latest features and bug fixes, you can upgrade the package from time to time.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Upgrade the Gemini CLI to the latest version\nnpm upgrade -g @google/gemini-cli\n```\n:::\n\n# Configuration\n\nTo use the Gemini CLI, you need to authenticate with your Google account and configure your project.\n\n## Login with Your Google Account\n\nYou can either log in with your Google Cloud account or use an API key.\n\n### Option 1: Login with Google Cloud Account\n\n::: {.cell}\n\n```{.python .cell-code}\n# Set your Google Cloud project ID\nexport GOOGLE_CLOUD_PROJECT=\"your-google-cloud-project-id\"\n```\n:::\n\n\nor save the GOOGLE_CLOUD_PROJECT into environment variable.So that do not need to re enter everytime\n\n#### check using zsh or bash\n\n::: {.cell}\n\n```{.python .cell-code}\necho $SHELL\n```\n:::\n\n#### for zsh\n::: {.cell}\n\n```{.python .cell-code}\necho 'export GOOGLE_CLOUD_PROJECT=\"your-google-cloud-project-id\"' >> ~/.zshrc\n\nsource ~/.zshrc\n```\n:::\n\n\n#### for bash\n::: {.cell}\n\n```{.python .cell-code}\necho 'export GOOGLE_CLOUD_PROJECT=\"your-google-cloud-project-id\"' >> ~/.bashrc\n\nsource ~/.bashrc\n```\n:::\n\n\n#### check wheather added or not\n\n::: {.cell}\n\n```{.python .cell-code}\necho $GOOGLE_CLOUD_PROJECT\n```\n:::\n\n\n\n### Option 2: Login with API Key\n\nAlternatively, you can use an API key for authentication.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Set your Gemini API key as an environment variable\nexport GEMINI_API_KEY=\"your-gemini-api-key\"\n```\n:::\n\n## Set the Location\n\nYou also need to specify the Google Cloud location where your resources will be managed.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Set the Google Cloud location\nexport GOOGLE_CLOUD_LOCATION='us-central1'\n```\n:::\n\n# Running the Gemini CLI\n\nOnce everything is set up, you can run the Gemini CLI to start interacting with the models.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Run the Gemini CLI\ngemini\n```\n:::\n\n# Running the Gemini CLI with agreement to all access\n\n::: {.cell}\n\n```{.python .cell-code}\n# Run the Gemini CLI\ngemini --yolo\n```\n:::\n\n\n\n# Running the Gemini CLI with agreement to all access and with a specific model\n\n::: {.cell}\n\n```{.python .cell-code}\n# Run the Gemini CLI\ngemini --yolo --model gemini-2.5-flash\n```\n:::\n\n# Tool\n\n\n## Memory Tool (save_memory)\n\n\nThe tool appends the provided fact to a special GEMINI.md file located in the user's home directory (~/.gemini/GEMINI.md). This file can be configured to have a different name.\n\nOnce added, the facts are stored under a ## Gemini Added Memories section. This file is loaded as context in subsequent sessions, allowing the CLI to recall the saved information.\n\n::: {.cell}\n\n````{.bash .cell-code}\nsave_memory(fact=\"R program code chunk in quarto:\n```{r}  \n  \n```\n\")\n````\n:::\n\n\n::: {.cell}\n\n````{.bash .cell-code}\nsave_memory(fact=\"Python program code chunk in quarto:\n```{python}  \n  \n```\n\")\n````\n:::\n\n\n\nview the saved memory file\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat ~/.gemini/GEMINI.md\n```\n:::\n\n\nor open with sublime text editor\n\n::: {.cell}\n\n```{.bash .cell-code}\necho 'export PATH=\"/Applications/Sublime Text.app/Contents/SharedSupport/bin:$PATH\"' >> ~/.zprofile\n\nsubl ~/.gemini/GEMINI.md\n```\n:::\n\n\n\n\n\n\n\n\n# Conclusion\n\nThe Gemini CLI is a powerful tool for developers and enthusiasts who want to explore the capabilities of Google's Gemini models from the command line. With its simple installation and configuration process, you can quickly start leveraging the power of generative AI in your daily workflows.\n\n# Reference\n\n-   [Gemini CLI on GitHub](https://github.com/google-gemini/gemini-cli)\n-   [Node.js Downloads](https://nodejs.org/en/download)\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}