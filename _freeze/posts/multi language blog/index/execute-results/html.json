{
  "hash": "1f6bb6505bc67332e471d3f082971a39",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"多语言 quarto blog \"\nsubtitle: \"babelquarto\"\nauthor: \"Tony Duan\"\ndate: \"2025-07-03\"\ncategories: [quarto]\nexecute:\n  warning: false\n  error: false\n  eval: false\n  \nformat:\n  html:\n    toc: true\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nA guide to creating a multi-language Quarto blog using the `babelquarto` R package.\n\nThis document provides a step-by-step guide to creating a multi-language blog using Quarto and the `babelquarto` R package. It covers the entire process, from installing and loading the necessary packages to setting up the main and additional languages. The guide also explains how to modify the `_quarto.yml` file for language-specific configurations, create new language versions of your `.qmd` files, and render the final website. It also suggests using LLMs for translation to streamline the content creation process.\n\n![](images/clipboard-2709382732.png){width=\"600\"}\n\n# install package\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"ropensci-review-tools/babelquarto\")\n```\n:::\n\n# load package\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(babelquarto)\nlibrary(fs)\n```\n:::\n\n# set main language\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwebsite_dir=getwd()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nregister_main_language(\n  main_language = \"en\",\n  project_path = website_dir\n)\n```\n:::\n\n# add new language\n\n::: {.cell}\n\n```{.r .cell-code}\nregister_further_languages(c(\"cn\"), website_dir)\n```\n:::\n\n\n# change _quarto.yml if needed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabelquarto:\n  languagecodes:\n  - name: cn\n    text: \"中文\"\n  - name: en\n    text: \"EN\"\n  mainlanguage: 'en'\n  languages: ['cn']\ntitle-cn: title in cn\ndescription-cn: description in cn\nauthor-cn: author in cn\nlang: en\n```\n:::\n\n\n\n# add new language qmd\n\nfile name example:for example \"index.cn.qmd\"\n\nusing LLM to create new language qmd file\n\n\"translate all qmd to chinese and write to new qmd file.file name example index.cn.qmd ellmer.cn.qmd and so on\" in gemini\n\n\n\n# render all document\n\n\n## add site url to system environment before render\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(BABELQUARTO_CI_URL=\"https://jcfly3000.github.io/into_AI/\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.getenv(\"BABELQUARTO_CI_URL\")\n```\n:::\n\n##  we use babelquarto::render_website().\n\nwe need to render the .qmd files to HTML. If you are used to using Quarto, you may expect to do this with quarto render or quarto preview, but those do not work with babelquarto.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabelquarto::render_website()\n```\n:::\n\n\n\n# view\n\nNow we’d like to view the rendered website in a browser. Once again, quarto preview cannot be used here. Instead, use servr::httw().\n\n::: {.cell}\n\n```{.r .cell-code}\nservr::httw(path(website_dir, \"docs\"))\n```\n:::\n\n# Reference\n\nhttps://github.com/joelnitta/example-babelquarto\n\nhttps://joelnitta.com/posts/2024-12-06_babelquarto/\n\nhttps://docs.ropensci.org/babelquarto/\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}