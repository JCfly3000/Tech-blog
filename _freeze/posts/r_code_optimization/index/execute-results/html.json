{
  "hash": "9ff7b777ac1b83e6a642c12a62284ea3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R code optimization with lintr and styler\"\nauthor: \"Tony D\"\nexecute:\n  warning: false\n  error: false\n\ndate: \"2025-03-15\"\ncategories: \n  - Tool\n  - R\n  \nimage: \"images/my screenshots 2.png\"\n\n---\n\npacakge for R code optimization\n\n# lintr\n\n{lintr} provides static code analysis for R. It checks for adherence to a given style, identifying syntax errors and possible semantic issues, then reports them to you so you can take action. Watch lintr in action in the following animation:\n\n\nhttps://github.com/r-lib/lintr\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install(\"lintr\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lintr)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlint(\"\na = 123\n    c=5\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<text>:2:3: style: [assignment_linter] Use one of <-, <<- for assignment, not =.\na = 123\n  ^\n<text>:3:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.\n    c=5\n~~~^\n<text>:3:6: style: [assignment_linter] Use one of <-, <<- for assignment, not =.\n    c=5\n     ^\n<text>:3:6: style: [infix_spaces_linter] Put spaces around all infix operators.\n    c=5\n     ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlint(\"test.R\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/Users/jinchaoduan/Documents/Project/Tech blog/posts/r_code_optimization/test.R:3:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.\nGood <- 1\n^~~~\n/Users/jinchaoduan/Documents/Project/Tech blog/posts/r_code_optimization/test.R:4:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.\napplePie <- Good + 1\n^~~~~~~~\n/Users/jinchaoduan/Documents/Project/Tech blog/posts/r_code_optimization/test.R:5:1: style: [object_name_linter] Variable and function name style should match snake_case or symbols.\nPeter <- d + 1\n^~~~~\n```\n\n\n:::\n:::\n\n\n\n# styler\n\n\nstyler formats your code according to the tidyverse style guide (or your custom style guide) so you can direct your attention to the content of your code. It helps to keep the coding style consistent across projects and facilitate collaboration. You can access styler through\n\nhttps://github.com/r-lib/styler\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install(\"styler\")\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(styler)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstyle_text(\"\n\na = 3\n\nsmall_Car='Toyota'\nBig=330\n\n\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\na <- 3\n\nsmall_Car <- \"Toyota\"\nBig <- 330\n```\n\n\n:::\n:::\n\n## Before\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"dplyr\")\n\n   Good <- 1\napplePie <- Good + 1\n    Peter <- d + 1\n```\n:::\n\n\n\n## Auto formating\n\n::: {.cell filename='test.R'}\n\n```{.r .cell-code}\nstyle_file(\"test.R\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStyling  1  files:\n test.R ✔ \n────────────────────────────────────────\nStatus\tCount\tLegend \n✔ \t1\tFile unchanged.\nℹ \t0\tFile changed.\n✖ \t0\tStyling threw an error.\n────────────────────────────────────────\n```\n\n\n:::\n:::\nAfter\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"dplyr\")\n\nGood <- 1\napplePie <- Good + 1\nPeter <- d + 1\n```\n:::\n\n\n\n\n\n# reference\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}