{
  "hash": "99ba1c148daab6588fcd941b769d7818",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Version control with renv\"\n\nauthor: \"Tony D\"\nexecute:\n  warning: false\n  error: false\n  eval: false\n  \ndate: \"2025-03-11\"\ncategories: \n  - Tool\n  - R\n  - Python\n  \nimage: \"images.png\"\n---\n\nThe renv package helps you create reproducible environments for your R projects\n\n![](https://rstudio.github.io/renv/articles/renv.png)\n# renv for R\n\n\n## inital renv and create renv.lock with current loaded pacakge\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::init()\n```\n:::\n\n\n## show all installed pacakge\n\n::: {.cell}\n\n```{.r .cell-code}\ninstalled_pacakge = as.data.frame(installed.packages()[,c(1,3:4)])\ninstalled_pacakge = installed_pacakge[is.na(installed_pacakge$Priority),1:2,drop=FALSE]\ninstalled_pacakge\n```\n:::\n\n\n## show all installed pacakge and uploaded pacakge\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ninstalled_pacakge = as.data.frame(installed.packages()[,c(1,3:4)])\ninstalled_pacakge = installed_pacakge[is.na(installed_pacakge$Priority),1:2,drop=FALSE]\ninstalled_pacakge |> filter(Package %in% (.packages()))\n```\n:::\n\n\n\n\n## when using renv and install new pakcage\n\n::: {.cell}\n\n```{.r .cell-code}\n# it will not work\n# library(lubridate)\n```\n:::\n\n## install new package with renv::install\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::install('lubridate')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n:::\n\n\n## check current package and renv package\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::status()\n```\n:::\n\n## update lock file\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::snapshot()\n```\n:::\n\n## check status again\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::status()\n```\n:::\n\n## make all current pakcage version back to renv list\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::restore()\n```\n:::\n\n## update all pakcage in renv. recommand do it once a year to keep package updated.\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::update()\n```\n:::\n\n## update renv itself only\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::upgrade()\n```\n:::\n## close renv in a project\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::deactivate()\n```\n:::\n\n\n## re enable renv in a project\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::activate()\n```\n:::\n\n\n# renv in python\n\n\n## set python version\n::: {.cell}\n\n```{.r .cell-code}\nrenv::use_python()\n```\n:::\n\n## check python version in renv\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sys import version as python_formatted_version\nprint(python_formatted_version)\n```\n:::\n\n\n## list all installed pacakge in python\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nprint(os.system('pip freeze'))\n```\n:::\n\n\n## install package\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nos.system('python3.10 -m pip install siuba')\n```\n:::\n\n\n## update lock file\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::snapshot()\n```\n:::\n\n\n## uninstall package\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nos.system('yes | python3.10 -m pip uninstall siuba')\n```\n:::\n\n\n## make all current pakcage version back to renv list\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::restore()\n```\n:::\n\n## install package\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nos.system('python3.10 -m pip install requests')\n```\n:::\n\n## update lock file\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::snapshot()\n```\n:::\n\n\n# reference:\n\nRobust R Code That Will Work Forever With {renv} by Albert Rapp:\n\nhttps://www.youtube.com/watch?v=Oen9xhEh8PY\n\nhttps://rstudio.github.io/renv/articles/renv.html\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}