{
  "hash": "8394de5bf8087f394f46bf8f8adf702f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"剪切视频/音频\"\nsubtitle: \"video/sound editing\"\nauthor: \"Tony D\"\ndate: \"2025-05-05\"\n\ncategories: \n  - Tool\n  - R\n  - Python\n\n  \nexecute:\n  warning: false\n  error: false\n\n  \n\nimage: 'images/images.jpg'\n\n\n---\n\nvideo editing include change resolution and length using R and Python\n\n\nOriginal video:\n\n{{< video demo.mp4 >}}\n\n# Video\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(av)\n```\n:::\n\n## check video resolution \n\n::: {.cell}\n\n```{.r .cell-code}\nget_video_resolution_ffmpeg <- function(file_path) {\n  if (!file.exists(file_path)) {\n    stop(\"File does not exist.\")\n  }\n  # Run ffmpeg command and capture output\n  cmd <- sprintf(\"ffmpeg -i %s 2>&1\", shQuote(normalizePath(file_path)))\n  output <- system(cmd, intern = TRUE, ignore.stderr = FALSE)\n  # Find the line containing video stream details\n  video_line <- grep(\"Video:\", output, value = TRUE)\n  if (length(video_line) == 0) {\n    stop(\"No video stream found.\")\n  }\n  # Extract resolution using regex (e.g., 1920x1080)\n  resolution <- regmatches(video_line, regexpr(\"\\\\d{3,}x\\\\d{3,}\", video_line))\n  if (length(resolution) == 0) {\n    stop(\"Resolution not detected.\")\n  }\n  dimensions <- as.numeric(strsplit(resolution, \"x\")[[1]])\n  return(dimensions)\n}\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresolution <- get_video_resolution_ffmpeg(\"demo.mp4\")\ncat(sprintf(\"Resolution: %dx%d\", resolution[1], resolution[2]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResolution: 960x720\n```\n\n\n:::\n:::\n\n\n## check video length and size\n\n::: {.cell}\n\n```{.r .cell-code}\nvideo_info <- av::av_media_info(\"demo.mp4\")\nvideo_length <- video_info$duration\ncat(\"video length:\",video_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvideo length: 30.02501\n```\n\n\n:::\n\n```{.r .cell-code}\nvideo_size_mb <- file.info(\"demo.mp4\")$size / (1024^2)\ncat(\"video size in mb:\",video_size_mb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvideo size in mb: 1.029325\n```\n\n\n:::\n:::\n\n## change video resolution\n\n::: {.cell}\n\n```{.r .cell-code}\n# Input video file path\ninput_video <- \"demo.mp4\"\n\n# Output video file path\noutput_video <- \"demo_resolution.mp4\"\n\n# Desired width and height\nnew_width <- 960/3*2\nnew_height <- 720/3*2\n\n# Construct the FFmpeg command for resizing\nffmpeg_command <- paste0(\n  \"ffmpeg -i '\", input_video, \"' -vf scale=\", new_width, \":\", new_height, \" '\", output_video, \"'\"\n)\n\n# Execute the FFmpeg command\nsystem(ffmpeg_command)\n\ncat(\"Video resized to\", new_width, \"x\", new_height, \"and saved to\", output_video, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nVideo resized to 640 x 480 and saved to demo_resolution.mp4 \n```\n\n\n:::\n:::\n\nVideo after change resolution:\n\n{{< video demo_resolution.mp4 >}}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresolution <- get_video_resolution_ffmpeg(output_video)\ncat(sprintf(\"Resolution: %dx%d\", resolution[1], resolution[2]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResolution: 640x480\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvideo_info <- av::av_media_info(output_video)\nvideo_length <- video_info$duration\ncat(\"video length:\",video_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvideo length: 30.02501\n```\n\n\n:::\n\n```{.r .cell-code}\nvideo_size_mb <- file.info(output_video)$size / (1024^2)\ncat(\"video size in mb:\",video_size_mb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvideo size in mb: 0.72155\n```\n\n\n:::\n:::\n\n\n## change length of video\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define input/output files and timestamps\ninput_file <- \"demo.mp4\"\n\n# Define input and output file paths\ninput_video <- \"demo.mp4\"\noutput_video <- \"demo_change_length.mp4\"\n\n# --- Example 1: Trimming from the beginning ---\nstart_time <- \"00:00:05\" # Start at 5 seconds\nduration <- \"00:00:10\"  # Keep for 10 seconds\n\ncommand_trim <- sprintf(\"ffmpeg -i %s -ss %s -t %s  %s\",\n                        input_video, start_time, duration, output_video)\n\n#command_trim\nsystem(command_trim)\ncat(paste(\"Trimmed video saved to:\", output_video, \"\\n\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTrimmed video saved to: demo_change_length.mp4 \n```\n\n\n:::\n:::\n\n\n\nVideo after change length:\n\n{{< video demo_change_length.mp4 >}}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvideo_info <- av::av_media_info(\"demo_change_length.mp4\")\nvideo_length <- video_info$duration\ncat(\"video length:\",video_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvideo length: 10\n```\n\n\n:::\n\n```{.r .cell-code}\nvideo_size_mb <- file.info(\"demo_change_length.mp4\")$size / (1024^2)\ncat(\"video size in mb:\",video_size_mb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvideo size in mb: 0.275506\n```\n\n\n:::\n:::\n\n\n\n\n## video Crop\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the path to the input video file\ninput_video_path <- \"demo.mp4\"  # Replace with your video file path\n\n# Define the path to save the cropped video\noutput_video_path <- \"demo_crop.mp4\"  # Replace with your desired output path\n\n# Define crop parameters\ncrop_width <- 640   # Desired width of the cropped video\ncrop_height <- 360  # Desired height of the cropped video\ncrop_x <- 100       # X offset for cropping\ncrop_y <- 50        # Y offset for cropping\n\n# Define the crop filter\ncrop_filter <- sprintf(\"crop=%d:%d:%d:%d\", crop_width, crop_height, crop_x, crop_y)\n\n# Crop the video\nav::av_encode_video(\n  input = input_video_path,\n  output = output_video_path,\n  vfilter = crop_filter,\n  audio=input_video_path\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jinchaoduan/Documents/Project/Tech-blog/posts/video/demo_crop.mp4\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Video cropped successfully and saved to:\", output_video_path, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nVideo cropped successfully and saved to: demo_crop.mp4 \n```\n\n\n:::\n:::\n\n\nVideo after crop:\n\n{{< video demo_crop.mp4  >}}\n\n\n\n# video to image\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert MP4 to images (frames)\nav_video_images(\n  video = \"demo.mp4\", \n  destdir = \"output_img\",  # Save frames as PNG files\n  format = \"jpg\",\n  fps = 1  # Extract 1 frame per second (adjust FPS as needed)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"output_img/image_000001.jpg\" \"output_img/image_000002.jpg\"\n [3] \"output_img/image_000003.jpg\" \"output_img/image_000004.jpg\"\n [5] \"output_img/image_000005.jpg\" \"output_img/image_000006.jpg\"\n [7] \"output_img/image_000007.jpg\" \"output_img/image_000008.jpg\"\n [9] \"output_img/image_000009.jpg\" \"output_img/image_000010.jpg\"\n[11] \"output_img/image_000011.jpg\" \"output_img/image_000012.jpg\"\n[13] \"output_img/image_000013.jpg\" \"output_img/image_000014.jpg\"\n[15] \"output_img/image_000015.jpg\" \"output_img/image_000016.jpg\"\n[17] \"output_img/image_000017.jpg\" \"output_img/image_000018.jpg\"\n[19] \"output_img/image_000019.jpg\" \"output_img/image_000020.jpg\"\n[21] \"output_img/image_000021.jpg\" \"output_img/image_000022.jpg\"\n[23] \"output_img/image_000023.jpg\" \"output_img/image_000024.jpg\"\n[25] \"output_img/image_000025.jpg\" \"output_img/image_000026.jpg\"\n[27] \"output_img/image_000027.jpg\" \"output_img/image_000028.jpg\"\n[29] \"output_img/image_000029.jpg\" \"output_img/image_000030.jpg\"\n```\n\n\n:::\n:::\n# convert mp4 to mp3\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the path to the input MP4 file\ninput_video_path <- \"demo.mp4\"  # Replace with the path to your MP4 file\n\n# Define the path to save the output MP3 file\noutput_audio_path <- \"demo.mp3\"  # Replace with the desired output path for the MP3 file\n\n# Convert MP4 to MP3\nav::av_audio_convert(input_video_path,output_audio_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jinchaoduan/Documents/Project/Tech-blog/posts/video/demo.mp3\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Conversion complete! MP3 saved to:\", output_audio_path, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConversion complete! MP3 saved to: demo.mp3 \n```\n\n\n:::\n:::\n\n\n\n# Audio\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(av)\n```\n:::\n\n## Changing lengto of mp3\n\n::: {.cell}\n\n```{.r .cell-code}\nvideo_info=av::av_media_info(\"demo.mp3\" )\nvideo_info$duration\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30.04082\n```\n\n\n:::\n:::\n\n\n{{< video file=\"demo.mp3\" >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcm_data <- read_audio_bin(\"demo.mp3\" , channels = 1, end_time = 2.0)\nplot(pcm_data, type = 'l')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- 2 # Start at 1 seconds\ntotal_time <- 4  # Keep for 10 seconds\n\nav_audio_convert(audio=\"demo.mp3\",output=\"demo_cut.mp3\",start_time=start_time,total_time=total_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jinchaoduan/Documents/Project/Tech-blog/posts/video/demo_cut.mp3\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvideo_info=av::av_media_info(\"demo_cut.mp3\")\nvideo_info$duration\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.101224\n```\n\n\n:::\n:::\n\n\n{{< video file=\"demo_cut.mp3\" >}}\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}