[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tech blog",
    "section": "",
    "text": "密码管理\n\n\nPassword management\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n正则表达式代码\n\n\nregular expression\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用git代码版本管理\n\n\nUsing git for version control\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nTony Duan\n\n\n\n\n\n\n\n\n\n\n\n\nDocker使用介绍\n\n\nDocker intro\n\n\n\nTool\n\n\n\n\n\n\n\n\n\nMar 24, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nLinux系统操作代码\n\n\nLinux command\n\n\n\nTool\n\n\n\n\n\n\n\n\n\nMar 24, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nRun AI model online\n\n\n\n\n\n\nAI\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 18, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n本地运行AI模型\n\n\nRun AI model on local machine\n\n\n\nAI\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 18, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n（LLM）大语言模型\n\n\n(LLM)Large language model\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 18, 2025\n\n\nTony Duan\n\n\n\n\n\n\n\n\n\n\n\n\nMake QR code\n\n\n\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 16, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nR code optimization with lintr and styler\n\n\n\n\n\n\nTool\n\nR\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nAI Code assistant\n\n\n\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用R httr2 调用API\n\n\nUsing R httr2 to call API\n\n\n\nTool\n\nR\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTony Duan\n\n\n\n\n\n\n\n\n\n\n\n\n使用R pin数据传输\n\n\nFor data transfer between local and cloud\n\n\n\nTool\n\nR\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTony Duan\n\n\n\n\n\n\n\n\n\n\n\n\nPython code optimization with ruff\n\n\n\n\n\n\nTool\n\nPython\n\n\n\n\n\n\n\n\n\nMar 14, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nVersion control for Python with uv\n\n\n\n\n\n\nTool\n\nPython\n\n\n\n\n\n\n\n\n\nMar 14, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nR pacakge download and managment tool\n\n\n\n\n\n\nTool\n\nR\n\n\n\n\n\n\n\n\n\nMar 14, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nCPU and GPU\n\n\n\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nClassification Metrics\n\n\n\n\n\n\nMachine learning\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用iphone或ipad下载youtube\n\n\n\n\n\n\nTool\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nWeb scraping in R with rvest\n\n\n\n\n\n\nTool\n\nWebscrap\n\nR\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nWeb scraping in Python\n\n\n\n\n\n\nTool\n\nWebscrap\n\nPython\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nSubscribe to a YouTube channel via email\n\n\n\n\n\n\nTool\n\n\n\n\n\n\n\n\n\nMar 11, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nVersion control with renv\n\n\n\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 11, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nYoutube下载工具：yt-dlp\n\n\nYoutube download tool:yt-dlp\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 11, 2025\n\n\nTony Duan\n\n\n\n\n\n\n\n\n\n\n\n\nUseful resource\n\n\n\n\n\n\nnews\n\nresource\n\n\n\n\n\n\n\n\n\nMar 1, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 11, 2000\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMar 8, 2000\n\n\nTony D\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/subscribeYouTubeviaemail/index.html",
    "href": "posts/subscribeYouTubeviaemail/index.html",
    "title": "Subscribe to a YouTube channel via email",
    "section": "",
    "text": "If you want to Subscribe to a YouTube channel but do not want to follow them.The trick is figuring out how to subscribe to a YouTube channel via email\n\nStep 1: open youtube page of the channel want to subscribe\nfor example:https://www.youtube.com/@thecoatlessprofessor7674/videos\n\n\nStep 2: view page source\n\n\n\nStep 3: find ‘videos.xml’ in page source\nfor example: https://www.youtube.com/feeds/videos.xml?channel_id=UColncDCZ8SmTAHYr92QFclQ\n\n\nStep 4: Use an RSS-to-Email Tool to Subscribe\nusing free RSS tool https://feedrabbit.com and enter your email address to subscribe. \n\n\nStep 5: open email and activate feedrabbit from a email from feedrabbit\nWhen there is a new video you will get a email.\nyou can also view all subscribe at https://feedrabbit.com/subscriptions\n\n\nReference\nhttps://greggblanchard.com/how-to-subscribe-to-a-youtube-channel-via-email/"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/versioncontrol/index.html",
    "href": "posts/versioncontrol/index.html",
    "title": "Version control with renv",
    "section": "",
    "text": "The renv package helps you create reproducible environments for your R projects\nIt section also update into R handbook\n# renv for R"
  },
  {
    "objectID": "posts/versioncontrol/index.html#inital-renv-and-create-renv.lock-with-current-loaded-pacakge",
    "href": "posts/versioncontrol/index.html#inital-renv-and-create-renv.lock-with-current-loaded-pacakge",
    "title": "Version control with renv",
    "section": "inital renv and create renv.lock with current loaded pacakge",
    "text": "inital renv and create renv.lock with current loaded pacakge\n\nrenv::init()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#show-all-installed-pacakge",
    "href": "posts/versioncontrol/index.html#show-all-installed-pacakge",
    "title": "Version control with renv",
    "section": "show all installed pacakge",
    "text": "show all installed pacakge\n\ninstalled_pacakge = as.data.frame(installed.packages()[,c(1,3:4)])\ninstalled_pacakge = installed_pacakge[is.na(installed_pacakge$Priority),1:2,drop=FALSE]\ninstalled_pacakge"
  },
  {
    "objectID": "posts/versioncontrol/index.html#show-all-installed-pacakge-and-uploaded-pacakge",
    "href": "posts/versioncontrol/index.html#show-all-installed-pacakge-and-uploaded-pacakge",
    "title": "Version control with renv",
    "section": "show all installed pacakge and uploaded pacakge",
    "text": "show all installed pacakge and uploaded pacakge\n\nlibrary(dplyr)\ninstalled_pacakge = as.data.frame(installed.packages()[,c(1,3:4)])\ninstalled_pacakge = installed_pacakge[is.na(installed_pacakge$Priority),1:2,drop=FALSE]\ninstalled_pacakge |&gt; filter(Package %in% (.packages()))"
  },
  {
    "objectID": "posts/versioncontrol/index.html#when-using-renv-and-install-new-pakcage",
    "href": "posts/versioncontrol/index.html#when-using-renv-and-install-new-pakcage",
    "title": "Version control with renv",
    "section": "when using renv and install new pakcage",
    "text": "when using renv and install new pakcage\n\n# it will not work\n# library(lubridate)"
  },
  {
    "objectID": "posts/versioncontrol/index.html#install-new-package-with-renvinstall",
    "href": "posts/versioncontrol/index.html#install-new-package-with-renvinstall",
    "title": "Version control with renv",
    "section": "install new package with renv::install",
    "text": "install new package with renv::install\n\nrenv::install('lubridate')\n\n\nlibrary(lubridate)"
  },
  {
    "objectID": "posts/versioncontrol/index.html#check-current-package-and-renv-package",
    "href": "posts/versioncontrol/index.html#check-current-package-and-renv-package",
    "title": "Version control with renv",
    "section": "check current package and renv package",
    "text": "check current package and renv package\n\nrenv::status()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-lock-file",
    "href": "posts/versioncontrol/index.html#update-lock-file",
    "title": "Version control with renv",
    "section": "update lock file",
    "text": "update lock file\n\nrenv::snapshot()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#check-status-again",
    "href": "posts/versioncontrol/index.html#check-status-again",
    "title": "Version control with renv",
    "section": "check status again",
    "text": "check status again\n\nrenv::status()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#make-all-current-pakcage-version-back-to-renv-list",
    "href": "posts/versioncontrol/index.html#make-all-current-pakcage-version-back-to-renv-list",
    "title": "Version control with renv",
    "section": "make all current pakcage version back to renv list",
    "text": "make all current pakcage version back to renv list\n\nrenv::restore()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-all-pakcage-in-renv.-recommand-do-it-once-a-year-to-keep-package-updated.",
    "href": "posts/versioncontrol/index.html#update-all-pakcage-in-renv.-recommand-do-it-once-a-year-to-keep-package-updated.",
    "title": "Version control with renv",
    "section": "update all pakcage in renv. recommand do it once a year to keep package updated.",
    "text": "update all pakcage in renv. recommand do it once a year to keep package updated.\n\nrenv::update()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-renv-itself-only",
    "href": "posts/versioncontrol/index.html#update-renv-itself-only",
    "title": "Version control with renv",
    "section": "update renv itself only",
    "text": "update renv itself only\n\nrenv::upgrade()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#close-renv-in-a-project",
    "href": "posts/versioncontrol/index.html#close-renv-in-a-project",
    "title": "Version control with renv",
    "section": "close renv in a project",
    "text": "close renv in a project\n\nrenv::deactivate()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#re-enable-renv-in-a-project",
    "href": "posts/versioncontrol/index.html#re-enable-renv-in-a-project",
    "title": "Version control with renv",
    "section": "re enable renv in a project",
    "text": "re enable renv in a project\n\nrenv::activate()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#set-python-version",
    "href": "posts/versioncontrol/index.html#set-python-version",
    "title": "Version control with renv",
    "section": "set python version",
    "text": "set python version\n\nrenv::use_python()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#check-python-version-in-renv",
    "href": "posts/versioncontrol/index.html#check-python-version-in-renv",
    "title": "Version control with renv",
    "section": "check python version in renv",
    "text": "check python version in renv\n\nfrom sys import version as python_formatted_version\nprint(python_formatted_version)"
  },
  {
    "objectID": "posts/versioncontrol/index.html#list-all-installed-pacakge-in-python",
    "href": "posts/versioncontrol/index.html#list-all-installed-pacakge-in-python",
    "title": "Version control with renv",
    "section": "list all installed pacakge in python",
    "text": "list all installed pacakge in python\n\nimport os\nprint(os.system('pip freeze'))"
  },
  {
    "objectID": "posts/versioncontrol/index.html#install-package",
    "href": "posts/versioncontrol/index.html#install-package",
    "title": "Version control with renv",
    "section": "install package",
    "text": "install package\n\nimport os\nos.system('python3.10 -m pip install siuba')"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-lock-file-1",
    "href": "posts/versioncontrol/index.html#update-lock-file-1",
    "title": "Version control with renv",
    "section": "update lock file",
    "text": "update lock file\n\nrenv::snapshot()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#uninstall-package",
    "href": "posts/versioncontrol/index.html#uninstall-package",
    "title": "Version control with renv",
    "section": "uninstall package",
    "text": "uninstall package\n\nimport os\nos.system('yes | python3.10 -m pip uninstall siuba')"
  },
  {
    "objectID": "posts/versioncontrol/index.html#make-all-current-pakcage-version-back-to-renv-list-1",
    "href": "posts/versioncontrol/index.html#make-all-current-pakcage-version-back-to-renv-list-1",
    "title": "Version control with renv",
    "section": "make all current pakcage version back to renv list",
    "text": "make all current pakcage version back to renv list\n\nrenv::restore()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#install-package-1",
    "href": "posts/versioncontrol/index.html#install-package-1",
    "title": "Version control with renv",
    "section": "install package",
    "text": "install package\n\nimport os\nos.system('python3.10 -m pip install requests')"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-lock-file-2",
    "href": "posts/versioncontrol/index.html#update-lock-file-2",
    "title": "Version control with renv",
    "section": "update lock file",
    "text": "update lock file\n\nrenv::snapshot()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#need-to-install-new-package-with-renvinstall",
    "href": "posts/versioncontrol/index.html#need-to-install-new-package-with-renvinstall",
    "title": "Version control with renv",
    "section": "need to install new package with renv::install",
    "text": "need to install new package with renv::install\n\nrenv::install('lubridate')\n\n\nlibrary(lubridate)"
  },
  {
    "objectID": "posts/web_scraping_in_R_with_rvest/index.html",
    "href": "posts/web_scraping_in_R_with_rvest/index.html",
    "title": "Web scraping in R with rvest",
    "section": "",
    "text": "Basic Web scraping in R with rvest.\nAlso update to R handbook"
  },
  {
    "objectID": "posts/web_scraping_in_R_with_rvest/index.html#get-3rd-table",
    "href": "posts/web_scraping_in_R_with_rvest/index.html#get-3rd-table",
    "title": "Web scraping in R with rvest",
    "section": "get 3rd table",
    "text": "get 3rd table\nfind table xpath\n\n\nCode\ntable=page %&gt;%html_element(xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[3]') |&gt; html_table()\ntable |&gt; head()\n\n\n# A tibble: 6 × 11\n  `Driver name`     Nationality    `Seasons competed` `Drivers' Championships`\n  &lt;chr&gt;             &lt;chr&gt;          &lt;chr&gt;              &lt;chr&gt;                   \n1 Carlo Abate       Italy          1962–1963          0                       \n2 George Abecassis  United Kingdom 1951–1952          0                       \n3 Kenny Acheson     United Kingdom 1983, 1985         0                       \n4 Andrea de Adamich Italy          1968, 1970–1973    0                       \n5 Philippe Adams    Belgium        1994               0                       \n6 Walt Ader         United States  1950               0                       \n# ℹ 7 more variables: `Race entries` &lt;chr&gt;, `Race starts` &lt;chr&gt;,\n#   `Pole positions` &lt;chr&gt;, `Race wins` &lt;chr&gt;, Podiums &lt;chr&gt;,\n#   `Fastest laps` &lt;chr&gt;, `Points[a]` &lt;chr&gt;"
  },
  {
    "objectID": "posts/web_scraping_in_R_with_rvest/index.html#get-4th-table",
    "href": "posts/web_scraping_in_R_with_rvest/index.html#get-4th-table",
    "title": "Web scraping in R with rvest",
    "section": "get 4th table",
    "text": "get 4th table\nfind table xpath\n\n\nCode\ntable=page %&gt;%html_element(xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[4]') |&gt; html_table()\ntable |&gt; head()\n\n\n# A tibble: 6 × 7\n  Country     Totaldrivers Champions Championships `Race wins` `First driver(s)`\n  &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;            \n1 Argentinad… 26           1(Fangio… 5(1951, 1954… \"38\\n(Fang… Juan Manuel Fang…\n2 Australiad… 18           2(Brabha… 4(1959, 1960… \"45\\n(Brab… Tony Gaze(1952 B…\n3 Austriadet… 16           2(Rindt,… 4(1970, 1975… \"41\\n(Rind… Jochen Rindt(196…\n4 Belgiumdet… 24           0         0             \"11\\n(Ickx… Johnny Claes(195…\n5 Brazildeta… 33           3(Fittip… 8(1972, 1974… \"101\\n(Fit… Chico Landi(1951…\n6 Canadadeta… 15           1(J. Vil… 1(1997)       \"17\\n(G. V… Peter Ryan(1961 …\n# ℹ 1 more variable: `Most recent driver(s)/Current driver(s)` &lt;chr&gt;"
  },
  {
    "objectID": "posts/Classification Metrics/index.html",
    "href": "posts/Classification Metrics/index.html",
    "title": "Classification Metrics",
    "section": "",
    "text": "Classification Metrics Explained | Sensitivity, Precision, AUROC, & More\n\ninstall pacakge\n\npip install -U scikit-learn\npip install -U kaggle\npip install -U kagglehub\n\n\n\nload pacakge\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns\n\n#from kaggle.api.kaggle_api_extended import KaggleApi\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import (\n    precision_score, recall_score, roc_curve,\n    accuracy_score, f1_score, roc_auc_score,\n    average_precision_score, confusion_matrix,\n    precision_recall_curve\n)\n\n\n\ndownload data from kaggle\n\nimport kagglehub\n# Download latest version\nkagglehub.dataset_download(\"uciml/pima-indians-diabetes-database\")\npath = kagglehub.dataset_download(\"uciml/pima-indians-diabetes-database\")\nprint(\"Path to dataset files:\", path)\n\nPath to dataset files: /Users/jinchaoduan/.cache/kagglehub/datasets/uciml/pima-indians-diabetes-database/versions/1\n\n\nshow data file under download folder\n\nimport os\nos.listdir(path)\n\n['diabetes.csv']\n\n\n\n\nread data\n\ndf = pd.read_csv(path+'/'+os.listdir(path)[0])\ndf.head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n\n\n\n\n\n\ndf.Outcome.value_counts()\n\nOutcome\n0    500\n1    268\nName: count, dtype: int64\n\n\n\n# separate features from response\nX = df.drop('Outcome', axis=1)\ny = df['Outcome']\n\n\n# split data into test and training sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n# initialize and train logistic regression model\nmodel = LogisticRegression(max_iter=1000)\nmodel.fit(X_train, y_train)\n\nLogisticRegression(max_iter=1000)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegression?Documentation for LogisticRegressioniFittedLogisticRegression(max_iter=1000) \n\n\n\n# predict on the test set and get the probas\ny_pred = model.predict(X_test)\ny_pred_proba = model.predict_proba(X_test)[:, 1] \n\n\n# quickly look at the distribution of the probas\npercentiles = np.percentile(y_pred_proba, [5, 25, 50, 75, 95])\npercentiles\n\narray([0.03455652, 0.11989883, 0.29954411, 0.64776581, 0.87083353])\n\n\n\n\nconfusion matrix\n\n# generate confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.xticks([0.5, 1.5], ['No Diabetes', 'Diabetes'])\nplt.yticks([0.5, 1.5], ['No Diabetes', 'Diabetes'], va='center')\nplt.show()\n\n\n\n\n\n\n\n\n\n# recall / sensitivity\nrecall = recall_score(y_test, y_pred)\nrecall\n\n0.6727272727272727\n\n\n\n# precision / positive predictive value\nprecision = precision_score(y_test, y_pred)\nprecision\n\n0.6379310344827587\n\n\n\n# specificity\ntn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\nspecificity = tn / (tn + fp)\nspecificity\n\nnp.float64(0.7878787878787878)\n\n\n\n# accuracy\naccuracy = accuracy_score(y_test, y_pred)\naccuracy\n\n0.7467532467532467\n\n\n\n# f1\nf1 = f1_score(y_test, y_pred)\nf1\n\n0.6548672566371682\n\n\n\n# get ROC curve values\nfpr, tpr, thresholds_roc = roc_curve(y_test, y_pred_proba)\n\n# get PR curve values\nprecision, recall, thresholds_pr = precision_recall_curve(y_test, y_pred_proba)\n\n# get areas under the curves\nauroc = roc_auc_score(y_test, y_pred_proba)\npr_auc = average_precision_score(y_test, y_pred_proba)\n\n\n# plot both curves\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\nax1.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {auroc:.2f}')\nax1.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nax1.set_xlabel('False Positive Rate')\nax1.set_ylabel('True Positive Rate')\nax1.set_title('Receiver Operating Characteristic (ROC) Curve')\nax1.legend(loc=\"lower right\")\n\n# Plot Precision-Recall Curve\nax2.plot(recall, precision, color='purple', lw=2, label=f'PR-AUC = {pr_auc:.2f}')\nax2.set_xlabel('Recall')\nax2.set_ylabel('Precision')\nax2.set_title('Precision-Recall Curve')\nax2.legend(loc=\"lower left\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\ny_test.value_counts()\n\nOutcome\n0    99\n1    55\nName: count, dtype: int64\n\n\n\n\nReference\nhttps://www.youtube.com/watch?v=KdUrfY1yM0w\nhttps://github.com/RichardOnData/YouTube/blob/main/Python%20Notebooks/classification_metrics.ipynb"
  },
  {
    "objectID": "posts/usefullresource/index.html",
    "href": "posts/usefullresource/index.html",
    "title": "Useful resource",
    "section": "",
    "text": "Some useful resource\n\nYoutube\n\nRProgramming101\n\nPositPBC\n\nJuliaSilge\n\n\n\nthecoatlessprofessor\n\n\n\nEquitableEquations"
  },
  {
    "objectID": "posts/CPUGPU/index.html",
    "href": "posts/CPUGPU/index.html",
    "title": "CPU and GPU",
    "section": "",
    "text": "CPU & GPU Performance\n\nlocal computer CPU and GPU info\n\nCPUGPU OpenCL PerformanceGPU Metal Performance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorld computer CPU and GPU info\n\nCPUGPU OpenCL Performance!GPU Metal Performance\n\n\nhttps://browser.geekbench.com/v6/cpu/multicore\n\n\n\nhttps://browser.geekbench.com/opencl-benchmarks\n\n\n\nhttps://browser.geekbench.com/metal-benchmarks\n\n\n\n\n\n\nReference\nhttps://www.geekbench.com/\nhttps://github.com/ProjectPhysX/OpenCL-Benchmark"
  },
  {
    "objectID": "posts/run_ai_local/index.html",
    "href": "posts/run_ai_local/index.html",
    "title": "本地运行AI模型",
    "section": "",
    "text": "Running LLM model on local machine with Ollama,huggingface and more"
  },
  {
    "objectID": "posts/versioncontrolpython/index.html",
    "href": "posts/versioncontrolpython/index.html",
    "title": "Version control for Python with uv",
    "section": "",
    "text": "🚀 A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.\n⚡️ 10-100x faster than pip.\n🗂️ Provides comprehensive project management, with a universal lockfile."
  },
  {
    "objectID": "posts/versioncontrolpython/index.html#there-is-no-rich-package-in-python",
    "href": "posts/versioncontrolpython/index.html#there-is-no-rich-package-in-python",
    "title": "Version control for Python with uv",
    "section": "there is no rich package in python",
    "text": "there is no rich package in python\n\n\nCode\ntry:\n    import rich\n    print('pacakge installed')\nexcept ImportError as e:\n    print('pacakge not installed')\n    pass  # module doesn't exist, deal with it."
  },
  {
    "objectID": "posts/versioncontrolpython/index.html#but-can-add-rich-in-script",
    "href": "posts/versioncontrolpython/index.html#but-can-add-rich-in-script",
    "title": "Version control for Python",
    "section": "but can add rich in script",
    "text": "but can add rich in script\n\n# /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = [\n#   \"requests&lt;3\",\n#   \"rich\",\n# ]\n# ///\n\nimport requests\nfrom rich.pretty import pprint\n\nresp = requests.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n\nimport rich\nfrom importlib.metadata import version\nversion('rich')"
  },
  {
    "objectID": "posts/versioncontrolpython/index.html#run-.py-with-uv",
    "href": "posts/versioncontrolpython/index.html#run-.py-with-uv",
    "title": "Version control for Python with uv",
    "section": "run .py with uv",
    "text": "run .py with uv\n\n\nCode\n!uv run test.py\n\n\ntest.py is running\nversion is :\n13.9.4"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitle\n\n\n\nAuthor\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\n密码管理\n\n\nTony D\n\n\n\n\n\n\nMar 25, 2025\n\n\n正则表达式代码\n\n\nTony D\n\n\n\n\n\n\nMar 25, 2025\n\n\n使用git代码版本管理\n\n\nTony Duan\n\n\n\n\n\n\nMar 24, 2025\n\n\nDocker使用介绍\n\n\nTony D\n\n\n\n\n\n\nMar 24, 2025\n\n\nLinux系统操作代码\n\n\nTony D\n\n\n\n\n\n\nMar 18, 2025\n\n\nRun AI model online\n\n\nTony D\n\n\n\n\n\n\nMar 18, 2025\n\n\n本地运行AI模型\n\n\nTony D\n\n\n\n\n\n\nMar 18, 2025\n\n\n（LLM）大语言模型\n\n\nTony Duan\n\n\n\n\n\n\nMar 16, 2025\n\n\nMake QR code\n\n\nTony D\n\n\n\n\n\n\nMar 15, 2025\n\n\nR code optimization with lintr and styler\n\n\nTony D\n\n\n\n\n\n\nMar 15, 2025\n\n\nAI Code assistant\n\n\nTony D\n\n\n\n\n\n\nMar 15, 2025\n\n\n使用R httr2 调用API\n\n\nTony Duan\n\n\n\n\n\n\nMar 15, 2025\n\n\n使用R pin数据传输\n\n\nTony Duan\n\n\n\n\n\n\nMar 14, 2025\n\n\nPython code optimization with ruff\n\n\nTony D\n\n\n\n\n\n\nMar 14, 2025\n\n\nVersion control for Python with uv\n\n\nTony D\n\n\n\n\n\n\nMar 14, 2025\n\n\nR pacakge download and managment tool\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\nCPU and GPU\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\nClassification Metrics\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\n使用iphone或ipad下载youtube\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\nWeb scraping in R with rvest\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\nWeb scraping in Python\n\n\nTony D\n\n\n\n\n\n\nMar 11, 2025\n\n\nSubscribe to a YouTube channel via email\n\n\nTony D\n\n\n\n\n\n\nMar 11, 2025\n\n\nVersion control with renv\n\n\nTony D\n\n\n\n\n\n\nMar 11, 2025\n\n\nYoutube下载工具：yt-dlp\n\n\nTony Duan\n\n\n\n\n\n\nMar 1, 2025\n\n\nUseful resource\n\n\nTony D\n\n\n\n\n\n\nMar 11, 2000\n\n\nPost With Code\n\n\nHarlow Malloc\n\n\n\n\n\n\nMar 8, 2000\n\n\nWelcome To My Blog\n\n\nTony D\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/versioncontrolpython/index.html#but-can-add-rich-package-in-script",
    "href": "posts/versioncontrolpython/index.html#but-can-add-rich-package-in-script",
    "title": "Version control for Python with uv",
    "section": "but can add rich package in script",
    "text": "but can add rich package in script\n#| eval: false\n\n# /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = [\n#   \"requests&lt;3\",\n#   \"rich\",\n# ]\n# ///\n\nimport requests\nimport rich\nfrom rich.pretty import pprint\n\n\nimport rich\nfrom importlib.metadata import version\n\nprint('test.py is running')\nprint('version is :')\nprint(version('rich'))"
  },
  {
    "objectID": "posts/python_code_optimization/index.html",
    "href": "posts/python_code_optimization/index.html",
    "title": "Python code optimization with ruff",
    "section": "",
    "text": "⚡️ 10-100x faster than existing linters (like Flake8) and formatters (like Black)\n🐍 Installable via pip\n🛠️ pyproject.toml support"
  },
  {
    "objectID": "posts/python_code_optimization/index.html#convert-.qmd-to-.py",
    "href": "posts/python_code_optimization/index.html#convert-.qmd-to-.py",
    "title": "Python code optimization with ruff",
    "section": "convert .qmd to .py",
    "text": "convert .qmd to .py\n\n\n\nCode\n\nTerminal\n\nquarto convert index.qmd    # → index.ipynb\n\n\n\n\n\n\nCode\n\nTerminal\n\n!jupyter nbconvert --to python index.ipynb    # → index.py"
  },
  {
    "objectID": "posts/python_code_optimization/index.html#check-.py-with-ruff",
    "href": "posts/python_code_optimization/index.html#check-.py-with-ruff",
    "title": "Python code optimization with ruff",
    "section": "check .py with ruff",
    "text": "check .py with ruff\n\n\n\nCode\n\nTerminal\n\n!ruff check index.py"
  },
  {
    "objectID": "posts/copilot/index.html",
    "href": "posts/copilot/index.html",
    "title": "AI Code assistant",
    "section": "",
    "text": "AI tool for writing code"
  },
  {
    "objectID": "posts/copilot/index.html#configure-on-github",
    "href": "posts/copilot/index.html#configure-on-github",
    "title": "AI Code assistant",
    "section": "",
    "text": "free account is limit per month"
  },
  {
    "objectID": "posts/copilot/index.html#step-2-configure-on-github",
    "href": "posts/copilot/index.html#step-2-configure-on-github",
    "title": "AI Code assistant",
    "section": "Step 2 configure on github",
    "text": "Step 2 configure on github\nfree account is limit per month"
  },
  {
    "objectID": "posts/copilot/index.html#install-package",
    "href": "posts/copilot/index.html#install-package",
    "title": "AI Code assistant",
    "section": "Install package",
    "text": "Install package\n\nremotes::install_github(\"mlverse/chattr\")\n\n\nlibrary(chattr)"
  },
  {
    "objectID": "posts/copilot/index.html#run-chatgpt",
    "href": "posts/copilot/index.html#run-chatgpt",
    "title": "AI Code assistant",
    "section": "run ChatGPT",
    "text": "run ChatGPT\n\n# run \nchattr::chattr_app(as_job = TRUE)"
  },
  {
    "objectID": "posts/copilot/index.html#step-1-enble-on-rstudio",
    "href": "posts/copilot/index.html#step-1-enble-on-rstudio",
    "title": "AI Code assistant",
    "section": "Step 1 enble on Rstudio",
    "text": "Step 1 enble on Rstudio"
  },
  {
    "objectID": "posts/copilot/index.html#step-1-install-package",
    "href": "posts/copilot/index.html#step-1-install-package",
    "title": "AI Code assistant",
    "section": "Step 1 Install package",
    "text": "Step 1 Install package\n\n\nCode\n#remotes::install_github(\"mlverse/chattr\")\n\n\n\n\nCode\nlibrary(chattr)"
  },
  {
    "objectID": "posts/copilot/index.html#step-4-run-chatgpt-as-background-job",
    "href": "posts/copilot/index.html#step-4-run-chatgpt-as-background-job",
    "title": "AI Code assistant",
    "section": "Step 4 run ChatGPT as background job",
    "text": "Step 4 run ChatGPT as background job\n\n\nCode\n# run \nchattr::chattr_app(as_job = TRUE)"
  },
  {
    "objectID": "posts/copilot/index.html#step-3-run-chatgpt-as-background-job",
    "href": "posts/copilot/index.html#step-3-run-chatgpt-as-background-job",
    "title": "AI Code assistant",
    "section": "Step 3 run ChatGPT as background job",
    "text": "Step 3 run ChatGPT as background job\n\nselect model\n\n\nCode\n#copilot do not need OpenAI_API_KEY\nchattr_use(\"copilot\")\n\n\n\n\nadd prompt\n\n\nCode\nchattr_defaults(prompt = \"{readLines(system.file('prompt/base.txt', package = 'chattr'))}\")\n\n\n\n\nrun ChatGPT\n\n\nCode\n# run \nchattr_app(as_job = TRUE)\n\n\n\nDone!"
  },
  {
    "objectID": "posts/copilot/index.html#or-setup-auto-open-chat-gpt",
    "href": "posts/copilot/index.html#or-setup-auto-open-chat-gpt",
    "title": "AI Code assistant",
    "section": "Or setup auto open Chat GPT",
    "text": "Or setup auto open Chat GPT\n\nStep 1 find Rprofile file\n\n\nCode\ninstall.packages(\"usethis\")  # Install if not already installed\nusethis::edit_r_profile()\n\n\n\n\nStep 2 edit Rprofile file as below\n\n\n\nCode\n\n.RProfile\n\n#|eval: false\n# Load chattr app after RStudio is fully loaded\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession) {\n    Sys.sleep(2)  # Wait 2 seconds before starting chattr to ensure RStudio is ready\n    tryCatch({\n      library(chattr)\n      chattr_use(\"gpt-4\")\n      Sys.setenv(\"OPENAI_API_KEY\" = \"your-api-key-here\")\n      chattr_app(as_job = TRUE)\n    }, error = function(e)\n      message(\"Error starting chattr: \", e$message))\n  }\n}, action = \"append\")"
  },
  {
    "objectID": "posts/copilot/index.html#or-setup-auto-open-chat-gpt-when-rstudio-start",
    "href": "posts/copilot/index.html#or-setup-auto-open-chat-gpt-when-rstudio-start",
    "title": "AI Code assistant",
    "section": "Or setup auto open Chat GPT when Rstudio start",
    "text": "Or setup auto open Chat GPT when Rstudio start\n\nStep 1 find Rprofile file\n\n\nCode\n#install.packages(\"usethis\")  # Install if not already installed\nusethis::edit_r_profile()\n\n\n\n\nStep 2 edit Rprofile file as below\n\n\n\nCode\n\n.RProfile\n\n#|eval: false\n# Load chattr app after RStudio is fully loaded\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession) {\n    Sys.sleep(2)  # Wait 2 seconds before starting chattr to ensure RStudio is ready\n    tryCatch({\n      library(chattr)\n      chattr_use(\"copilot\")\n      #Sys.setenv(\"OPENAI_API_KEY\" = \"your-api-key-here\")\n      chattr_defaults(prompt = \"{readLines(system.file('prompt/base.txt', package = 'chattr'))}\")\n\n      chattr_app(as_job = TRUE)\n    }, error = function(e)\n      message(\"Error starting chattr: \", e$message))\n  }\n}, action = \"append\")"
  },
  {
    "objectID": "posts/Rpackage/index.html",
    "href": "posts/Rpackage/index.html",
    "title": "R pacakge download and managment tool",
    "section": "",
    "text": "pak installs R packages from CRAN, Bioconductor, GitHub, URLs, git repositories, local files and directories. It is an alternative to install.packages() and devtools::install_github(). pak is fast, safe and convenient."
  },
  {
    "objectID": "posts/Rpackage/index.html#install-pak",
    "href": "posts/Rpackage/index.html#install-pak",
    "title": "R pacakge download and managment tool",
    "section": "install pak",
    "text": "install pak\n\n\nCode\ninstall.packages(\"pak\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#load-pak",
    "href": "posts/Rpackage/index.html#load-pak",
    "title": "R pacakge download and managment tool",
    "section": "load pak",
    "text": "load pak\n\n\nCode\nlibrary(pak)"
  },
  {
    "objectID": "posts/Rpackage/index.html#check-pak-version",
    "href": "posts/Rpackage/index.html#check-pak-version",
    "title": "R pacakge download and managment tool",
    "section": "check pak version",
    "text": "check pak version\n\n\nCode\npak_sitrep()"
  },
  {
    "objectID": "posts/Rpackage/index.html#install-pacakge-from-cran",
    "href": "posts/Rpackage/index.html#install-pacakge-from-cran",
    "title": "R pacakge download and managment tool",
    "section": "install pacakge from cran",
    "text": "install pacakge from cran\n\n\nCode\npkg_install(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#install-pacakge-file-tar.gz-from-website",
    "href": "posts/Rpackage/index.html#install-pacakge-file-tar.gz-from-website",
    "title": "R pacakge download and managment tool",
    "section": "install pacakge file tar.gz from website",
    "text": "install pacakge file tar.gz from website\n\n\nCode\npkg_install(\n  \"url::https://cran.r-project.org/src/contrib/Archive/tibble/tibble_3.1.7.tar.gz\"\n)"
  },
  {
    "objectID": "posts/Rpackage/index.html#uninstall-package",
    "href": "posts/Rpackage/index.html#uninstall-package",
    "title": "R pacakge download and managment tool",
    "section": "uninstall package",
    "text": "uninstall package\n\n\nCode\npkg_remove(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#check-package",
    "href": "posts/Rpackage/index.html#check-package",
    "title": "R pacakge download and managment tool",
    "section": "check package",
    "text": "check package\n\n\nCode\npkg_deps_tree(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#show-all-dependencies",
    "href": "posts/Rpackage/index.html#show-all-dependencies",
    "title": "R pacakge download and managment tool",
    "section": "show all Dependencies",
    "text": "show all Dependencies\n\n\nCode\npkg_deps(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#explain-dependencies",
    "href": "posts/Rpackage/index.html#explain-dependencies",
    "title": "R pacakge download and managment tool",
    "section": "Explain dependencies",
    "text": "Explain dependencies\n\n\nCode\npkg_deps_explain(\"tibble\", \"rlang\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#update-package",
    "href": "posts/Rpackage/index.html#update-package",
    "title": "R pacakge download and managment tool",
    "section": "update package",
    "text": "update package\n\n\nCode\npkg_install(\"tibble\")\n\n\nUpdate all dependencies of a package\n\n\nCode\npkg_install(\"tibble\", upgrade = TRUE)"
  },
  {
    "objectID": "posts/r_code_optimization/index.html",
    "href": "posts/r_code_optimization/index.html",
    "title": "R code optimization with lintr and styler",
    "section": "",
    "text": "pacakge for R code optimization"
  },
  {
    "objectID": "posts/r_code_optimization/index.html#before",
    "href": "posts/r_code_optimization/index.html#before",
    "title": "R code optimization with lintr and styler",
    "section": "Before",
    "text": "Before\n\n\nCode\nlibrary(\"dplyr\")\n\n   Good &lt;- 1\napplePie &lt;- Good + 1\n    Peter &lt;- d + 1"
  },
  {
    "objectID": "posts/r_code_optimization/index.html#auto-formating",
    "href": "posts/r_code_optimization/index.html#auto-formating",
    "title": "R code optimization with lintr and styler",
    "section": "Auto formating",
    "text": "Auto formating\n\n\n\nCode\n\ntest.R\n\nstyle_file(\"test.R\")\n\n\n\nStyling  1  files:\n test.R ✔ \n────────────────────────────────────────\nStatus  Count   Legend \n✔   1   File unchanged.\nℹ   0   File changed.\n✖   0   Styling threw an error.\n────────────────────────────────────────\n\n\nAfter\n\n\nCode\nlibrary(\"dplyr\")\n\nGood &lt;- 1\napplePie &lt;- Good + 1\nPeter &lt;- d + 1"
  },
  {
    "objectID": "posts/Rpackage/index.html#check-pacakge-history-on-cran",
    "href": "posts/Rpackage/index.html#check-pacakge-history-on-cran",
    "title": "R pacakge download and managment tool",
    "section": "check pacakge history on cran",
    "text": "check pacakge history on cran\n\n\nCode\npkg_history(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#total-pacakge-download-from-last-week",
    "href": "posts/Rpackage/index.html#total-pacakge-download-from-last-week",
    "title": "R pacakge download and managment tool",
    "section": "total pacakge download from last week",
    "text": "total pacakge download from last week\n\n\nCode\nlibrary(cranlogs)\ncran_downloads(when = \"last-week\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#total-pacakge-download-from-2014",
    "href": "posts/Rpackage/index.html#total-pacakge-download-from-2014",
    "title": "R pacakge download and managment tool",
    "section": "total pacakge download from 2014",
    "text": "total pacakge download from 2014\n\n\nCode\ndata=cran_downloads(from = \"2014-01-01\", to = \"2024-12-31\")\nlibrary(plotly)\nplot_ly(data, x = ~date, y = ~count, mode = \"lines\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#top-pacakge-download-from-last-week",
    "href": "posts/Rpackage/index.html#top-pacakge-download-from-last-week",
    "title": "R pacakge download and managment tool",
    "section": "top pacakge download from last week",
    "text": "top pacakge download from last week\n\n\nCode\ncran_top_downloads(\"last-week\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#one-pacakge-download-from-last-week",
    "href": "posts/Rpackage/index.html#one-pacakge-download-from-last-week",
    "title": "R pacakge download and managment tool",
    "section": "one pacakge download from last week",
    "text": "one pacakge download from last week\n\n\nCode\npacakge_name=\"tibble\"\nlastweek=cran_downloads(when = \"last-week\", package = pacakge_name)\nlastweek\n\n\n\n\nCode\nprint(paste(pacakge_name,\"last week been downloaded\",sum(lastweek$count),\"times\"))"
  },
  {
    "objectID": "posts/makeQRcode/index.html",
    "href": "posts/makeQRcode/index.html",
    "title": "Make QR code",
    "section": "",
    "text": "Making QR code with R and Python\n\nR\n\n\nCode\npak::pkg_install('qrcode')\n\n\nℹ Loading metadata database\n\n\n✔ Loading metadata database ... done\n\n\n\n\n\n \n\n\nℹ No downloads are needed\n\n\n✔ 1 pkg + 1 dep: kept 2 [3.5s]\n\n\n\n\nCode\nlibrary(qrcode)\ncode=qr_code(\"https://rfor.us/posit2024slides\") \n\n\nSave the QR code as a SVG file\n\n\nCode\ngenerate_svg(code, filename = \"qr.svg\")\n\n\n\n\nCode\nplot(code)\n\n\n\n\n\n\n\n\n\n\n\nPython\n\n\nCode\n!pip install qrcode scikit-image\n\n\n\n\nCode\nimport qrcode\nimg = qrcode.make(\"https://rfor.us/posit2024slides\")\ntype(img)  # qrcode.image.pil.PilImage\n\n\n&lt;class 'qrcode.image.pil.PilImage'&gt;\n\n\nsave the QR code as a PNG file\n\n\nCode\nimg.save(\"some_file.png\")\n\n\n\n\nCode\nfrom skimage import io\nimg = io.imread(\"some_file.png\")\nio.imshow(img)"
  },
  {
    "objectID": "posts/run_ai_online/index.html",
    "href": "posts/run_ai_online/index.html",
    "title": "Run AI model online",
    "section": "",
    "text": "run LLM model online with ellmer or chatter"
  },
  {
    "objectID": "posts/run_ai_online/index.html#ollama-on-local",
    "href": "posts/run_ai_online/index.html#ollama-on-local",
    "title": "Run AI model online",
    "section": "ollama on local",
    "text": "ollama on local\n\nset up ollama local\n\n\nCode\nlibrary(ollamar)\nollamar::pull(\"llama3.1\")\n\n\n\n\nCode\nollamar::list_models()\n\n\n\n\ndifine model\n\n\nCode\nchat=chat_ollama(\n  system_prompt = NULL,\n  turns = NULL,\n  base_url = \"http://localhost:11434\",\n  model=\"llama3.1\",\n  seed = NULL,\n  api_args = list(),\n  echo = NULL\n)\n\nchat$get_model()\n\n\n\n\nrun LLM\n\n\nCode\nchat$chat(\"Tell me three jokes about statisticians\")\n\n\n\n\nrun on console\n\n\nCode\nlive_console(chat)\n\n\n\n\n\ncheck token usage\n\n\nCode\ntoken_usage()"
  },
  {
    "objectID": "posts/run_ai_online/index.html#step-1-install-package",
    "href": "posts/run_ai_online/index.html#step-1-install-package",
    "title": "Run AI model online",
    "section": "Step 1 Install package",
    "text": "Step 1 Install package\n\n\nCode\n#remotes::install_github(\"mlverse/chattr\")\n\n\n\n\nCode\nlibrary(chattr)"
  },
  {
    "objectID": "posts/run_ai_online/index.html#step-3-run-chatgpt-as-background-job",
    "href": "posts/run_ai_online/index.html#step-3-run-chatgpt-as-background-job",
    "title": "Run AI model online",
    "section": "Step 3 run ChatGPT as background job",
    "text": "Step 3 run ChatGPT as background job\n\nselect model\n\n\nCode\n#copilot do not need OpenAI_API_KEY\nchattr_use(\"copilot\")\n\n\n\n\nadd prompt\n\n\nCode\nchattr_defaults(prompt = \"{readLines(system.file('prompt/base.txt', package = 'chattr'))}\")\n\n\n\n\nrun ChatGPT as background jobs\nDo not use Copilot (GitHub) model for chattr(). Github will block this behavior.\n\n\nCode\n# run \nchattr_app(as_job = TRUE)\n\n\n\nDone!"
  },
  {
    "objectID": "posts/run_ai_online/index.html#or-setup-auto-open-chat-gpt-when-rstudio-start",
    "href": "posts/run_ai_online/index.html#or-setup-auto-open-chat-gpt-when-rstudio-start",
    "title": "Run AI model online",
    "section": "Or setup auto open Chat GPT when Rstudio start",
    "text": "Or setup auto open Chat GPT when Rstudio start\n\nStep 1 find Rprofile file\n\n\nCode\n#install.packages(\"usethis\")  # Install if not already installed\nusethis::edit_r_profile()\n\n\n\n\nStep 2 edit Rprofile file as below\n\n\n\nCode\n\n.RProfile\n\n#|eval: false\n# Load chattr app after RStudio is fully loaded\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession) {\n    Sys.sleep(2)  # Wait 2 seconds before starting chattr to ensure RStudio is ready\n    tryCatch({\n      library(chattr)\n      chattr_use(\"copilot\")\n      #Sys.setenv(\"OPENAI_API_KEY\" = \"your-api-key-here\")\n      chattr_defaults(prompt = \"{readLines(system.file('prompt/base.txt', package = 'chattr'))}\")\n\n      chattr_app(as_job = TRUE)\n    }, error = function(e)\n      message(\"Error starting chattr: \", e$message))\n  }\n}, action = \"append\")"
  },
  {
    "objectID": "posts/run_ai_local/index.html#download-and-install-the-ollama-app",
    "href": "posts/run_ai_local/index.html#download-and-install-the-ollama-app",
    "title": "本地运行AI模型",
    "section": "Download and install the Ollama app",
    "text": "Download and install the Ollama app\nhttps://ollama.com/download\nand open the app on computer"
  },
  {
    "objectID": "posts/run_ai_local/index.html#run-llm-model-on-ollama",
    "href": "posts/run_ai_local/index.html#run-llm-model-on-ollama",
    "title": "本地运行AI模型",
    "section": "Run LLM model on Ollama",
    "text": "Run LLM model on Ollama\n\nRun in R with ollamar pacakgeRun in R with ellmer packageRun in terminal\n\n\n\ndownload pacakge check connection\n\n\nCode\ninstall.packages(\"ollamar\")\n\n\n\n\nCode\nlibrary(ollamar)\ntest_connection() \n\n\n\n\ndownload model\n\n\nCode\nollamar::pull(\"llama3.1\")\n\n\n\n\nlist downloaded model\n\n\nCode\nlist_models()\n\n\n\n\nshow model detail\n\n\nCode\n#ollamar::show(\"llama3.1\")\n\n\n\n\nrun model\n\n\nCode\nresp &lt;- generate(\"llama3.1\", \"tell me a 5-word story\")\nresp\n\n\n\n\nCode\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n\n\n\nCode\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")\n\n\n\n\n\n\n\n\n\ndownload model\n\n\nCode\n!ollama pull llama3.1\n\n\n\n\nrun model\n\n\nCode\n!ollama run llama3.1 \"tell me a 5-word story\"\n\n\n\n\nRun in Python\n\n\nCode\n!pip install ollama\n\n\n\n\nCode\nfrom ollama import chat\nfrom ollama import ChatResponse\n\n\n\n\nCode\nimport ollama\n\n\n\n\ndownload model\n\n\nCode\nollama.pull(\"llama3.1\")\n\n\n\n\nshow downloaded model\n\n\nCode\nollama.list()\n\n\n\n\nRun model\n\n\nCode\nollama.chat(model='llama3.1', messages=[{'role': 'user', 'content': 'who are you?'}])\n\n\n\n\ncreate a model with prompt\n\n\nCode\nollama.create(model='Mario', from_='llama3.1', system=\"You are Mario from Super Mario Bros.\")\n\n\n\n\nCode\nollama.chat(model='Mario', messages=[{'role': 'user', 'content': 'who are you?'}])\n\n\n\n\ndelete model\n\n\nCode\nstatus = ollama.delete('example')\nstatus"
  },
  {
    "objectID": "posts/run_ai_local/index.html#set-up-pythonusing-python-3.11-instead-of-3.13",
    "href": "posts/run_ai_local/index.html#set-up-pythonusing-python-3.11-instead-of-3.13",
    "title": "Run AI model on local machine",
    "section": "Set up Python:Using python 3.11 instead of 3.13",
    "text": "Set up Python:Using python 3.11 instead of 3.13\n\n\nCode\nSys.setenv(RETICULATE_PYTHON = \"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\nlibrary(reticulate)\nuse_python(\"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\n\n\n\n\nCode\nrepl_python()\n\n\n\n\nCode\nfrom platform import python_version\nprint(python_version())\n\n\n\n\nCode\nimport sys\nimport platform\nprint(f\"Python Platform: {platform.platform()}\")\nprint()\nprint(f\"Python {sys.version}\")"
  },
  {
    "objectID": "posts/run_ai_local/index.html#install-tensorflow-for-mac",
    "href": "posts/run_ai_local/index.html#install-tensorflow-for-mac",
    "title": "Run AI model on local machine",
    "section": "install tensorflow for Mac",
    "text": "install tensorflow for Mac\n\n\nCode\npip3.11 install tensorflow tensorflow-macos tensorflow-metal"
  },
  {
    "objectID": "posts/run_ai_local/index.html#install-jax-metal-for-mac",
    "href": "posts/run_ai_local/index.html#install-jax-metal-for-mac",
    "title": "Run AI model on local machine",
    "section": "install jax-metal for Mac",
    "text": "install jax-metal for Mac\n\n\nCode\npip3.11 install jax-metal ml_dtypes jax jaxlib"
  },
  {
    "objectID": "posts/run_ai_local/index.html#test-installs",
    "href": "posts/run_ai_local/index.html#test-installs",
    "title": "Run AI model on local machine",
    "section": "Test Installs",
    "text": "Test Installs\n\n\nCode\nimport torch, tensorflow as tf\n# Should be true\nprint(torch.backends.mps.is_available())\nprint(torch.backends.mps.is_built())\nprint(tf.config.list_physical_devices('GPU'))\n# Should recognize 1 GPU\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))"
  },
  {
    "objectID": "posts/run_ai_local/index.html#start-hugging-face-with-python",
    "href": "posts/run_ai_local/index.html#start-hugging-face-with-python",
    "title": "Run AI model on local machine",
    "section": "start hugging face with python",
    "text": "start hugging face with python\n\n\nCode\nimport os\nos.environ[\"PYTORCH_ENABLE_MPS_FALLBACK\"] = \"1\"\nos.environ[\"PYTORCH_MPS_HIGH_WATERMARK_RATIO\"] = \"0.0\"\nif \"GRADIO_SERVER_PORT\" not in os.environ:\n    os.environ[\"GRADIO_SERVER_PORT\"] = \"7865\"\n\n\n\n\nCode\nfrom huggingface_hub import hf_hub_download\n\n\nset hugging face key\n\n\nCode\nHUGGING_FACE_API_KEY = ''\n\n\n\n\nCode\nmodel_id = \"lmsys/fastchat-t5-3b-v1.0\"\nfilenames = [\n        \"pytorch_model.bin\", \"added_tokens.json\", \"config.json\", \"generation_config.json\", \n        \"special_tokens_map.json\", \"spiece.model\", \"tokenizer_config.json\"\n]\n\n\n\n\nCode\nfor filename in filenames:\n        print(\"start download file:\"+filename)\n        downloaded_model_path = hf_hub_download(\n                    repo_id=model_id,\n                    filename=filename,\n                    token=HUGGING_FACE_API_KEY\n        )\n        \n        print(downloaded_model_path)\n\n\n\n\nCode\n# offline\nHF_HUB_OFFLINE=1 \nfrom transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, AutoModelForSeq2SeqLM\ntokenizer = AutoTokenizer.from_pretrained(model_id, legacy=False)\n\n\n\n\nCode\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_id,local_files_only=True)\n\n\n# using apple mps(GPU)\n# mps_device = \"mps\"\n#pipeline = pipeline(\"text2text-generation\", model=model, device = mps_device,tokenizer=tokenizer, max_length=100)\n\n\n# using apple CPU\npipeline = pipeline(\"text2text-generation\", model=model, device=-1, tokenizer=tokenizer, max_length=1000)\n\n\n\n\nCode\nanswer=pipeline(\"What are competitors to Apache Kafka?\")\nanswer\n\n\n\n\nCode\nanswer=pipeline(\"\"\"My name is Mark.\nI have brothers called David and John and my best friend is Michael.\nUsing only the context above. Do you know if I have a sister?    \n\"\"\")\nanswer"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html",
    "href": "posts/run_ai_local_huggingface/index.html",
    "title": "Run AI model on local machine with hugging face",
    "section": "",
    "text": "Running LLM model on local machine with hugging face"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#set-up-pythonusing-python-3.11-instead-of-3.13",
    "href": "posts/run_ai_local_huggingface/index.html#set-up-pythonusing-python-3.11-instead-of-3.13",
    "title": "Run AI model on local machine with hugging face",
    "section": "Set up Python:Using python 3.11 instead of 3.13",
    "text": "Set up Python:Using python 3.11 instead of 3.13\n\n\nCode\nSys.setenv(RETICULATE_PYTHON = \"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\nlibrary(reticulate)\nuse_python(\"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\n\n\n\n\nCode\nrepl_python()\n\n\n\n\nCode\nfrom platform import python_version\nprint(python_version())\n\n\n\n\nCode\nimport sys\nimport platform\nprint(f\"Python Platform: {platform.platform()}\")\nprint()\nprint(f\"Python {sys.version}\")"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#install-tensorflow-for-mac",
    "href": "posts/run_ai_local_huggingface/index.html#install-tensorflow-for-mac",
    "title": "Run AI model on local machine with hugging face",
    "section": "install tensorflow for Mac",
    "text": "install tensorflow for Mac\n\n\nCode\npip3.11 install tensorflow tensorflow-macos tensorflow-metal"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#install-jax-metal-for-mac",
    "href": "posts/run_ai_local_huggingface/index.html#install-jax-metal-for-mac",
    "title": "Run AI model on local machine with hugging face",
    "section": "install jax-metal for Mac",
    "text": "install jax-metal for Mac\n\n\nCode\npip3.11 install jax-metal ml_dtypes jax jaxlib"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#test-installs",
    "href": "posts/run_ai_local_huggingface/index.html#test-installs",
    "title": "Run AI model on local machine with hugging face",
    "section": "Test Installs",
    "text": "Test Installs\n\n\nCode\nimport torch, tensorflow as tf\n# Should be true\nprint(torch.backends.mps.is_available())\nprint(torch.backends.mps.is_built())\nprint(tf.config.list_physical_devices('GPU'))\n# Should recognize 1 GPU\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#start-hugging-face-with-python",
    "href": "posts/run_ai_local_huggingface/index.html#start-hugging-face-with-python",
    "title": "Run AI model on local machine with hugging face",
    "section": "start hugging face with python",
    "text": "start hugging face with python\n\n\nCode\nimport os\nos.environ[\"PYTORCH_ENABLE_MPS_FALLBACK\"] = \"1\"\nos.environ[\"PYTORCH_MPS_HIGH_WATERMARK_RATIO\"] = \"0.0\"\nif \"GRADIO_SERVER_PORT\" not in os.environ:\n    os.environ[\"GRADIO_SERVER_PORT\"] = \"7865\"\n\n\n\n\nCode\nfrom huggingface_hub import hf_hub_download\n\n\nset hugging face key\n\n\nCode\nHUGGING_FACE_API_KEY = ''\n\n\n\n\nCode\nmodel_id = \"lmsys/fastchat-t5-3b-v1.0\"\nfilenames = [\n        \"pytorch_model.bin\", \"added_tokens.json\", \"config.json\", \"generation_config.json\", \n        \"special_tokens_map.json\", \"spiece.model\", \"tokenizer_config.json\"\n]\n\n\n\n\nCode\nfor filename in filenames:\n        print(\"start download file:\"+filename)\n        downloaded_model_path = hf_hub_download(\n                    repo_id=model_id,\n                    filename=filename,\n                    token=HUGGING_FACE_API_KEY\n        )\n        \n        print(downloaded_model_path)\n\n\n\n\nCode\n# offline\nHF_HUB_OFFLINE=1 \nfrom transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, AutoModelForSeq2SeqLM\ntokenizer = AutoTokenizer.from_pretrained(model_id, legacy=False)\n\n\n\n\nCode\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_id,local_files_only=True)\n\n\n# using apple mps(GPU)\n# mps_device = \"mps\"\n#pipeline = pipeline(\"text2text-generation\", model=model, device = mps_device,tokenizer=tokenizer, max_length=100)\n\n\n# using apple CPU\npipeline = pipeline(\"text2text-generation\", model=model, device=-1, tokenizer=tokenizer, max_length=1000)\n\n\n\n\nCode\nanswer=pipeline(\"What are competitors to Apache Kafka?\")\nanswer\n\n\n\n\nCode\nanswer=pipeline(\"\"\"My name is Mark.\nI have brothers called David and John and my best friend is Michael.\nUsing only the context above. Do you know if I have a sister?    \n\"\"\")\nanswer"
  },
  {
    "objectID": "posts/run_ai_loca_ollama/index.html",
    "href": "posts/run_ai_loca_ollama/index.html",
    "title": "Run AI model on local machine with Ollama",
    "section": "",
    "text": "Running LLM model on local machine with Ollama\n\n\nDownload and install the Ollama app\nhttps://ollama.com/download\nand open the app on computer\n\n\nRun LLM model on Ollama\n\nRun in RRun in terminalRun in Python\n\n\n\ndownload pacakge check connection\n\n\nCode\ninstall.packages(\"ollamar\")\n\n\n\n\nCode\nlibrary(ollamar)\ntest_connection() \n\n\n\n\ndownload model\n\n\nCode\nollamar::pull(\"llama3.1\")\n\n\n\n\nlist downloaded model\n\n\nCode\nlist_models()\n\n\n\n\nshow model detail\n\n\nCode\n#ollamar::show(\"llama3.1\")\n\n\n\n\nrun model\n\n\nCode\nresp &lt;- generate(\"llama3.1\", \"tell me a 5-word story\")\nresp\n\n\n\n\nCode\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n\n\n\nCode\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")\n\n\n\n\n\n\ndownload model\n\n\nCode\n!ollama pull llama3.1\n\n\n\n\nrun model\n\n\nCode\n!ollama run llama3.1 \"tell me a 5-word story\"\n\n\n\n\n\n\n\nCode\n!pip install ollama\n\n\n\n\nCode\nfrom ollama import chat\nfrom ollama import ChatResponse\n\n\n\n\nCode\nimport ollama\n\n\n\ndownload model\n\n\nCode\nollama.pull(\"llama3.1\")\n\n\n\n\nshow downloaded model\n\n\nCode\nollama.list()\n\n\n\n\nRun model\n\n\nCode\nollama.chat(model='llama3.1', messages=[{'role': 'user', 'content': 'who are you?'}])\n\n\n\n\ncreate a model with prompt\n\n\nCode\nollama.create(model='Mario', from_='llama3.1', system=\"You are Mario from Super Mario Bros.\")\n\n\n\n\nCode\nollama.chat(model='Mario', messages=[{'role': 'user', 'content': 'who are you?'}])\n\n\n\n\ndelete model\n\n\nCode\nstatus = ollama.delete('example')\nstatus\n\n\n\n\n\n\n\n\nmall pacakge\nhttps://mlverse.github.io/mall/"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html",
    "href": "posts/download yotube on iphone or ipad/index.html",
    "title": "使用iphone或ipad下载youtube",
    "section": "",
    "text": "首先需要确认你的iphone或ipad是可以连接youtube的。"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#用iphone或ipad下载-a-shell-mini-app",
    "href": "posts/download yotube on iphone or ipad/index.html#用iphone或ipad下载-a-shell-mini-app",
    "title": "使用iphone或ipad下载youtube",
    "section": "1. 用iphone或ipad下载 a-Shell mini app",
    "text": "1. 用iphone或ipad下载 a-Shell mini app\n\nhttps://apps.apple.com/us/app/a-shell-mini/id1543537943"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#打开a-shell-mini运行以下代码安装youtube-dl",
    "href": "posts/download yotube on iphone or ipad/index.html#打开a-shell-mini运行以下代码安装youtube-dl",
    "title": "使用iphone或ipad下载youtube",
    "section": "2. 打开a-shell mini运行以下代码安装youtube-dl",
    "text": "2. 打开a-shell mini运行以下代码安装youtube-dl\n\n\nCode\npip install youtube-dl\n\n\n如果想要下载高清视频再运行以下代码（可选）：\n\n\nCode\npip install gallery-dl\nmkdir bin\ncd bin\ncurl -L https://github.com/holzschu/a-Shell-commands/releases/download/0.1/ffmpeg.wasm -o ffmpeg.wasm"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#在a-shell-mini中用youtube-dl下载youtube视频",
    "href": "posts/download yotube on iphone or ipad/index.html#在a-shell-mini中用youtube-dl下载youtube视频",
    "title": "使用iphone或ipad下载youtube",
    "section": "3. 在a-shell mini中用youtube-dl下载youtube视频",
    "text": "3. 在a-shell mini中用youtube-dl下载youtube视频\n找到你想要下载的youtube视频网站地址，在a-shell mini里运行以下代码\n\n\nCode\nyoutube-dl https://www.youtube.com/watch?v=FT3ODSg1GFE"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#使用shortcut-app里的sw-dlt自动下载可选",
    "href": "posts/download yotube on iphone or ipad/index.html#使用shortcut-app里的sw-dlt自动下载可选",
    "title": "使用iphone或ipad下载youtube",
    "section": "4. 使用shortcut app里的SW-DLT自动下载(可选)",
    "text": "4. 使用shortcut app里的SW-DLT自动下载(可选)\n如果你觉得每次都要在a-shell mini里打那么长的代码。也可以使用shortcut app。\n用iphone或ipad扫描下面二维码下载SW-DLT\n\n使用方法：\n1.复制要下载的youtube视频连接\n2.打开shrotcut app点击SW-DLT就会开始自动下载了\n打开shrotcut app：\n\n点击SW-DLT："
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#reference",
    "href": "posts/download yotube on iphone or ipad/index.html#reference",
    "title": "使用iphone或ipad下载youtube",
    "section": "Reference",
    "text": "Reference\n3 Ways to Run youtube-dl on iOS :https://chrunos.com/youtube-dl-ios/\nSW-DLT:https://routinehub.co/shortcut/7284/"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html",
    "href": "posts/data_transfer_with_pin/index.html",
    "title": "使用R pin数据传输",
    "section": "",
    "text": "Package Pins for Upload and download data/model to online drive.\nCode\npak::pkg_install(\"pins\")\nCode\nlibrary(pins)\nlibrary(tidyverse)"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#use-local-location-as-a-board",
    "href": "posts/data_transfer_with_pin/index.html#use-local-location-as-a-board",
    "title": "使用R pin数据传输",
    "section": "use local location as a board",
    "text": "use local location as a board\n\n\nCode\nboard=board_folder(getwd())\n\n\n\n\nCode\nboard %&gt;% pin_list()"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#upload-to-local-board",
    "href": "posts/data_transfer_with_pin/index.html#upload-to-local-board",
    "title": "使用R pin数据传输",
    "section": "upload to local board",
    "text": "upload to local board\n\n\nCode\nboard %&gt;% pin_write(head(mtcars), \"mtcars\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#download-from-local-board",
    "href": "posts/data_transfer_with_pin/index.html#download-from-local-board",
    "title": "使用R pin数据传输",
    "section": "download from local board",
    "text": "download from local board\n\n\nCode\na=board %&gt;% pin_read(\"mtcars\")\na"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#upload-file-to-board",
    "href": "posts/data_transfer_with_pin/index.html#upload-file-to-board",
    "title": "使用R pin数据传输",
    "section": "upload file to board",
    "text": "upload file to board\n\n\nCode\nboard %&gt;% pin_upload('thumbnail.jpg','new.thumbnail.jpg')"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#list-file-in-the-board",
    "href": "posts/data_transfer_with_pin/index.html#list-file-in-the-board",
    "title": "使用R pin数据传输",
    "section": "list file in the board",
    "text": "list file in the board\n\n\nCode\nboard %&gt;% pin_list()"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#download-file-from-board",
    "href": "posts/data_transfer_with_pin/index.html#download-file-from-board",
    "title": "使用R pin数据传输",
    "section": "download file from board",
    "text": "download file from board\n\n\nCode\nboard %&gt;% pin_download('new.thumbnail.jpg')"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#one-drive-as-as-a-board",
    "href": "posts/data_transfer_with_pin/index.html#one-drive-as-as-a-board",
    "title": "使用R pin数据传输",
    "section": "one drive as as a board",
    "text": "one drive as as a board\n\n\nCode\nod &lt;- Microsoft365R::get_personal_onedrive()\nboard365 &lt;- board_ms365(od, \"myboard\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#upload-to-one-drive-board",
    "href": "posts/data_transfer_with_pin/index.html#upload-to-one-drive-board",
    "title": "使用R pin数据传输",
    "section": "upload to one drive board",
    "text": "upload to one drive board\n\n\nCode\nboard365 %&gt;% pin_write(tail(mtcars), \"mtcars\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#download-from-one-drive-board",
    "href": "posts/data_transfer_with_pin/index.html#download-from-one-drive-board",
    "title": "使用R pin数据传输",
    "section": "download from one drive board",
    "text": "download from one drive board\n\n\nCode\nboard365 %&gt;% pin_read(\"mtcars\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#list-file-in-the-board-1",
    "href": "posts/data_transfer_with_pin/index.html#list-file-in-the-board-1",
    "title": "使用R pin数据传输",
    "section": "list file in the board",
    "text": "list file in the board\n\n\nCode\nboard %&gt;% pin_list()"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#there-will-be-two-version",
    "href": "posts/data_transfer_with_pin/index.html#there-will-be-two-version",
    "title": "使用R pin数据传输",
    "section": "there will be two version",
    "text": "there will be two version\n\n\nCode\nboard %&gt;% pin_versions(\"mtcars_version\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#download-version-file-from-board",
    "href": "posts/data_transfer_with_pin/index.html#download-version-file-from-board",
    "title": "使用R pin数据传输",
    "section": "download version file from board",
    "text": "download version file from board\n\n\nCode\n# board %&gt;% pin_read(\"mtcars_version\",version = '20230704T095208Z-8df40')\nboard %&gt;% pin_read(\"mtcars_version\",version = .Last.value$version[[1]])"
  },
  {
    "objectID": "posts/api_with_httr2/index.html",
    "href": "posts/api_with_httr2/index.html",
    "title": "使用R httr2 调用API",
    "section": "",
    "text": "Package httr2 for pipeable API for working with web APIs"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#api-link",
    "href": "posts/api_with_httr2/index.html#api-link",
    "title": "使用R httr2 调用API",
    "section": "API link",
    "text": "API link\n\n\nCode\nNWS_base_url &lt;- 'https://api.weather.gov'\n\nNWS_response_link &lt;- request(NWS_base_url) |&gt; \n  req_url_path_append(\n    'points',\n    '38.8894,-77.0352'\n  ) \n\nNWS_response_link"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#create-response-and-check-connection",
    "href": "posts/api_with_httr2/index.html#create-response-and-check-connection",
    "title": "使用R httr2 调用API",
    "section": "create response and check connection",
    "text": "create response and check connection\n\n\nCode\nNWS_response=NWS_response_link|&gt; req_perform()\nNWS_response"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#get-forecast-hourly-url-from-response",
    "href": "posts/api_with_httr2/index.html#get-forecast-hourly-url-from-response",
    "title": "使用R httr2 调用API",
    "section": "get forecast hourly url from response",
    "text": "get forecast hourly url from response\n\n\nCode\nNWS_response |&gt; \n  resp_body_json() |&gt; \n  glimpse()\n\n\n\n\nCode\nforecast_url &lt;- NWS_response |&gt; \n  resp_body_json() |&gt; \n  pluck('properties', 'forecastHourly')\n\nforecast_url"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#make-forecast-hourly-response",
    "href": "posts/api_with_httr2/index.html#make-forecast-hourly-response",
    "title": "使用R httr2 调用API",
    "section": "make forecast hourly response",
    "text": "make forecast hourly response\n\n\nCode\nforecast_response &lt;- request(forecast_url) |&gt; \n  req_perform()\n\nforecast_response |&gt; \n  resp_body_json() |&gt; \n  glimpse()"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#get-forecast-hourly-data",
    "href": "posts/api_with_httr2/index.html#get-forecast-hourly-data",
    "title": "使用R httr2 调用API",
    "section": "get forecast hourly data",
    "text": "get forecast hourly data\n\n\nCode\nextracted_data &lt;- forecast_response |&gt; \n  resp_body_json() |&gt; \n  pluck('properties', 'periods') |&gt; \n  map_dfr( # iterates over each list and binds rows to a tibble\n    \\(x) {\n      tibble(\n        time = x |&gt; pluck('startTime'),\n        temp_F = x |&gt; pluck('temperature'),\n        rain_prob = x |&gt; pluck('probabilityOfPrecipitation', 'value'),\n        forecast = x |&gt; pluck('shortForecast')\n      )\n    }\n  )\n\nextracted_data"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#create-response",
    "href": "posts/api_with_httr2/index.html#create-response",
    "title": "使用R httr2 调用API",
    "section": "create response",
    "text": "create response\n\n\nCode\nlibrary(keyring)\nopenweathermap_base_url &lt;- 'https://api.openweathermap.org/data/2.5'\n\nopenweathermap_api_key=key_get(\"openweathermap_api_key\")\n\ncity='Bangkok'\n\nopenweathermap_response_link &lt;- request(openweathermap_base_url) |&gt; \n  req_url_path_append(\n    paste0('weather?q=',city,'&appid=',openweathermap_api_key,'&units=metric')\n  ) \n\nopenweathermap_response_link\n\n\n\n\nCode\nopenweathermap_response=openweathermap_response_link|&gt; req_perform()\nopenweathermap_response"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#get-data-from-response",
    "href": "posts/api_with_httr2/index.html#get-data-from-response",
    "title": "使用R httr2 调用API",
    "section": "get data from response",
    "text": "get data from response\n\n\nCode\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  glimpse()\n\n\n\n\nCode\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('main', 'temp') \n\na=openweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('weather') \n\n(a[[1]])$main\n\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('name') \n\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('coord', 'lon') \n\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('coord', 'lat') \n\n\nLondon air_pollution:\nhttp://api.openweathermap.org/data/2.5/air_pollution?lat=51.5085&lon=-0.1257&appid=625ae405e4f11b5b957af484b77fbd62"
  },
  {
    "objectID": "posts/LLM_model/index.html",
    "href": "posts/LLM_model/index.html",
    "title": "（LLM）大语言模型",
    "section": "",
    "text": "(LLM)Large language model\nCode\nlibrary(tidyverse)\nlibrary(openxlsx)\nlibrary(readxl)\nCode\ndata001=read_excel('AI model.xlsx')\nhead(data001)"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html",
    "href": "posts/youtube_yt-dlp/index.html",
    "title": "Youtube下载工具：yt-dlp",
    "section": "",
    "text": "yt-dlp is a feature-rich command-line audio/video downloader with support for thousands of sites. The project is a fork of youtube-dl based on the now inactive youtube-dlc.\nhttps://github.com/yt-dlp/yt-dlp"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#start-download-youtube",
    "href": "posts/youtube_yt-dlp/index.html#start-download-youtube",
    "title": "Youtube下载工具：yt-dlp",
    "section": "Start download youtube",
    "text": "Start download youtube\n\nCommand lineRPython\n\n\n\ndownload video\n\n\nCode\n!yt-dlp --cookies-from-browser chrome 'https://www.youtube.com/watch?v=ULRVwRmfCmM'\n\n\n\n\ndownload video to mp3 format\n\n\nCode\n!yt-dlp --cookies-from-browser chrome -x --audio-format mp3 --audio-quality 0 'https://www.youtube.com/watch?v=FkOpwodhROI'\n\n\n\n\ndownload video with timestamp\n\n\nCode\n!yt-dlp --cookies-from-browser chrome --download-sections '*00:02-03:00' 'https://www.youtube.com/watch?v=FkOpwodhROI'\n\n\n\n\ndownload video to mp4 with timestamp\n\n\nCode\n!yt-dlp -f mp4 --cookies-from-browser chrome  --download-sections '*00:02-03:00'  'https://www.youtube.com/watch?v=FkOpwodhROI'\n\n\n\n\n\n\n\n\n\n\n\n\n="
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video",
    "href": "posts/youtube_yt-dlp/index.html#download-video",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video",
    "text": "download video\n\n\nCode\n!yt-dlp --cookies-from-browser chrome 'https://www.youtube.com/watch?v=ULRVwRmfCmM'"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-to-mp3-format",
    "href": "posts/youtube_yt-dlp/index.html#download-video-to-mp3-format",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video to mp3 format",
    "text": "download video to mp3 format\n\n\nCode\n!yt-dlp --cookies-from-browser chrome -x --audio-format mp3 --audio-quality 0 'https://www.youtube.com/watch?v=FkOpwodhROI'"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-with-timestamp",
    "href": "posts/youtube_yt-dlp/index.html#download-video-with-timestamp",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video with timestamp",
    "text": "download video with timestamp\n\n\nCode\n!yt-dlp --cookies-from-browser chrome --download-sections '*00:02-03:00' 'https://www.youtube.com/watch?v=FkOpwodhROI'"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-to-mp4-with-timestamp",
    "href": "posts/youtube_yt-dlp/index.html#download-video-to-mp4-with-timestamp",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video to mp4 with timestamp",
    "text": "download video to mp4 with timestamp\n\n\nCode\n!yt-dlp -f mp4 --cookies-from-browser chrome  --download-sections '*00:02-03:00'  'https://www.youtube.com/watch?v=FkOpwodhROI'"
  },
  {
    "objectID": "posts/LLM_model/index.html#math",
    "href": "posts/LLM_model/index.html#math",
    "title": "（LLM）大语言模型",
    "section": "math",
    "text": "math\n\nAIME\nhttps://en.wikipedia.org/wiki/American_Invitational_Mathematics_Examination\n\n\nMATH-500"
  },
  {
    "objectID": "posts/LLM_model/index.html#code",
    "href": "posts/LLM_model/index.html#code",
    "title": "（LLM）大语言模型",
    "section": "Code",
    "text": "Code"
  },
  {
    "objectID": "posts/LLM_model/index.html#codeforces",
    "href": "posts/LLM_model/index.html#codeforces",
    "title": "（LLM）大语言模型",
    "section": "Codeforces",
    "text": "Codeforces"
  },
  {
    "objectID": "posts/LLM_model/index.html#livecodebench",
    "href": "posts/LLM_model/index.html#livecodebench",
    "title": "（LLM）大语言模型",
    "section": "LiveCodeBench",
    "text": "LiveCodeBench"
  },
  {
    "objectID": "posts/LLM_model/index.html#english",
    "href": "posts/LLM_model/index.html#english",
    "title": "（LLM）大语言模型",
    "section": "English",
    "text": "English\n\nMMLU\nMeasuring Massive Multitask Language Understanding (MMLU)\nhttps://en.wikipedia.org/wiki/MMLU"
  },
  {
    "objectID": "posts/LLM_model/index.html#science",
    "href": "posts/LLM_model/index.html#science",
    "title": "（LLM）大语言模型",
    "section": "Science",
    "text": "Science\n\nGPQA-Diamond\nGraduate-Level Google-Proof Q&A\nDescription: GPQA consists of 448 multiple-choice questions meticulously crafted by domain experts in biology, physics, and chemistry. These questions are intentionally designed to be high-quality and extremely difficult.\nExpert Accuracy: Even experts who hold or are pursuing PhDs in the corresponding domains achieve only 65% accuracy on these questions (or 74% when excluding clear mistakes identified in retrospect).\nGoogle-Proof: The questions are “Google-proof,” meaning that even with unrestricted access to the web, highly skilled non-expert validators only reach an accuracy of 34% despite spending over 30 minutes searching for answers.\nAI Systems Difficulty: State-of-the-art AI systems, including our strongest GPT-4 based baseline, achieve only 39% accuracy on this challenging dataset."
  },
  {
    "objectID": "posts/linux_command/index.html",
    "href": "posts/linux_command/index.html",
    "title": "Linux系统操作代码",
    "section": "",
    "text": "Top useful Linux command"
  },
  {
    "objectID": "posts/linux_command/index.html#create-txt-file",
    "href": "posts/linux_command/index.html#create-txt-file",
    "title": "Linux系统操作代码",
    "section": "create txt file",
    "text": "create txt file\nnano"
  },
  {
    "objectID": "posts/linux_command/index.html#edit-current-txt-file",
    "href": "posts/linux_command/index.html#edit-current-txt-file",
    "title": "Linux系统操作代码",
    "section": "edit current txt file",
    "text": "edit current txt file\nnano test.txt"
  },
  {
    "objectID": "posts/regular_expression/index.html",
    "href": "posts/regular_expression/index.html",
    "title": "正则表达式代码",
    "section": "",
    "text": "Top useful Linux command regular expression"
  },
  {
    "objectID": "posts/docker/index.html",
    "href": "posts/docker/index.html",
    "title": "Docker使用介绍",
    "section": "",
    "text": "Docker intro"
  },
  {
    "objectID": "posts/regular_expression/index.html#view",
    "href": "posts/regular_expression/index.html#view",
    "title": "正则表达式代码",
    "section": "view",
    "text": "view\n\n\nCode\nlibrary(stringr)\n\n\n\n\nCode\nlibrary(stringr)\npattern='cat'\nstr_view_all(\"The cat sat on the mat with another cat.\", pattern)"
  },
  {
    "objectID": "posts/regular_expression/index.html#extract-all-numbers-from-a-string",
    "href": "posts/regular_expression/index.html#extract-all-numbers-from-a-string",
    "title": "正则表达式代码",
    "section": "Extract all numbers from a string:",
    "text": "Extract all numbers from a string:\n\n\nCode\npattern=\"\\\\d+\"\nstr_view(\"I bought 3 apples, 12 bananas, and 5 oranges.\",pattern)\n\n\n\n\nCode\nstr_extract_all(\"I bought 3 apples, 12 bananas, and 5 oranges.\", pattern) |&gt; unlist()"
  },
  {
    "objectID": "posts/regular_expression/index.html#extract-string-between-two-string",
    "href": "posts/regular_expression/index.html#extract-string-between-two-string",
    "title": "正则表达式代码",
    "section": "Extract string between two string:",
    "text": "Extract string between two string:\n\n\nCode\na &lt;- \"STR1 11111 STR2 STR1 22222 STR2,\"\nres &lt;- str_extract_all(a, \"STR1\\\\s*(.*?)\\\\s*STR2\")\nres\n\na=res |&gt; unlist()\n\nprint(paste0(\"first match: \",a[1]))\n      \nprint(paste0(\"second match: \",a[2]))"
  },
  {
    "objectID": "posts/regular_expression/index.html#match-sperical",
    "href": "posts/regular_expression/index.html#match-sperical",
    "title": "正则表达式代码",
    "section": "match sperical",
    "text": "match sperical\nregular expression for getting string between ‘/’ and ’\\(' on \"The /1234cat\\) sat on the 1245ma with another 4444ee cat.”\n\n\nCode\npattern= \"/(.*?)\\\\$\"\nstr_view_all(\"The /1234cat$ sat on the 1245ma with another 4444ee cat.\", pattern)\n\n\n\n\nCode\npattern= \"/(.*?)\\\\$\"\nmatches &lt;- str_extract_all(\"The /1234cat$ sat on the 1245ma with another 4444ee cat.\",pattern)\nmatches"
  },
  {
    "objectID": "posts/docker/index.html#create-docker-file",
    "href": "posts/docker/index.html#create-docker-file",
    "title": "Docker使用介绍",
    "section": "create Docker file",
    "text": "create Docker file\n\n\n\nCode\n\ntidyverse_4.3.3.Dockerfile\n\nFROM docker.io/library/ubuntu:jammy\n\nENV R_VERSION=\"4.3.3\"\nENV R_HOME=\"/usr/local/lib/R\"\nENV TZ=\"Etc/UTC\"\n\nCOPY scripts/install_R_source.sh /rocker_scripts/install_R_source.sh\nRUN /rocker_scripts/install_R_source.sh\n\nENV CRAN=\"https://p3m.dev/cran/__linux__/jammy/2024-04-23\"\nENV LANG=en_US.UTF-8\n\nCOPY scripts/bin/ /rocker_scripts/bin/\nCOPY scripts/setup_R.sh /rocker_scripts/setup_R.sh\nRUN /rocker_scripts/setup_R.sh\n\nCOPY scripts/install_tidyverse.sh /rocker_scripts/install_tidyverse.sh\nRUN /rocker_scripts/install_tidyverse.sh\n\nENV S6_VERSION=\"v2.1.0.2\"\nENV RSTUDIO_VERSION=\"2023.12.1+402\"\nENV DEFAULT_USER=\"rstudio\"\n\nCOPY scripts/install_rstudio.sh /rocker_scripts/install_rstudio.sh\nCOPY scripts/install_s6init.sh /rocker_scripts/install_s6init.sh\nCOPY scripts/default_user.sh /rocker_scripts/default_user.sh\nCOPY scripts/init_set_env.sh /rocker_scripts/init_set_env.sh\nCOPY scripts/init_userconf.sh /rocker_scripts/init_userconf.sh\nCOPY scripts/pam-helper.sh /rocker_scripts/pam-helper.sh\nRUN /rocker_scripts/install_rstudio.sh\n\nEXPOSE 8787\nCMD [\"/init\"]\n\nCOPY scripts/install_pandoc.sh /rocker_scripts/install_pandoc.sh\nRUN /rocker_scripts/install_pandoc.sh\n\nCOPY scripts/install_quarto.sh /rocker_scripts/install_quarto.sh\nRUN /rocker_scripts/install_quarto.sh\n\nCOPY scripts /rocker_scripts"
  },
  {
    "objectID": "posts/docker/index.html#bulid-docker-image-from-dockerfile",
    "href": "posts/docker/index.html#bulid-docker-image-from-dockerfile",
    "title": "Docker使用介绍",
    "section": "bulid Docker image from dockerfile",
    "text": "bulid Docker image from dockerfile\n\n\nCode\ndocker build -f tidyverse_4.3.3.Dockerfile -t proj:myapp ."
  },
  {
    "objectID": "posts/docker/index.html#run-container-from-image",
    "href": "posts/docker/index.html#run-container-from-image",
    "title": "Docker使用介绍",
    "section": "run container from image",
    "text": "run container from image\n\n\nCode\ndocker run"
  },
  {
    "objectID": "posts/docker/index.html#stop-container",
    "href": "posts/docker/index.html#stop-container",
    "title": "Docker使用介绍",
    "section": "stop container",
    "text": "stop container\n\n\nCode\ndocker stop"
  },
  {
    "objectID": "posts/docker/index.html#restart-container",
    "href": "posts/docker/index.html#restart-container",
    "title": "Docker使用介绍",
    "section": "restart container",
    "text": "restart container\n\n\nCode\ndocker start"
  },
  {
    "objectID": "posts/docker/index.html#delete-container",
    "href": "posts/docker/index.html#delete-container",
    "title": "Docker使用介绍",
    "section": "delete container",
    "text": "delete container\n\n\nCode\ndocker rm"
  },
  {
    "objectID": "posts/docker/index.html#delete-image",
    "href": "posts/docker/index.html#delete-image",
    "title": "Docker使用介绍",
    "section": "delete image",
    "text": "delete image\n\n\nCode\ndocker rmr"
  },
  {
    "objectID": "posts/docker/index.html#run-docker-image",
    "href": "posts/docker/index.html#run-docker-image",
    "title": "Docker使用介绍",
    "section": "run Docker image",
    "text": "run Docker image\n\n\nCode\ndocker run -p 8787:8787 proj:myapp\n\n\nrun at backend\n\n\nCode\ndocker run -d proj:myapp\n\n\nRstuido server is open at: http://localhost:8787/\nuser name is rstudio\npassword is show on terminal"
  },
  {
    "objectID": "posts/docker/index.html#go-inside-docker-containers-with-containers-id",
    "href": "posts/docker/index.html#go-inside-docker-containers-with-containers-id",
    "title": "Docker使用介绍",
    "section": "go inside docker containers with containers id",
    "text": "go inside docker containers with containers id\n\n\nCode\ndocker exec -it b28a1b8eeeb6 sh\n\n\nexit docker linux\n\n\nCode\nexit"
  },
  {
    "objectID": "posts/docker/index.html#stop-container-with-container-id",
    "href": "posts/docker/index.html#stop-container-with-container-id",
    "title": "Docker使用介绍",
    "section": "stop container with container id",
    "text": "stop container with container id\n\n\nCode\ndocker stop b28a1b8eeeb6"
  },
  {
    "objectID": "posts/docker/index.html#restart-container-with-container-id",
    "href": "posts/docker/index.html#restart-container-with-container-id",
    "title": "Docker使用介绍",
    "section": "restart container with container id",
    "text": "restart container with container id\n\n\nCode\ndocker start b28a1b8eeeb6"
  },
  {
    "objectID": "posts/docker/index.html#delete-a-stop-container",
    "href": "posts/docker/index.html#delete-a-stop-container",
    "title": "Docker使用介绍",
    "section": "delete a stop container",
    "text": "delete a stop container\n\n\nCode\ndocker rm -f b28a1b8eeeb6"
  },
  {
    "objectID": "posts/docker/index.html#delete-image-with-image-id",
    "href": "posts/docker/index.html#delete-image-with-image-id",
    "title": "Docker使用介绍",
    "section": "delete image with image id",
    "text": "delete image with image id\n\n\nCode\ndocker rmi -f 7e1a4e2d11e2"
  },
  {
    "objectID": "posts/password_management/index.html",
    "href": "posts/password_management/index.html",
    "title": "密码管理",
    "section": "",
    "text": "Password management in R and Python"
  },
  {
    "objectID": "posts/password_management/index.html#open-home.renviron",
    "href": "posts/password_management/index.html#open-home.renviron",
    "title": "密码管理",
    "section": "open /home/.Renviron",
    "text": "open /home/.Renviron\n\n\nCode\nusethis::edit_r_environ()"
  },
  {
    "objectID": "posts/password_management/index.html#save-following-password-in-.renviron",
    "href": "posts/password_management/index.html#save-following-password-in-.renviron",
    "title": "密码管理",
    "section": "save following password in .Renviron",
    "text": "save following password in .Renviron\n\n\nCode\nfake_userid = \"username\"\nfake_pwd = \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#get-it-back",
    "href": "posts/password_management/index.html#get-it-back",
    "title": "密码管理",
    "section": "get it back",
    "text": "get it back\n\n\nCode\nSys.getenv(\"fake_userid\")\n\n\n[1] \"username\"\n\n\nCode\nSys.getenv(\"fake_pwd\")\n\n\n[1] \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#use-environment-variables",
    "href": "posts/password_management/index.html#use-environment-variables",
    "title": "密码管理",
    "section": "Use Environment variables",
    "text": "Use Environment variables\n\nopen /home/.Renviron\n\n\nCode\nusethis::edit_r_environ()\n\n\n\n\nsave following password in .Renviron\n\n\nCode\nfake_userid = \"username\"\nfake_pwd = \"password\"   \n\n\n\n\nget it back\n\n\nCode\nSys.getenv(\"fake_userid\")\n\n\n[1] \"username\"\n\n\nCode\nSys.getenv(\"fake_pwd\")\n\n\n[1] \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#using-keyringr-package",
    "href": "posts/password_management/index.html#using-keyringr-package",
    "title": "密码管理",
    "section": "using keyringr package",
    "text": "using keyringr package\n\n\nCode\npak::pak(\"keyring\")\n\n\n\n\nCode\nlibrary(keyring)\n\n\n\n\nCode\n# Interactively save a secret. This avoids typing the value of the secret\n# into the console as this could be recorded in your `.Rhistory`\nkey_set(\"account_fake_001\")\n\n\n\n\nCode\n# Later retrieve that secret\nkey_get(\"account_fake_001\")"
  },
  {
    "objectID": "posts/password_management/index.html#using-source",
    "href": "posts/password_management/index.html#using-source",
    "title": "密码管理",
    "section": "using source",
    "text": "using source\n\ncreate pass.r and keep it yourself\n\n\n\nCode\n\npass.r\n\npass1='123'\n\n\n\n\n\nsource the pass.r in the main code\n\n\nCode\nsource('pass.r')\npass1\n\n\n[1] \"123\""
  },
  {
    "objectID": "posts/password_management/index.html#opton-1-using-source",
    "href": "posts/password_management/index.html#opton-1-using-source",
    "title": "密码管理",
    "section": "Opton 1 using source",
    "text": "Opton 1 using source\n\ncreate pass.r and keep it yourself\n\n\n\nCode\n\npass.r\n\npass1='123'\n\n\n\n\n\nsource the pass.r in the main code\n\n\nCode\nsource('pass.r')\npass1\n\n\n[1] \"123\""
  },
  {
    "objectID": "posts/password_management/index.html#opton-2-use-environment-variables",
    "href": "posts/password_management/index.html#opton-2-use-environment-variables",
    "title": "密码管理",
    "section": "Opton 2 Use Environment variables",
    "text": "Opton 2 Use Environment variables\n\nopen /home/.Renviron\n\n\nCode\nusethis::edit_r_environ()\n\n\n\n\nsave following password in .Renviron\n\n\nCode\nfake_userid = \"username\"\nfake_pwd = \"password\"   \n\n\n\n\nget it back\n\n\nCode\nSys.getenv(\"fake_userid\")\n\n\n[1] \"username\"\n\n\nCode\nSys.getenv(\"fake_pwd\")\n\n\n[1] \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#opton-3-using-keyringr-package",
    "href": "posts/password_management/index.html#opton-3-using-keyringr-package",
    "title": "密码管理",
    "section": "Opton 3 using keyringr package",
    "text": "Opton 3 using keyringr package\n\n\nCode\npak::pak(\"keyring\")\n\n\n\n\nCode\nlibrary(keyring)\n\n\n\n\nCode\n# Interactively save a secret. This avoids typing the value of the secret\n# into the console as this could be recorded in your `.Rhistory`\nkey_set(\"account_fake_001\")\n\n\n\n\nCode\n# Later retrieve that secret\nkey_get(\"account_fake_001\")"
  },
  {
    "objectID": "posts/password_management/index.html#opton-1-using-import",
    "href": "posts/password_management/index.html#opton-1-using-import",
    "title": "密码管理",
    "section": "Opton 1 using import",
    "text": "Opton 1 using import\n\ncreate pass_file.py and keep it yourself\n\n\n\nCode\n\npass_file.py\n\npass1='123'\n\n\n\n\n\ncall pass_file.py with import\n\n\nCode\nfrom pass_file import *\n#from pass_file import acct\npass_w\n\n\n'123'\n\n\nCode\nacct_w\n\n\n'222'"
  },
  {
    "objectID": "posts/password_management/index.html#option-1-using-source",
    "href": "posts/password_management/index.html#option-1-using-source",
    "title": "密码管理",
    "section": "Option 1 using source",
    "text": "Option 1 using source\n\ncreate pass.r and keep it yourself\n\n\n\nCode\n\npass.r\n\npass1='123'\n\n\n\n\n\nsource the pass.r in the main code\n\n\nCode\nsource('pass.r')\npass1\n\n\n[1] \"123\""
  },
  {
    "objectID": "posts/password_management/index.html#option-2-use-environment-variables",
    "href": "posts/password_management/index.html#option-2-use-environment-variables",
    "title": "密码管理",
    "section": "Option 2 Use Environment variables",
    "text": "Option 2 Use Environment variables\n\nopen /home/.Renviron\n\n\nCode\nusethis::edit_r_environ()\n\n\n\n\nsave following password in .Renviron\n\n\nCode\nfake_userid = \"username\"\nfake_pwd = \"password\"   \n\n\n\n\nget it back\n\n\nCode\nSys.getenv(\"fake_userid\")\n\n\n[1] \"username\"\n\n\nCode\nSys.getenv(\"fake_pwd\")\n\n\n[1] \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#option-3-using-keyringr-package",
    "href": "posts/password_management/index.html#option-3-using-keyringr-package",
    "title": "密码管理",
    "section": "Option 3 using keyringr package",
    "text": "Option 3 using keyringr package\n\n\nCode\npak::pak(\"keyring\")\n\n\n\n\nCode\nlibrary(keyring)\n\n\n\n\nCode\n# Interactively save a secret. This avoids typing the value of the secret\n# into the console as this could be recorded in your `.Rhistory`\nkey_set(\"account_fake_001\")\n\n\n\n\nCode\n# Later retrieve that secret\nkey_get(\"account_fake_001\")"
  },
  {
    "objectID": "posts/password_management/index.html#option-1-using-import",
    "href": "posts/password_management/index.html#option-1-using-import",
    "title": "密码管理",
    "section": "Option 1 using import",
    "text": "Option 1 using import\n\ncreate pass_file.py and keep it yourself\n\n\n\nCode\n\npass_file.py\n\npass1='123'\n\n\n\n\n\ncall pass_file.py with import\n\n\nCode\nfrom pass_file import *\n#from pass_file import acct\npass_w\n\n\n'123'\n\n\nCode\nacct_w\n\n\n'222'"
  },
  {
    "objectID": "posts/git/index.html",
    "href": "posts/git/index.html",
    "title": "使用git代码版本管理",
    "section": "",
    "text": "download github desktop\nhttps://desktop.github.com/download/\n\n\nset up github account\nhttps://github.com/\n\n\nClone a repository into a new directory\ngit clone \n\n\nInitialize a new Git repository\ngit init\n\n\nAdd to the staging area\ngit add  git add .\n\n\nCommit changes to the repository\ngit commit -m “commit message”\n\n\nView the commit history\ngit log\n\n\nCheck the status of changes\ngit status\n\n\nShow the changes in the working directory\ngit diff\n\n\nCreate a new branch\ngit branch \n\n\nList all branches\ngit branch\n\n\nSwitch to a different branch\ngit checkout \n\n\nCreate and switch to a new branch\ngit checkout -b \n\n\nMerge a branch into the current branch\ngit merge \n\n\nchanges from a remote repository\ngit pull\n\n\nPush changes to a remote repository\ngit push\n\n\nDelete a branch\ngit branch -d  git push origin –delete \n\n\nStash changes\ngit stash\n\n\nApply stashed changes\ngit stash apply\n\n\nShow stashed changes\ngit stash list\n\n\nRemove a file from the staging area\ngit reset \n\n\nUndo the last commit\ngit reset –soft HEAD~1 git reset –hard HEAD~1"
  },
  {
    "objectID": "posts/run_ai_online/index.html#google-gemini",
    "href": "posts/run_ai_online/index.html#google-gemini",
    "title": "Run AI model online",
    "section": "google gemini",
    "text": "google gemini\nget text from pdf\n\n\nCode\nlibrary(tidyverse)\nread_lines('story.txt')[1:5] |&gt; \n  stringr::str_wrap(width = 50) |&gt; \n  paste(collapse = '\\n') |&gt; \n  paste('...') |&gt; \n  cat()\n\n\n\n\nCode\nlibrary(ellmer)\nchat &lt;- chat_openai(\n  system_prompt = \"\n  You are an information extractor AI.\n  The user will give you a story and you will \n  provide the following information in the response:\n  \n  Name of main character: &lt;Insert name here&gt;\n  \n  Names of supporting characters: &lt;Insert comma-\n    separated list of names here&gt;\n  \n  One-Sentence Summary: &lt;Insert summary here. \n    Use one sentence only&gt;\n  \n  Lesson learned: &lt;Summarize what the hero \n    learned in two sentences&gt;\n  \"\n)\n## Using model = \"gpt-4o\"."
  }
]