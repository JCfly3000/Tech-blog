[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tech blog",
    "section": "",
    "text": "数据星期二\n\n\nTidyTuesday\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nApr 10, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n表格展示\n\n\nDisply table\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nApr 7, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nAI生成代码\n\n\nAI Generated Code\n\n\n\nAI\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nApr 5, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用代码发邮件\n\n\nUsing code to send email\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 31, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用AI给播客语音转文字并作摘要\n\n\nUsing AI to create Summary for podcast\n\n\n\nAI\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 28, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n路径管理\n\n\nPath management\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 27, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用AI给视频自动生成中英文字幕\n\n\nUsing AI to create Chinese and English Subtitles\n\n\n\nAI\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 27, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n密码管理\n\n\nPassword management\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n正则表达式代码\n\n\nregular expression\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用git代码版本管理\n\n\nUsing git for version control\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nDocker使用介绍\n\n\nDocker intro\n\n\n\nTool\n\n\n\n\n\n\n\n\n\nMar 24, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nLinux系统操作代码\n\n\nLinux command\n\n\n\nTool\n\n\n\n\n\n\n\n\n\nMar 24, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n调用网络端AI模型\n\n\nRun AI model online\n\n\n\nAI\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 18, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n本地运行AI模型\n\n\nRun AI model on local machine\n\n\n\nAI\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 18, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n（LLM）大语言模型\n\n\n(LLM)Large language model\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 18, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nMake QR code\n\n\n\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 16, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nR code optimization with lintr and styler\n\n\n\n\n\n\nTool\n\nR\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nAI Code assistant\n\n\n\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用R httr2 调用API\n\n\nUsing R httr2 to call API\n\n\n\nTool\n\nR\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用R pin数据传输\n\n\nFor data transfer between local and cloud\n\n\n\nTool\n\nR\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nPython code optimization with ruff\n\n\n\n\n\n\nTool\n\nPython\n\n\n\n\n\n\n\n\n\nMar 14, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nVersion control for Python with uv\n\n\n\n\n\n\nTool\n\nPython\n\n\n\n\n\n\n\n\n\nMar 14, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nR pacakge download and managment tool\n\n\n\n\n\n\nTool\n\nR\n\n\n\n\n\n\n\n\n\nMar 14, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nCPU and GPU\n\n\n\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nClassification Metrics\n\n\n\n\n\n\nMachine learning\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\n使用iphone或ipad下载youtube\n\n\n\n\n\n\nTool\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nWeb scraping in R with rvest\n\n\n\n\n\n\nTool\n\nWebscrap\n\nR\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nWeb scraping in Python\n\n\n\n\n\n\nTool\n\nWebscrap\n\nPython\n\n\n\n\n\n\n\n\n\nMar 12, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nSubscribe to a YouTube channel via email\n\n\n\n\n\n\nTool\n\n\n\n\n\n\n\n\n\nMar 11, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nVersion control with renv\n\n\n\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 11, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nYoutube下载工具：yt-dlp\n\n\nYoutube download tool:yt-dlp\n\n\n\nTool\n\nR\n\nPython\n\n\n\n\n\n\n\n\n\nMar 11, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nUseful resource\n\n\n\n\n\n\nnews\n\nresource\n\n\n\n\n\n\n\n\n\nMar 1, 2025\n\n\nTony D\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMar 8, 2000\n\n\nTony D\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/subscribeYouTubeviaemail/index.html",
    "href": "posts/subscribeYouTubeviaemail/index.html",
    "title": "Subscribe to a YouTube channel via email",
    "section": "",
    "text": "If you want to Subscribe to a YouTube channel but do not want to follow them.The trick is figuring out how to subscribe to a YouTube channel via email\n\nStep 1: open youtube page of the channel want to subscribe\nfor example:https://www.youtube.com/@thecoatlessprofessor7674/videos\n\n\nStep 2: view page source\n\n\n\nStep 3: find ‘videos.xml’ in page source\nfor example: https://www.youtube.com/feeds/videos.xml?channel_id=UColncDCZ8SmTAHYr92QFclQ\n\n\nStep 4: Use an RSS-to-Email Tool to Subscribe\nusing free RSS tool https://feedrabbit.com and enter your email address to subscribe. \n\n\nStep 5: open email and activate feedrabbit from a email from feedrabbit\nWhen there is a new video you will get a email.\nyou can also view all subscribe at https://feedrabbit.com/subscriptions\n\n\nReference\nhttps://greggblanchard.com/how-to-subscribe-to-a-youtube-channel-via-email/"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/versioncontrol/index.html",
    "href": "posts/versioncontrol/index.html",
    "title": "Version control with renv",
    "section": "",
    "text": "The renv package helps you create reproducible environments for your R projects\nIt section also update into R handbook\n# renv for R"
  },
  {
    "objectID": "posts/versioncontrol/index.html#inital-renv-and-create-renv.lock-with-current-loaded-pacakge",
    "href": "posts/versioncontrol/index.html#inital-renv-and-create-renv.lock-with-current-loaded-pacakge",
    "title": "Version control with renv",
    "section": "inital renv and create renv.lock with current loaded pacakge",
    "text": "inital renv and create renv.lock with current loaded pacakge\n\nrenv::init()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#show-all-installed-pacakge",
    "href": "posts/versioncontrol/index.html#show-all-installed-pacakge",
    "title": "Version control with renv",
    "section": "show all installed pacakge",
    "text": "show all installed pacakge\n\ninstalled_pacakge = as.data.frame(installed.packages()[,c(1,3:4)])\ninstalled_pacakge = installed_pacakge[is.na(installed_pacakge$Priority),1:2,drop=FALSE]\ninstalled_pacakge"
  },
  {
    "objectID": "posts/versioncontrol/index.html#show-all-installed-pacakge-and-uploaded-pacakge",
    "href": "posts/versioncontrol/index.html#show-all-installed-pacakge-and-uploaded-pacakge",
    "title": "Version control with renv",
    "section": "show all installed pacakge and uploaded pacakge",
    "text": "show all installed pacakge and uploaded pacakge\n\nlibrary(dplyr)\ninstalled_pacakge = as.data.frame(installed.packages()[,c(1,3:4)])\ninstalled_pacakge = installed_pacakge[is.na(installed_pacakge$Priority),1:2,drop=FALSE]\ninstalled_pacakge |&gt; filter(Package %in% (.packages()))"
  },
  {
    "objectID": "posts/versioncontrol/index.html#when-using-renv-and-install-new-pakcage",
    "href": "posts/versioncontrol/index.html#when-using-renv-and-install-new-pakcage",
    "title": "Version control with renv",
    "section": "when using renv and install new pakcage",
    "text": "when using renv and install new pakcage\n\n# it will not work\n# library(lubridate)"
  },
  {
    "objectID": "posts/versioncontrol/index.html#install-new-package-with-renvinstall",
    "href": "posts/versioncontrol/index.html#install-new-package-with-renvinstall",
    "title": "Version control with renv",
    "section": "install new package with renv::install",
    "text": "install new package with renv::install\n\nrenv::install('lubridate')\n\n\nlibrary(lubridate)"
  },
  {
    "objectID": "posts/versioncontrol/index.html#check-current-package-and-renv-package",
    "href": "posts/versioncontrol/index.html#check-current-package-and-renv-package",
    "title": "Version control with renv",
    "section": "check current package and renv package",
    "text": "check current package and renv package\n\nrenv::status()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-lock-file",
    "href": "posts/versioncontrol/index.html#update-lock-file",
    "title": "Version control with renv",
    "section": "update lock file",
    "text": "update lock file\n\nrenv::snapshot()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#check-status-again",
    "href": "posts/versioncontrol/index.html#check-status-again",
    "title": "Version control with renv",
    "section": "check status again",
    "text": "check status again\n\nrenv::status()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#make-all-current-pakcage-version-back-to-renv-list",
    "href": "posts/versioncontrol/index.html#make-all-current-pakcage-version-back-to-renv-list",
    "title": "Version control with renv",
    "section": "make all current pakcage version back to renv list",
    "text": "make all current pakcage version back to renv list\n\nrenv::restore()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-all-pakcage-in-renv.-recommand-do-it-once-a-year-to-keep-package-updated.",
    "href": "posts/versioncontrol/index.html#update-all-pakcage-in-renv.-recommand-do-it-once-a-year-to-keep-package-updated.",
    "title": "Version control with renv",
    "section": "update all pakcage in renv. recommand do it once a year to keep package updated.",
    "text": "update all pakcage in renv. recommand do it once a year to keep package updated.\n\nrenv::update()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-renv-itself-only",
    "href": "posts/versioncontrol/index.html#update-renv-itself-only",
    "title": "Version control with renv",
    "section": "update renv itself only",
    "text": "update renv itself only\n\nrenv::upgrade()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#close-renv-in-a-project",
    "href": "posts/versioncontrol/index.html#close-renv-in-a-project",
    "title": "Version control with renv",
    "section": "close renv in a project",
    "text": "close renv in a project\n\nrenv::deactivate()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#re-enable-renv-in-a-project",
    "href": "posts/versioncontrol/index.html#re-enable-renv-in-a-project",
    "title": "Version control with renv",
    "section": "re enable renv in a project",
    "text": "re enable renv in a project\n\nrenv::activate()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#set-python-version",
    "href": "posts/versioncontrol/index.html#set-python-version",
    "title": "Version control with renv",
    "section": "set python version",
    "text": "set python version\n\nrenv::use_python()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#check-python-version-in-renv",
    "href": "posts/versioncontrol/index.html#check-python-version-in-renv",
    "title": "Version control with renv",
    "section": "check python version in renv",
    "text": "check python version in renv\n\nfrom sys import version as python_formatted_version\nprint(python_formatted_version)"
  },
  {
    "objectID": "posts/versioncontrol/index.html#list-all-installed-pacakge-in-python",
    "href": "posts/versioncontrol/index.html#list-all-installed-pacakge-in-python",
    "title": "Version control with renv",
    "section": "list all installed pacakge in python",
    "text": "list all installed pacakge in python\n\nimport os\nprint(os.system('pip freeze'))"
  },
  {
    "objectID": "posts/versioncontrol/index.html#install-package",
    "href": "posts/versioncontrol/index.html#install-package",
    "title": "Version control with renv",
    "section": "install package",
    "text": "install package\n\nimport os\nos.system('python3.10 -m pip install siuba')"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-lock-file-1",
    "href": "posts/versioncontrol/index.html#update-lock-file-1",
    "title": "Version control with renv",
    "section": "update lock file",
    "text": "update lock file\n\nrenv::snapshot()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#uninstall-package",
    "href": "posts/versioncontrol/index.html#uninstall-package",
    "title": "Version control with renv",
    "section": "uninstall package",
    "text": "uninstall package\n\nimport os\nos.system('yes | python3.10 -m pip uninstall siuba')"
  },
  {
    "objectID": "posts/versioncontrol/index.html#make-all-current-pakcage-version-back-to-renv-list-1",
    "href": "posts/versioncontrol/index.html#make-all-current-pakcage-version-back-to-renv-list-1",
    "title": "Version control with renv",
    "section": "make all current pakcage version back to renv list",
    "text": "make all current pakcage version back to renv list\n\nrenv::restore()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#install-package-1",
    "href": "posts/versioncontrol/index.html#install-package-1",
    "title": "Version control with renv",
    "section": "install package",
    "text": "install package\n\nimport os\nos.system('python3.10 -m pip install requests')"
  },
  {
    "objectID": "posts/versioncontrol/index.html#update-lock-file-2",
    "href": "posts/versioncontrol/index.html#update-lock-file-2",
    "title": "Version control with renv",
    "section": "update lock file",
    "text": "update lock file\n\nrenv::snapshot()"
  },
  {
    "objectID": "posts/versioncontrol/index.html#need-to-install-new-package-with-renvinstall",
    "href": "posts/versioncontrol/index.html#need-to-install-new-package-with-renvinstall",
    "title": "Version control with renv",
    "section": "need to install new package with renv::install",
    "text": "need to install new package with renv::install\n\nrenv::install('lubridate')\n\n\nlibrary(lubridate)"
  },
  {
    "objectID": "posts/web_scraping_in_R_with_rvest/index.html",
    "href": "posts/web_scraping_in_R_with_rvest/index.html",
    "title": "Web scraping in R with rvest",
    "section": "",
    "text": "Basic Web scraping in R with rvest.\nAlso update to R handbook"
  },
  {
    "objectID": "posts/web_scraping_in_R_with_rvest/index.html#get-3rd-table",
    "href": "posts/web_scraping_in_R_with_rvest/index.html#get-3rd-table",
    "title": "Web scraping in R with rvest",
    "section": "get 3rd table",
    "text": "get 3rd table\nfind table xpath\n\n\nCode\ntable=page %&gt;%html_element(xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[3]') |&gt; html_table()\ntable |&gt; head()\n\n\n# A tibble: 6 × 11\n  `Driver name`     Nationality    `Seasons competed` `Drivers' Championships`\n  &lt;chr&gt;             &lt;chr&gt;          &lt;chr&gt;              &lt;chr&gt;                   \n1 Carlo Abate       Italy          1962–1963          0                       \n2 George Abecassis  United Kingdom 1951–1952          0                       \n3 Kenny Acheson     United Kingdom 1983, 1985         0                       \n4 Andrea de Adamich Italy          1968, 1970–1973    0                       \n5 Philippe Adams    Belgium        1994               0                       \n6 Walt Ader         United States  1950               0                       \n# ℹ 7 more variables: `Race entries` &lt;chr&gt;, `Race starts` &lt;chr&gt;,\n#   `Pole positions` &lt;chr&gt;, `Race wins` &lt;chr&gt;, Podiums &lt;chr&gt;,\n#   `Fastest laps` &lt;chr&gt;, `Points[a]` &lt;chr&gt;"
  },
  {
    "objectID": "posts/web_scraping_in_R_with_rvest/index.html#get-4th-table",
    "href": "posts/web_scraping_in_R_with_rvest/index.html#get-4th-table",
    "title": "Web scraping in R with rvest",
    "section": "get 4th table",
    "text": "get 4th table\nfind table xpath\n\n\nCode\ntable=page %&gt;%html_element(xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[4]') |&gt; html_table()\ntable |&gt; head()\n\n\n# A tibble: 6 × 7\n  Country     Totaldrivers Champions Championships `Race wins` `First driver(s)`\n  &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;            \n1 Argentinad… 26           1(Fangio… 5(1951, 1954… \"38\\n(Fang… Juan Manuel Fang…\n2 Australiad… 18           2(Brabha… 4(1959, 1960… \"45\\n(Brab… Tony Gaze(1952 B…\n3 Austriadet… 16           2(Rindt,… 4(1970, 1975… \"41\\n(Rind… Jochen Rindt(196…\n4 Belgiumdet… 24           0         0             \"11\\n(Ickx… Johnny Claes(195…\n5 Brazildeta… 33           3(Fittip… 8(1972, 1974… \"101\\n(Fit… Chico Landi(1951…\n6 Canadadeta… 15           1(J. Vil… 1(1997)       \"17\\n(G. V… Peter Ryan(1961 …\n# ℹ 1 more variable: `Most recent driver(s)/Current driver(s)` &lt;chr&gt;"
  },
  {
    "objectID": "posts/Classification Metrics/index.html",
    "href": "posts/Classification Metrics/index.html",
    "title": "Classification Metrics",
    "section": "",
    "text": "Classification Metrics Explained | Sensitivity, Precision, AUROC, & More\n\ninstall pacakge\n\npip install -U scikit-learn\npip install -U kaggle\npip install -U kagglehub\n\n\n\nload pacakge\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns\n\n#from kaggle.api.kaggle_api_extended import KaggleApi\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import (\n    precision_score, recall_score, roc_curve,\n    accuracy_score, f1_score, roc_auc_score,\n    average_precision_score, confusion_matrix,\n    precision_recall_curve\n)\n\n\n\ndownload data from kaggle\n\nimport kagglehub\n# Download latest version\nkagglehub.dataset_download(\"uciml/pima-indians-diabetes-database\")\npath = kagglehub.dataset_download(\"uciml/pima-indians-diabetes-database\")\nprint(\"Path to dataset files:\", path)\n\nPath to dataset files: /Users/jinchaoduan/.cache/kagglehub/datasets/uciml/pima-indians-diabetes-database/versions/1\n\n\nshow data file under download folder\n\nimport os\nos.listdir(path)\n\n['diabetes.csv']\n\n\n\n\nread data\n\ndf = pd.read_csv(path+'/'+os.listdir(path)[0])\ndf.head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n\n\n\n\n\n\ndf.Outcome.value_counts()\n\nOutcome\n0    500\n1    268\nName: count, dtype: int64\n\n\n\n# separate features from response\nX = df.drop('Outcome', axis=1)\ny = df['Outcome']\n\n\n# split data into test and training sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n# initialize and train logistic regression model\nmodel = LogisticRegression(max_iter=1000)\nmodel.fit(X_train, y_train)\n\nLogisticRegression(max_iter=1000)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegression?Documentation for LogisticRegressioniFittedLogisticRegression(max_iter=1000) \n\n\n\n# predict on the test set and get the probas\ny_pred = model.predict(X_test)\ny_pred_proba = model.predict_proba(X_test)[:, 1] \n\n\n# quickly look at the distribution of the probas\npercentiles = np.percentile(y_pred_proba, [5, 25, 50, 75, 95])\npercentiles\n\narray([0.03455652, 0.11989883, 0.29954411, 0.64776581, 0.87083353])\n\n\n\n\nconfusion matrix\n\n# generate confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.xticks([0.5, 1.5], ['No Diabetes', 'Diabetes'])\nplt.yticks([0.5, 1.5], ['No Diabetes', 'Diabetes'], va='center')\nplt.show()\n\n\n\n\n\n\n\n\n\n# recall / sensitivity\nrecall = recall_score(y_test, y_pred)\nrecall\n\n0.6727272727272727\n\n\n\n# precision / positive predictive value\nprecision = precision_score(y_test, y_pred)\nprecision\n\n0.6379310344827587\n\n\n\n# specificity\ntn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\nspecificity = tn / (tn + fp)\nspecificity\n\nnp.float64(0.7878787878787878)\n\n\n\n# accuracy\naccuracy = accuracy_score(y_test, y_pred)\naccuracy\n\n0.7467532467532467\n\n\n\n# f1\nf1 = f1_score(y_test, y_pred)\nf1\n\n0.6548672566371682\n\n\n\n# get ROC curve values\nfpr, tpr, thresholds_roc = roc_curve(y_test, y_pred_proba)\n\n# get PR curve values\nprecision, recall, thresholds_pr = precision_recall_curve(y_test, y_pred_proba)\n\n# get areas under the curves\nauroc = roc_auc_score(y_test, y_pred_proba)\npr_auc = average_precision_score(y_test, y_pred_proba)\n\n\n# plot both curves\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\nax1.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {auroc:.2f}')\nax1.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nax1.set_xlabel('False Positive Rate')\nax1.set_ylabel('True Positive Rate')\nax1.set_title('Receiver Operating Characteristic (ROC) Curve')\nax1.legend(loc=\"lower right\")\n\n# Plot Precision-Recall Curve\nax2.plot(recall, precision, color='purple', lw=2, label=f'PR-AUC = {pr_auc:.2f}')\nax2.set_xlabel('Recall')\nax2.set_ylabel('Precision')\nax2.set_title('Precision-Recall Curve')\nax2.legend(loc=\"lower left\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\ny_test.value_counts()\n\nOutcome\n0    99\n1    55\nName: count, dtype: int64\n\n\n\n\nReference\nhttps://www.youtube.com/watch?v=KdUrfY1yM0w\nhttps://github.com/RichardOnData/YouTube/blob/main/Python%20Notebooks/classification_metrics.ipynb"
  },
  {
    "objectID": "posts/usefullresource/index.html",
    "href": "posts/usefullresource/index.html",
    "title": "Useful resource",
    "section": "",
    "text": "Some useful resource\n\nYoutube\n\nRProgramming101\n\nPositPBC\n\nJuliaSilge\n\n\n\nthecoatlessprofessor\n\n\n\nEquitableEquations"
  },
  {
    "objectID": "posts/CPUGPU/index.html",
    "href": "posts/CPUGPU/index.html",
    "title": "CPU and GPU",
    "section": "",
    "text": "CPU & GPU Performance\n\nlocal computer CPU and GPU info\n\nCPUGPU OpenCL PerformanceGPU Metal Performance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorld computer CPU and GPU info\n\nCPUGPU OpenCL Performance!GPU Metal Performance\n\n\nhttps://browser.geekbench.com/v6/cpu/multicore\n\n\n\nhttps://browser.geekbench.com/opencl-benchmarks\n\n\n\nhttps://browser.geekbench.com/metal-benchmarks\n\n\n\n\n\n\nReference\nhttps://www.geekbench.com/\nhttps://github.com/ProjectPhysX/OpenCL-Benchmark"
  },
  {
    "objectID": "posts/run_ai_local/index.html",
    "href": "posts/run_ai_local/index.html",
    "title": "本地运行AI模型",
    "section": "",
    "text": "Running AI model on local machine with Ollama, huggingface and more"
  },
  {
    "objectID": "posts/versioncontrolpython/index.html",
    "href": "posts/versioncontrolpython/index.html",
    "title": "Version control for Python with uv",
    "section": "",
    "text": "🚀 A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.\n⚡️ 10-100x faster than pip.\n🗂️ Provides comprehensive project management, with a universal lockfile."
  },
  {
    "objectID": "posts/versioncontrolpython/index.html#there-is-no-rich-package-in-python",
    "href": "posts/versioncontrolpython/index.html#there-is-no-rich-package-in-python",
    "title": "Version control for Python with uv",
    "section": "there is no rich package in python",
    "text": "there is no rich package in python\n\n\nCode\ntry:\n    import rich\n    print('pacakge installed')\nexcept ImportError as e:\n    print('pacakge not installed')\n    pass  # module doesn't exist, deal with it."
  },
  {
    "objectID": "posts/versioncontrolpython/index.html#but-can-add-rich-in-script",
    "href": "posts/versioncontrolpython/index.html#but-can-add-rich-in-script",
    "title": "Version control for Python",
    "section": "but can add rich in script",
    "text": "but can add rich in script\n\n# /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = [\n#   \"requests&lt;3\",\n#   \"rich\",\n# ]\n# ///\n\nimport requests\nfrom rich.pretty import pprint\n\nresp = requests.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n\nimport rich\nfrom importlib.metadata import version\nversion('rich')"
  },
  {
    "objectID": "posts/versioncontrolpython/index.html#run-.py-with-uv",
    "href": "posts/versioncontrolpython/index.html#run-.py-with-uv",
    "title": "Version control for Python with uv",
    "section": "run .py with uv",
    "text": "run .py with uv\n\n\nCode\n!uv run test.py\n\n\ntest.py is running\nversion is :\n13.9.4"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitle\n\n\n\nAuthor\n\n\n\n\n\n\n\n\nApr 10, 2025\n\n\n数据星期二\n\n\nTony D\n\n\n\n\n\n\nApr 7, 2025\n\n\n表格展示\n\n\nTony D\n\n\n\n\n\n\nApr 5, 2025\n\n\nAI生成代码\n\n\nTony D\n\n\n\n\n\n\nMar 31, 2025\n\n\n使用代码发邮件\n\n\nTony D\n\n\n\n\n\n\nMar 28, 2025\n\n\n使用AI给播客语音转文字并作摘要\n\n\nTony D\n\n\n\n\n\n\nMar 27, 2025\n\n\n路径管理\n\n\nTony D\n\n\n\n\n\n\nMar 27, 2025\n\n\n使用AI给视频自动生成中英文字幕\n\n\nTony D\n\n\n\n\n\n\nMar 25, 2025\n\n\n密码管理\n\n\nTony D\n\n\n\n\n\n\nMar 25, 2025\n\n\n正则表达式代码\n\n\nTony D\n\n\n\n\n\n\nMar 25, 2025\n\n\n使用git代码版本管理\n\n\nTony D\n\n\n\n\n\n\nMar 24, 2025\n\n\nDocker使用介绍\n\n\nTony D\n\n\n\n\n\n\nMar 24, 2025\n\n\nLinux系统操作代码\n\n\nTony D\n\n\n\n\n\n\nMar 18, 2025\n\n\n调用网络端AI模型\n\n\nTony D\n\n\n\n\n\n\nMar 18, 2025\n\n\n本地运行AI模型\n\n\nTony D\n\n\n\n\n\n\nMar 18, 2025\n\n\n（LLM）大语言模型\n\n\nTony D\n\n\n\n\n\n\nMar 16, 2025\n\n\nMake QR code\n\n\nTony D\n\n\n\n\n\n\nMar 15, 2025\n\n\nR code optimization with lintr and styler\n\n\nTony D\n\n\n\n\n\n\nMar 15, 2025\n\n\nAI Code assistant\n\n\nTony D\n\n\n\n\n\n\nMar 15, 2025\n\n\n使用R httr2 调用API\n\n\nTony D\n\n\n\n\n\n\nMar 15, 2025\n\n\n使用R pin数据传输\n\n\nTony D\n\n\n\n\n\n\nMar 14, 2025\n\n\nPython code optimization with ruff\n\n\nTony D\n\n\n\n\n\n\nMar 14, 2025\n\n\nVersion control for Python with uv\n\n\nTony D\n\n\n\n\n\n\nMar 14, 2025\n\n\nR pacakge download and managment tool\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\nCPU and GPU\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\nClassification Metrics\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\n使用iphone或ipad下载youtube\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\nWeb scraping in R with rvest\n\n\nTony D\n\n\n\n\n\n\nMar 12, 2025\n\n\nWeb scraping in Python\n\n\nTony D\n\n\n\n\n\n\nMar 11, 2025\n\n\nSubscribe to a YouTube channel via email\n\n\nTony D\n\n\n\n\n\n\nMar 11, 2025\n\n\nVersion control with renv\n\n\nTony D\n\n\n\n\n\n\nMar 11, 2025\n\n\nYoutube下载工具：yt-dlp\n\n\nTony D\n\n\n\n\n\n\nMar 1, 2025\n\n\nUseful resource\n\n\nTony D\n\n\n\n\n\n\nMar 8, 2000\n\n\nWelcome To My Blog\n\n\nTony D\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/versioncontrolpython/index.html#but-can-add-rich-package-in-script",
    "href": "posts/versioncontrolpython/index.html#but-can-add-rich-package-in-script",
    "title": "Version control for Python with uv",
    "section": "but can add rich package in script",
    "text": "but can add rich package in script\n#| eval: false\n\n# /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = [\n#   \"requests&lt;3\",\n#   \"rich\",\n# ]\n# ///\n\nimport requests\nimport rich\nfrom rich.pretty import pprint\n\n\nimport rich\nfrom importlib.metadata import version\n\nprint('test.py is running')\nprint('version is :')\nprint(version('rich'))"
  },
  {
    "objectID": "posts/python_code_optimization/index.html",
    "href": "posts/python_code_optimization/index.html",
    "title": "Python code optimization with ruff",
    "section": "",
    "text": "⚡️ 10-100x faster than existing linters (like Flake8) and formatters (like Black)\n🐍 Installable via pip\n🛠️ pyproject.toml support"
  },
  {
    "objectID": "posts/python_code_optimization/index.html#convert-.qmd-to-.py",
    "href": "posts/python_code_optimization/index.html#convert-.qmd-to-.py",
    "title": "Python code optimization with ruff",
    "section": "convert .qmd to .py",
    "text": "convert .qmd to .py\n\n\n\nCode\n\nTerminal\n\nquarto convert index.qmd    # → index.ipynb\n\n\n\n\n\n\nCode\n\nTerminal\n\n!jupyter nbconvert --to python index.ipynb    # → index.py"
  },
  {
    "objectID": "posts/python_code_optimization/index.html#check-.py-with-ruff",
    "href": "posts/python_code_optimization/index.html#check-.py-with-ruff",
    "title": "Python code optimization with ruff",
    "section": "check .py with ruff",
    "text": "check .py with ruff\n\n\n\nCode\n\nTerminal\n\n!ruff check index.py"
  },
  {
    "objectID": "posts/copilot/index.html",
    "href": "posts/copilot/index.html",
    "title": "AI Code assistant",
    "section": "",
    "text": "AI tool for writing code"
  },
  {
    "objectID": "posts/copilot/index.html#configure-on-github",
    "href": "posts/copilot/index.html#configure-on-github",
    "title": "AI Code assistant",
    "section": "",
    "text": "free account is limit per month"
  },
  {
    "objectID": "posts/copilot/index.html#step-2-configure-on-github",
    "href": "posts/copilot/index.html#step-2-configure-on-github",
    "title": "AI Code assistant",
    "section": "Step 2 configure on github",
    "text": "Step 2 configure on github\nfree account is limit per month"
  },
  {
    "objectID": "posts/copilot/index.html#install-package",
    "href": "posts/copilot/index.html#install-package",
    "title": "AI Code assistant",
    "section": "Install package",
    "text": "Install package\n\nremotes::install_github(\"mlverse/chattr\")\n\n\nlibrary(chattr)"
  },
  {
    "objectID": "posts/copilot/index.html#run-chatgpt",
    "href": "posts/copilot/index.html#run-chatgpt",
    "title": "AI Code assistant",
    "section": "run ChatGPT",
    "text": "run ChatGPT\n\n# run \nchattr::chattr_app(as_job = TRUE)"
  },
  {
    "objectID": "posts/copilot/index.html#step-1-enble-on-rstudio",
    "href": "posts/copilot/index.html#step-1-enble-on-rstudio",
    "title": "AI Code assistant",
    "section": "Step 1 enble on Rstudio",
    "text": "Step 1 enble on Rstudio"
  },
  {
    "objectID": "posts/copilot/index.html#step-1-install-package",
    "href": "posts/copilot/index.html#step-1-install-package",
    "title": "AI Code assistant",
    "section": "Step 1 Install package",
    "text": "Step 1 Install package\n\n\nCode\n#remotes::install_github(\"mlverse/chattr\")\n\n\n\n\nCode\nlibrary(chattr)"
  },
  {
    "objectID": "posts/copilot/index.html#step-4-run-chatgpt-as-background-job",
    "href": "posts/copilot/index.html#step-4-run-chatgpt-as-background-job",
    "title": "AI Code assistant",
    "section": "Step 4 run ChatGPT as background job",
    "text": "Step 4 run ChatGPT as background job\n\n\nCode\n# run \nchattr::chattr_app(as_job = TRUE)"
  },
  {
    "objectID": "posts/copilot/index.html#step-3-run-chatgpt-as-background-job",
    "href": "posts/copilot/index.html#step-3-run-chatgpt-as-background-job",
    "title": "AI Code assistant",
    "section": "Step 3 run ChatGPT as background job",
    "text": "Step 3 run ChatGPT as background job\n\nselect model\n\n\nCode\n#copilot do not need OpenAI_API_KEY\nchattr_use(\"copilot\")\n\n\n\n\nadd prompt\n\n\nCode\nchattr_defaults(prompt = \"{readLines(system.file('prompt/base.txt', package = 'chattr'))}\")\n\n\n\n\nrun ChatGPT\n\n\nCode\n# run \nchattr_app(as_job = TRUE)\n\n\n\nDone!"
  },
  {
    "objectID": "posts/copilot/index.html#or-setup-auto-open-chat-gpt",
    "href": "posts/copilot/index.html#or-setup-auto-open-chat-gpt",
    "title": "AI Code assistant",
    "section": "Or setup auto open Chat GPT",
    "text": "Or setup auto open Chat GPT\n\nStep 1 find Rprofile file\n\n\nCode\ninstall.packages(\"usethis\")  # Install if not already installed\nusethis::edit_r_profile()\n\n\n\n\nStep 2 edit Rprofile file as below\n\n\n\nCode\n\n.RProfile\n\n#|eval: false\n# Load chattr app after RStudio is fully loaded\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession) {\n    Sys.sleep(2)  # Wait 2 seconds before starting chattr to ensure RStudio is ready\n    tryCatch({\n      library(chattr)\n      chattr_use(\"gpt-4\")\n      Sys.setenv(\"OPENAI_API_KEY\" = \"your-api-key-here\")\n      chattr_app(as_job = TRUE)\n    }, error = function(e)\n      message(\"Error starting chattr: \", e$message))\n  }\n}, action = \"append\")"
  },
  {
    "objectID": "posts/copilot/index.html#or-setup-auto-open-chat-gpt-when-rstudio-start",
    "href": "posts/copilot/index.html#or-setup-auto-open-chat-gpt-when-rstudio-start",
    "title": "AI Code assistant",
    "section": "Or setup auto open Chat GPT when Rstudio start",
    "text": "Or setup auto open Chat GPT when Rstudio start\n\nStep 1 find Rprofile file\n\n\nCode\n#install.packages(\"usethis\")  # Install if not already installed\nusethis::edit_r_profile()\n\n\n\n\nStep 2 edit Rprofile file as below\n\n\n\nCode\n\n.RProfile\n\n#|eval: false\n# Load chattr app after RStudio is fully loaded\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession) {\n    Sys.sleep(2)  # Wait 2 seconds before starting chattr to ensure RStudio is ready\n    tryCatch({\n      library(chattr)\n      chattr_use(\"copilot\")\n      #Sys.setenv(\"OPENAI_API_KEY\" = \"your-api-key-here\")\n      chattr_defaults(prompt = \"{readLines(system.file('prompt/base.txt', package = 'chattr'))}\")\n\n      chattr_app(as_job = TRUE)\n    }, error = function(e)\n      message(\"Error starting chattr: \", e$message))\n  }\n}, action = \"append\")"
  },
  {
    "objectID": "posts/Rpackage/index.html",
    "href": "posts/Rpackage/index.html",
    "title": "R pacakge download and managment tool",
    "section": "",
    "text": "pak installs R packages from CRAN, Bioconductor, GitHub, URLs, git repositories, local files and directories. It is an alternative to install.packages() and devtools::install_github(). pak is fast, safe and convenient."
  },
  {
    "objectID": "posts/Rpackage/index.html#install-pak",
    "href": "posts/Rpackage/index.html#install-pak",
    "title": "R pacakge download and managment tool",
    "section": "install pak",
    "text": "install pak\n\n\nCode\ninstall.packages(\"pak\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#load-pak",
    "href": "posts/Rpackage/index.html#load-pak",
    "title": "R pacakge download and managment tool",
    "section": "load pak",
    "text": "load pak\n\n\nCode\nlibrary(pak)"
  },
  {
    "objectID": "posts/Rpackage/index.html#check-pak-version",
    "href": "posts/Rpackage/index.html#check-pak-version",
    "title": "R pacakge download and managment tool",
    "section": "check pak version",
    "text": "check pak version\n\n\nCode\npak_sitrep()"
  },
  {
    "objectID": "posts/Rpackage/index.html#install-pacakge-from-cran",
    "href": "posts/Rpackage/index.html#install-pacakge-from-cran",
    "title": "R pacakge download and managment tool",
    "section": "install pacakge from cran",
    "text": "install pacakge from cran\n\n\nCode\npkg_install(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#install-pacakge-file-tar.gz-from-website",
    "href": "posts/Rpackage/index.html#install-pacakge-file-tar.gz-from-website",
    "title": "R pacakge download and managment tool",
    "section": "install pacakge file tar.gz from website",
    "text": "install pacakge file tar.gz from website\n\n\nCode\npkg_install(\n  \"url::https://cran.r-project.org/src/contrib/Archive/tibble/tibble_3.1.7.tar.gz\"\n)"
  },
  {
    "objectID": "posts/Rpackage/index.html#uninstall-package",
    "href": "posts/Rpackage/index.html#uninstall-package",
    "title": "R pacakge download and managment tool",
    "section": "uninstall package",
    "text": "uninstall package\n\n\nCode\npkg_remove(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#check-package",
    "href": "posts/Rpackage/index.html#check-package",
    "title": "R pacakge download and managment tool",
    "section": "check package",
    "text": "check package\n\n\nCode\npkg_deps_tree(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#show-all-dependencies",
    "href": "posts/Rpackage/index.html#show-all-dependencies",
    "title": "R pacakge download and managment tool",
    "section": "show all Dependencies",
    "text": "show all Dependencies\n\n\nCode\npkg_deps(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#explain-dependencies",
    "href": "posts/Rpackage/index.html#explain-dependencies",
    "title": "R pacakge download and managment tool",
    "section": "Explain dependencies",
    "text": "Explain dependencies\n\n\nCode\npkg_deps_explain(\"tibble\", \"rlang\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#update-package",
    "href": "posts/Rpackage/index.html#update-package",
    "title": "R pacakge download and managment tool",
    "section": "update package",
    "text": "update package\n\n\nCode\npkg_install(\"tibble\")\n\n\nUpdate all dependencies of a package\n\n\nCode\npkg_install(\"tibble\", upgrade = TRUE)"
  },
  {
    "objectID": "posts/r_code_optimization/index.html",
    "href": "posts/r_code_optimization/index.html",
    "title": "R code optimization with lintr and styler",
    "section": "",
    "text": "pacakge for R code optimization"
  },
  {
    "objectID": "posts/r_code_optimization/index.html#before",
    "href": "posts/r_code_optimization/index.html#before",
    "title": "R code optimization with lintr and styler",
    "section": "Before",
    "text": "Before\n\n\nCode\nlibrary(\"dplyr\")\n\n   Good &lt;- 1\napplePie &lt;- Good + 1\n    Peter &lt;- d + 1"
  },
  {
    "objectID": "posts/r_code_optimization/index.html#auto-formating",
    "href": "posts/r_code_optimization/index.html#auto-formating",
    "title": "R code optimization with lintr and styler",
    "section": "Auto formating",
    "text": "Auto formating\n\n\n\nCode\n\ntest.R\n\nstyle_file(\"test.R\")\n\n\n\nStyling  1  files:\n test.R ✔ \n────────────────────────────────────────\nStatus  Count   Legend \n✔   1   File unchanged.\nℹ   0   File changed.\n✖   0   Styling threw an error.\n────────────────────────────────────────\n\n\nAfter\n\n\nCode\nlibrary(\"dplyr\")\n\nGood &lt;- 1\napplePie &lt;- Good + 1\nPeter &lt;- d + 1"
  },
  {
    "objectID": "posts/Rpackage/index.html#check-pacakge-history-on-cran",
    "href": "posts/Rpackage/index.html#check-pacakge-history-on-cran",
    "title": "R pacakge download and managment tool",
    "section": "check pacakge history on cran",
    "text": "check pacakge history on cran\n\n\nCode\npkg_history(\"tibble\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#total-pacakge-download-from-last-week",
    "href": "posts/Rpackage/index.html#total-pacakge-download-from-last-week",
    "title": "R pacakge download and managment tool",
    "section": "total pacakge download from last week",
    "text": "total pacakge download from last week\n\n\nCode\nlibrary(cranlogs)\ncran_downloads(when = \"last-week\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#total-pacakge-download-from-2014",
    "href": "posts/Rpackage/index.html#total-pacakge-download-from-2014",
    "title": "R pacakge download and managment tool",
    "section": "total pacakge download from 2014",
    "text": "total pacakge download from 2014\n\n\nCode\ndata=cran_downloads(from = \"2014-01-01\", to = \"2024-12-31\")\nlibrary(plotly)\nplot_ly(data, x = ~date, y = ~count, mode = \"lines\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#top-pacakge-download-from-last-week",
    "href": "posts/Rpackage/index.html#top-pacakge-download-from-last-week",
    "title": "R pacakge download and managment tool",
    "section": "top pacakge download from last week",
    "text": "top pacakge download from last week\n\n\nCode\ncran_top_downloads(\"last-week\")"
  },
  {
    "objectID": "posts/Rpackage/index.html#one-pacakge-download-from-last-week",
    "href": "posts/Rpackage/index.html#one-pacakge-download-from-last-week",
    "title": "R pacakge download and managment tool",
    "section": "one pacakge download from last week",
    "text": "one pacakge download from last week\n\n\nCode\npacakge_name=\"tibble\"\nlastweek=cran_downloads(when = \"last-week\", package = pacakge_name)\nlastweek\n\n\n\n\nCode\nprint(paste(pacakge_name,\"last week been downloaded\",sum(lastweek$count),\"times\"))"
  },
  {
    "objectID": "posts/makeQRcode/index.html",
    "href": "posts/makeQRcode/index.html",
    "title": "Make QR code",
    "section": "",
    "text": "Making QR code with R and Python\n\nR\n\n\nCode\npak::pkg_install('qrcode')\n\n\nℹ Loading metadata database\n\n\n✔ Loading metadata database ... done\n\n\n\n\n\n \n\n\nℹ No downloads are needed\n\n\n✔ 1 pkg + 1 dep: kept 2 [3.5s]\n\n\n\n\nCode\nlibrary(qrcode)\ncode=qr_code(\"https://rfor.us/posit2024slides\") \n\n\nSave the QR code as a SVG file\n\n\nCode\ngenerate_svg(code, filename = \"qr.svg\")\n\n\n\n\nCode\nplot(code)\n\n\n\n\n\n\n\n\n\n\n\nPython\n\n\nCode\n!pip install qrcode scikit-image\n\n\n\n\nCode\nimport qrcode\nimg = qrcode.make(\"https://rfor.us/posit2024slides\")\ntype(img)  # qrcode.image.pil.PilImage\n\n\n&lt;class 'qrcode.image.pil.PilImage'&gt;\n\n\nsave the QR code as a PNG file\n\n\nCode\nimg.save(\"some_file.png\")\n\n\n\n\nCode\nfrom skimage import io\nimg = io.imread(\"some_file.png\")\nio.imshow(img)"
  },
  {
    "objectID": "posts/run_ai_online/index.html",
    "href": "posts/run_ai_online/index.html",
    "title": "调用网络端AI模型",
    "section": "",
    "text": "run LLM model online with ellmer or chatter"
  },
  {
    "objectID": "posts/run_ai_online/index.html#ollama-on-local",
    "href": "posts/run_ai_online/index.html#ollama-on-local",
    "title": "调用网络端AI模型",
    "section": "ollama on local",
    "text": "ollama on local\n\nset up ollama local\n\n\nCode\nlibrary(ollamar)\nollamar::pull(\"llama3.1\")\n\n\n\n\nCode\nollamar::list_models()\n\n\n\n\ndifine model\n\n\nCode\nchat=chat_ollama(\n  system_prompt = NULL,\n  turns = NULL,\n  base_url = \"http://localhost:11434\",\n  model=\"llama3.1\",\n  seed = NULL,\n  api_args = list(),\n  echo = NULL\n)\n\nchat$get_model()\n\n\n\n\nrun LLM\n\n\nCode\nchat$chat(\"Tell me three jokes about statisticians\")\n\n\n\n\nrun on console\n\n\nCode\nlive_console(chat)\n\n\n\n\n\ncheck token usage\n\n\nCode\ntoken_usage()"
  },
  {
    "objectID": "posts/run_ai_online/index.html#step-1-install-package",
    "href": "posts/run_ai_online/index.html#step-1-install-package",
    "title": "调用网络端AI模型",
    "section": "Step 1 Install package",
    "text": "Step 1 Install package\n\n\nCode\n#remotes::install_github(\"mlverse/chattr\")\n\n\n\n\nCode\nlibrary(chattr)"
  },
  {
    "objectID": "posts/run_ai_online/index.html#step-3-run-chatgpt-as-background-job",
    "href": "posts/run_ai_online/index.html#step-3-run-chatgpt-as-background-job",
    "title": "调用网络端AI模型",
    "section": "Step 3 run ChatGPT as background job",
    "text": "Step 3 run ChatGPT as background job\n\nselect model\n\n\nCode\n#copilot do not need OpenAI_API_KEY\nchattr_use(\"copilot\")\n\n\n\n\nadd prompt\n\n\nCode\nchattr_defaults(prompt = \"{readLines(system.file('prompt/base.txt', package = 'chattr'))}\")\n\n\n\n\nrun ChatGPT as background jobs\nDo not use Copilot (GitHub) model for chattr(). Github will block this behavior.\n\n\nCode\n# run \nchattr_app(as_job = TRUE)\n\n\nDone!"
  },
  {
    "objectID": "posts/run_ai_online/index.html#or-setup-auto-open-chat-gpt-when-rstudio-start",
    "href": "posts/run_ai_online/index.html#or-setup-auto-open-chat-gpt-when-rstudio-start",
    "title": "调用网络端AI模型",
    "section": "Or setup auto open Chat GPT when Rstudio start",
    "text": "Or setup auto open Chat GPT when Rstudio start\n\nStep 1 find Rprofile file\n\n\nCode\n#install.packages(\"usethis\")  # Install if not already installed\nusethis::edit_r_profile()\n\n\n\n\nStep 2 edit Rprofile file as below\n\n\n\nCode\n\n.RProfile\n\n#|eval: false\n# Load chattr app after RStudio is fully loaded\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession) {\n    Sys.sleep(2)  # Wait 2 seconds before starting chattr to ensure RStudio is ready\n    tryCatch({\n      library(chattr)\n      chattr_use(\"copilot\")\n      #Sys.setenv(\"OPENAI_API_KEY\" = \"your-api-key-here\")\n      chattr_defaults(prompt = \"{readLines(system.file('prompt/base.txt', package = 'chattr'))}\")\n\n      chattr_app(as_job = TRUE)\n    }, error = function(e)\n      message(\"Error starting chattr: \", e$message))\n  }\n}, action = \"append\")"
  },
  {
    "objectID": "posts/run_ai_local/index.html#download-and-install-the-ollama-app",
    "href": "posts/run_ai_local/index.html#download-and-install-the-ollama-app",
    "title": "本地运行AI模型",
    "section": "Download and install the Ollama app",
    "text": "Download and install the Ollama app\nhttps://ollama.com/download\nand open the app on computer"
  },
  {
    "objectID": "posts/run_ai_local/index.html#run-llm-model-on-ollama",
    "href": "posts/run_ai_local/index.html#run-llm-model-on-ollama",
    "title": "本地运行AI模型",
    "section": "Run LLM model on Ollama",
    "text": "Run LLM model on Ollama\n\nRun in R with ollamar pacakgeRun in R with ellmer packageRun in terminal\n\n\n\ndownload pacakge check connection\n\n\nCode\npak::pak(\"ollamar\")\npak::pkg_deps_tree(\"ollamar\")\n\n\n\n\nCode\nlibrary(ollamar)\ntest_connection() \n\n\ndownload model\n\n\nCode\nollamar::pull(\"llama3.1\")\n\n\nlist downloaded model\n\n\nCode\nlist_models()\n\n\nshow model detail\n\n\nCode\nollamar::show(\"gemma3\")\n\n\nrun model\n\n\nCode\nresp &lt;- generate(\"gemma3\", \"tell me a 5-word story\")\nresp\n\n\n\n\nCode\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n\n\n\nCode\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")\n\n\nusing multiple models\n\n\nCode\n(list_models())$name\n\n\n\n\nCode\nmodels_name=(list_models())$name[-1]\nmodels_name\n\n\n\n\nCode\ninput_prompt=\"tell me a 5-word story\"\n\n\n\n\nCode\nall_model=c()\n\nfor (i in models_name){\n  resp &lt;- generate(i, input_prompt)\n  #print(paste0(\"Model: \", i))\n  print(resp_process(resp, \"text\"))\n  #resp_process(resp, \"df\")\n  all_model=rbind(all_model, resp_process(resp, \"df\"))\n}\n\n\n\n\nCode\nall_model\n\n\n\n\n\n\n\n\n\n\nCode\n!ollama pull llama3.1\n\n\n\n\nCode\n!ollama run llama3.1 \"tell me a 5-word story\"\n\n\n\nRun in Python\ninstall package\n\n\nCode\n!pip install ollama\n\n\nlocal pacakge\n\n\nCode\nimport json\nimport pandas as pd\nfrom pandas import json_normalize\n\n\nfrom ollama import chat\nfrom ollama import ChatResponse\nimport ollama\n\n\ndownload model\n\n\nCode\n#ollama.pull('llama3.2:1b')\n\n\nlist all download model\n\n\nCode\nollama_model=ollama.list()\n\n\n\n\nCode\n# Extracting data from the ListResponse\ndata = []\nfor model in ollama_model.models:\n    model_data = {\n        'model': model.model,\n        'modified_at': model.modified_at,\n        'digest': model.digest,\n        'size': (model.size/1000000000),\n        'parent_model': model.details.parent_model,\n        'format': model.details.format,\n        'family': model.details.family,\n        'families': model.details.families,\n        'parameter_size': model.details.parameter_size,\n        'quantization_level': model.details.quantization_level\n    }\n    data.append(model_data)\n\n# Convert the list of dictionaries into a pandas DataFrame\nollama_model_df = pd.DataFrame(data)\n\n# Show the DataFrame\nprint(ollama_model_df)\n\n\nslow model detail\n\n\nCode\nollama.show('deepseek-r1:7b-qwen-distill-q4_K_M')\n\n\ndelete model\n\n\nCode\n#ollama.delete('llama3.2:1b')\n\n\nrun model\n\n\nCode\nresponse: ChatResponse=ollama.chat(model='deepseek-r1:7b-qwen-distill-q4_K_M', messages=[\n  {'role': 'system', \n  'content': '你是一个诗人，你只能输出中文'},\n  \n  {'role': 'assistant', \n  'content': ''},\n  \n  {'role': 'user', \n  'content': 'give me a 3 lines story'}\n  ])\n\n\n\n\nCode\nprint(response.message.content)\n\n\n\n\nCode\nresponse: ChatResponse =ollama.chat(model='gemma3', messages=[{'role': 'user', 'content': 'Why is the sky blue?'}])\n\n\n\n\nCode\nprint(response.message.content)\n\n\ncreate model\n\n\nCode\nollama.create(model='example_model', from_='llama3.2', system=\"You are Mario from Super Mario Bros.\")\n\n\npush model to ollama\n\n\nCode\nollama.push('user/example_model')"
  },
  {
    "objectID": "posts/run_ai_local/index.html#set-up-pythonusing-python-3.11-instead-of-3.13",
    "href": "posts/run_ai_local/index.html#set-up-pythonusing-python-3.11-instead-of-3.13",
    "title": "Run AI model on local machine",
    "section": "Set up Python:Using python 3.11 instead of 3.13",
    "text": "Set up Python:Using python 3.11 instead of 3.13\n\n\nCode\nSys.setenv(RETICULATE_PYTHON = \"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\nlibrary(reticulate)\nuse_python(\"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\n\n\n\n\nCode\nrepl_python()\n\n\n\n\nCode\nfrom platform import python_version\nprint(python_version())\n\n\n\n\nCode\nimport sys\nimport platform\nprint(f\"Python Platform: {platform.platform()}\")\nprint()\nprint(f\"Python {sys.version}\")"
  },
  {
    "objectID": "posts/run_ai_local/index.html#install-tensorflow-for-mac",
    "href": "posts/run_ai_local/index.html#install-tensorflow-for-mac",
    "title": "Run AI model on local machine",
    "section": "install tensorflow for Mac",
    "text": "install tensorflow for Mac\n\n\nCode\npip3.11 install tensorflow tensorflow-macos tensorflow-metal"
  },
  {
    "objectID": "posts/run_ai_local/index.html#install-jax-metal-for-mac",
    "href": "posts/run_ai_local/index.html#install-jax-metal-for-mac",
    "title": "Run AI model on local machine",
    "section": "install jax-metal for Mac",
    "text": "install jax-metal for Mac\n\n\nCode\npip3.11 install jax-metal ml_dtypes jax jaxlib"
  },
  {
    "objectID": "posts/run_ai_local/index.html#test-installs",
    "href": "posts/run_ai_local/index.html#test-installs",
    "title": "Run AI model on local machine",
    "section": "Test Installs",
    "text": "Test Installs\n\n\nCode\nimport torch, tensorflow as tf\n# Should be true\nprint(torch.backends.mps.is_available())\nprint(torch.backends.mps.is_built())\nprint(tf.config.list_physical_devices('GPU'))\n# Should recognize 1 GPU\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))"
  },
  {
    "objectID": "posts/run_ai_local/index.html#start-hugging-face-with-python",
    "href": "posts/run_ai_local/index.html#start-hugging-face-with-python",
    "title": "Run AI model on local machine",
    "section": "start hugging face with python",
    "text": "start hugging face with python\n\n\nCode\nimport os\nos.environ[\"PYTORCH_ENABLE_MPS_FALLBACK\"] = \"1\"\nos.environ[\"PYTORCH_MPS_HIGH_WATERMARK_RATIO\"] = \"0.0\"\nif \"GRADIO_SERVER_PORT\" not in os.environ:\n    os.environ[\"GRADIO_SERVER_PORT\"] = \"7865\"\n\n\n\n\nCode\nfrom huggingface_hub import hf_hub_download\n\n\nset hugging face key\n\n\nCode\nHUGGING_FACE_API_KEY = ''\n\n\n\n\nCode\nmodel_id = \"lmsys/fastchat-t5-3b-v1.0\"\nfilenames = [\n        \"pytorch_model.bin\", \"added_tokens.json\", \"config.json\", \"generation_config.json\", \n        \"special_tokens_map.json\", \"spiece.model\", \"tokenizer_config.json\"\n]\n\n\n\n\nCode\nfor filename in filenames:\n        print(\"start download file:\"+filename)\n        downloaded_model_path = hf_hub_download(\n                    repo_id=model_id,\n                    filename=filename,\n                    token=HUGGING_FACE_API_KEY\n        )\n        \n        print(downloaded_model_path)\n\n\n\n\nCode\n# offline\nHF_HUB_OFFLINE=1 \nfrom transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, AutoModelForSeq2SeqLM\ntokenizer = AutoTokenizer.from_pretrained(model_id, legacy=False)\n\n\n\n\nCode\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_id,local_files_only=True)\n\n\n# using apple mps(GPU)\n# mps_device = \"mps\"\n#pipeline = pipeline(\"text2text-generation\", model=model, device = mps_device,tokenizer=tokenizer, max_length=100)\n\n\n# using apple CPU\npipeline = pipeline(\"text2text-generation\", model=model, device=-1, tokenizer=tokenizer, max_length=1000)\n\n\n\n\nCode\nanswer=pipeline(\"What are competitors to Apache Kafka?\")\nanswer\n\n\n\n\nCode\nanswer=pipeline(\"\"\"My name is Mark.\nI have brothers called David and John and my best friend is Michael.\nUsing only the context above. Do you know if I have a sister?    \n\"\"\")\nanswer"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html",
    "href": "posts/run_ai_local_huggingface/index.html",
    "title": "Run AI model on local machine with hugging face",
    "section": "",
    "text": "Running LLM model on local machine with hugging face"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#set-up-pythonusing-python-3.11-instead-of-3.13",
    "href": "posts/run_ai_local_huggingface/index.html#set-up-pythonusing-python-3.11-instead-of-3.13",
    "title": "Run AI model on local machine with hugging face",
    "section": "Set up Python:Using python 3.11 instead of 3.13",
    "text": "Set up Python:Using python 3.11 instead of 3.13\n\n\nCode\nSys.setenv(RETICULATE_PYTHON = \"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\nlibrary(reticulate)\nuse_python(\"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\n\n\n\n\nCode\nrepl_python()\n\n\n\n\nCode\nfrom platform import python_version\nprint(python_version())\n\n\n\n\nCode\nimport sys\nimport platform\nprint(f\"Python Platform: {platform.platform()}\")\nprint()\nprint(f\"Python {sys.version}\")"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#install-tensorflow-for-mac",
    "href": "posts/run_ai_local_huggingface/index.html#install-tensorflow-for-mac",
    "title": "Run AI model on local machine with hugging face",
    "section": "install tensorflow for Mac",
    "text": "install tensorflow for Mac\n\n\nCode\npip3.11 install tensorflow tensorflow-macos tensorflow-metal"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#install-jax-metal-for-mac",
    "href": "posts/run_ai_local_huggingface/index.html#install-jax-metal-for-mac",
    "title": "Run AI model on local machine with hugging face",
    "section": "install jax-metal for Mac",
    "text": "install jax-metal for Mac\n\n\nCode\npip3.11 install jax-metal ml_dtypes jax jaxlib"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#test-installs",
    "href": "posts/run_ai_local_huggingface/index.html#test-installs",
    "title": "Run AI model on local machine with hugging face",
    "section": "Test Installs",
    "text": "Test Installs\n\n\nCode\nimport torch, tensorflow as tf\n# Should be true\nprint(torch.backends.mps.is_available())\nprint(torch.backends.mps.is_built())\nprint(tf.config.list_physical_devices('GPU'))\n# Should recognize 1 GPU\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))"
  },
  {
    "objectID": "posts/run_ai_local_huggingface/index.html#start-hugging-face-with-python",
    "href": "posts/run_ai_local_huggingface/index.html#start-hugging-face-with-python",
    "title": "Run AI model on local machine with hugging face",
    "section": "start hugging face with python",
    "text": "start hugging face with python\n\n\nCode\nimport os\nos.environ[\"PYTORCH_ENABLE_MPS_FALLBACK\"] = \"1\"\nos.environ[\"PYTORCH_MPS_HIGH_WATERMARK_RATIO\"] = \"0.0\"\nif \"GRADIO_SERVER_PORT\" not in os.environ:\n    os.environ[\"GRADIO_SERVER_PORT\"] = \"7865\"\n\n\n\n\nCode\nfrom huggingface_hub import hf_hub_download\n\n\nset hugging face key\n\n\nCode\nHUGGING_FACE_API_KEY = ''\n\n\n\n\nCode\nmodel_id = \"lmsys/fastchat-t5-3b-v1.0\"\nfilenames = [\n        \"pytorch_model.bin\", \"added_tokens.json\", \"config.json\", \"generation_config.json\", \n        \"special_tokens_map.json\", \"spiece.model\", \"tokenizer_config.json\"\n]\n\n\n\n\nCode\nfor filename in filenames:\n        print(\"start download file:\"+filename)\n        downloaded_model_path = hf_hub_download(\n                    repo_id=model_id,\n                    filename=filename,\n                    token=HUGGING_FACE_API_KEY\n        )\n        \n        print(downloaded_model_path)\n\n\n\n\nCode\n# offline\nHF_HUB_OFFLINE=1 \nfrom transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, AutoModelForSeq2SeqLM\ntokenizer = AutoTokenizer.from_pretrained(model_id, legacy=False)\n\n\n\n\nCode\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_id,local_files_only=True)\n\n\n# using apple mps(GPU)\n# mps_device = \"mps\"\n#pipeline = pipeline(\"text2text-generation\", model=model, device = mps_device,tokenizer=tokenizer, max_length=100)\n\n\n# using apple CPU\npipeline = pipeline(\"text2text-generation\", model=model, device=-1, tokenizer=tokenizer, max_length=1000)\n\n\n\n\nCode\nanswer=pipeline(\"What are competitors to Apache Kafka?\")\nanswer\n\n\n\n\nCode\nanswer=pipeline(\"\"\"My name is Mark.\nI have brothers called David and John and my best friend is Michael.\nUsing only the context above. Do you know if I have a sister?    \n\"\"\")\nanswer"
  },
  {
    "objectID": "posts/run_ai_loca_ollama/index.html",
    "href": "posts/run_ai_loca_ollama/index.html",
    "title": "Run AI model on local machine with Ollama",
    "section": "",
    "text": "Running LLM model on local machine with Ollama\n\n\nDownload and install the Ollama app\nhttps://ollama.com/download\nand open the app on computer\n\n\nRun LLM model on Ollama\n\nRun in RRun in terminalRun in Python\n\n\n\ndownload pacakge check connection\n\n\nCode\ninstall.packages(\"ollamar\")\n\n\n\n\nCode\nlibrary(ollamar)\ntest_connection() \n\n\n\n\ndownload model\n\n\nCode\nollamar::pull(\"llama3.1\")\n\n\n\n\nlist downloaded model\n\n\nCode\nlist_models()\n\n\n\n\nshow model detail\n\n\nCode\n#ollamar::show(\"llama3.1\")\n\n\n\n\nrun model\n\n\nCode\nresp &lt;- generate(\"llama3.1\", \"tell me a 5-word story\")\nresp\n\n\n\n\nCode\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n\n\n\nCode\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")\n\n\n\n\n\n\ndownload model\n\n\nCode\n!ollama pull llama3.1\n\n\n\n\nrun model\n\n\nCode\n!ollama run llama3.1 \"tell me a 5-word story\"\n\n\n\n\n\n\n\nCode\n!pip install ollama\n\n\n\n\nCode\nfrom ollama import chat\nfrom ollama import ChatResponse\n\n\n\n\nCode\nimport ollama\n\n\n\ndownload model\n\n\nCode\nollama.pull(\"llama3.1\")\n\n\n\n\nshow downloaded model\n\n\nCode\nollama.list()\n\n\n\n\nRun model\n\n\nCode\nollama.chat(model='llama3.1', messages=[{'role': 'user', 'content': 'who are you?'}])\n\n\n\n\ncreate a model with prompt\n\n\nCode\nollama.create(model='Mario', from_='llama3.1', system=\"You are Mario from Super Mario Bros.\")\n\n\n\n\nCode\nollama.chat(model='Mario', messages=[{'role': 'user', 'content': 'who are you?'}])\n\n\n\n\ndelete model\n\n\nCode\nstatus = ollama.delete('example')\nstatus\n\n\n\n\n\n\n\n\nmall pacakge\nhttps://mlverse.github.io/mall/"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html",
    "href": "posts/download yotube on iphone or ipad/index.html",
    "title": "使用iphone或ipad下载youtube",
    "section": "",
    "text": "首先需要确认你的iphone或ipad是可以连接youtube的。"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#用iphone或ipad下载-a-shell-mini-app",
    "href": "posts/download yotube on iphone or ipad/index.html#用iphone或ipad下载-a-shell-mini-app",
    "title": "使用iphone或ipad下载youtube",
    "section": "1. 用iphone或ipad下载 a-Shell mini app",
    "text": "1. 用iphone或ipad下载 a-Shell mini app\n\nhttps://apps.apple.com/us/app/a-shell-mini/id1543537943"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#打开a-shell-mini运行以下代码安装youtube-dl",
    "href": "posts/download yotube on iphone or ipad/index.html#打开a-shell-mini运行以下代码安装youtube-dl",
    "title": "使用iphone或ipad下载youtube",
    "section": "2. 打开a-shell mini运行以下代码安装youtube-dl",
    "text": "2. 打开a-shell mini运行以下代码安装youtube-dl\n\n\nCode\npip install youtube-dl\n\n\n如果想要下载高清视频再运行以下代码（可选）：\n\n\nCode\npip install gallery-dl\nmkdir bin\ncd bin\ncurl -L https://github.com/holzschu/a-Shell-commands/releases/download/0.1/ffmpeg.wasm -o ffmpeg.wasm"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#在a-shell-mini中用youtube-dl下载youtube视频",
    "href": "posts/download yotube on iphone or ipad/index.html#在a-shell-mini中用youtube-dl下载youtube视频",
    "title": "使用iphone或ipad下载youtube",
    "section": "3. 在a-shell mini中用youtube-dl下载youtube视频",
    "text": "3. 在a-shell mini中用youtube-dl下载youtube视频\n找到你想要下载的youtube视频网站地址，在a-shell mini里运行以下代码\n\n\nCode\nyoutube-dl https://www.youtube.com/watch?v=FT3ODSg1GFE"
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#使用shortcut-app里的sw-dlt自动下载可选",
    "href": "posts/download yotube on iphone or ipad/index.html#使用shortcut-app里的sw-dlt自动下载可选",
    "title": "使用iphone或ipad下载youtube",
    "section": "4. 使用shortcut app里的SW-DLT自动下载(可选)",
    "text": "4. 使用shortcut app里的SW-DLT自动下载(可选)\n如果你觉得每次都要在a-shell mini里打那么长的代码。也可以使用shortcut app。\n用iphone或ipad扫描下面二维码下载SW-DLT\n\n使用方法：\n1.复制要下载的youtube视频连接\n2.打开shrotcut app点击SW-DLT就会开始自动下载了\n打开shrotcut app：\n\n点击SW-DLT："
  },
  {
    "objectID": "posts/download yotube on iphone or ipad/index.html#reference",
    "href": "posts/download yotube on iphone or ipad/index.html#reference",
    "title": "使用iphone或ipad下载youtube",
    "section": "Reference",
    "text": "Reference\n3 Ways to Run youtube-dl on iOS :https://chrunos.com/youtube-dl-ios/\nSW-DLT:https://routinehub.co/shortcut/7284/"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html",
    "href": "posts/data_transfer_with_pin/index.html",
    "title": "使用R pin数据传输",
    "section": "",
    "text": "Package Pins for Upload and download data/model to online drive.\nCode\npak::pkg_install(\"pins\")\nCode\nlibrary(pins)\nlibrary(tidyverse)"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#use-local-location-as-a-board",
    "href": "posts/data_transfer_with_pin/index.html#use-local-location-as-a-board",
    "title": "使用R pin数据传输",
    "section": "use local location as a board",
    "text": "use local location as a board\n\n\nCode\nboard=board_folder(getwd())\n\n\n\n\nCode\nboard %&gt;% pin_list()"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#upload-to-local-board",
    "href": "posts/data_transfer_with_pin/index.html#upload-to-local-board",
    "title": "使用R pin数据传输",
    "section": "upload to local board",
    "text": "upload to local board\n\n\nCode\nboard %&gt;% pin_write(head(mtcars), \"mtcars\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#download-from-local-board",
    "href": "posts/data_transfer_with_pin/index.html#download-from-local-board",
    "title": "使用R pin数据传输",
    "section": "download from local board",
    "text": "download from local board\n\n\nCode\na=board %&gt;% pin_read(\"mtcars\")\na"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#upload-file-to-board",
    "href": "posts/data_transfer_with_pin/index.html#upload-file-to-board",
    "title": "使用R pin数据传输",
    "section": "upload file to board",
    "text": "upload file to board\n\n\nCode\nboard %&gt;% pin_upload('thumbnail.jpg','new.thumbnail.jpg')"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#list-file-in-the-board",
    "href": "posts/data_transfer_with_pin/index.html#list-file-in-the-board",
    "title": "使用R pin数据传输",
    "section": "list file in the board",
    "text": "list file in the board\n\n\nCode\nboard %&gt;% pin_list()"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#download-file-from-board",
    "href": "posts/data_transfer_with_pin/index.html#download-file-from-board",
    "title": "使用R pin数据传输",
    "section": "download file from board",
    "text": "download file from board\n\n\nCode\nboard %&gt;% pin_download('new.thumbnail.jpg')"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#one-drive-as-as-a-board",
    "href": "posts/data_transfer_with_pin/index.html#one-drive-as-as-a-board",
    "title": "使用R pin数据传输",
    "section": "one drive as as a board",
    "text": "one drive as as a board\n\n\nCode\nod &lt;- Microsoft365R::get_personal_onedrive()\nboard365 &lt;- board_ms365(od, \"myboard\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#upload-to-one-drive-board",
    "href": "posts/data_transfer_with_pin/index.html#upload-to-one-drive-board",
    "title": "使用R pin数据传输",
    "section": "upload to one drive board",
    "text": "upload to one drive board\n\n\nCode\nboard365 %&gt;% pin_write(tail(mtcars), \"mtcars\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#download-from-one-drive-board",
    "href": "posts/data_transfer_with_pin/index.html#download-from-one-drive-board",
    "title": "使用R pin数据传输",
    "section": "download from one drive board",
    "text": "download from one drive board\n\n\nCode\nboard365 %&gt;% pin_read(\"mtcars\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#list-file-in-the-board-1",
    "href": "posts/data_transfer_with_pin/index.html#list-file-in-the-board-1",
    "title": "使用R pin数据传输",
    "section": "list file in the board",
    "text": "list file in the board\n\n\nCode\nboard %&gt;% pin_list()"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#there-will-be-two-version",
    "href": "posts/data_transfer_with_pin/index.html#there-will-be-two-version",
    "title": "使用R pin数据传输",
    "section": "there will be two version",
    "text": "there will be two version\n\n\nCode\nboard %&gt;% pin_versions(\"mtcars_version\")"
  },
  {
    "objectID": "posts/data_transfer_with_pin/index.html#download-version-file-from-board",
    "href": "posts/data_transfer_with_pin/index.html#download-version-file-from-board",
    "title": "使用R pin数据传输",
    "section": "download version file from board",
    "text": "download version file from board\n\n\nCode\n# board %&gt;% pin_read(\"mtcars_version\",version = '20230704T095208Z-8df40')\nboard %&gt;% pin_read(\"mtcars_version\",version = .Last.value$version[[1]])"
  },
  {
    "objectID": "posts/api_with_httr2/index.html",
    "href": "posts/api_with_httr2/index.html",
    "title": "使用R httr2 调用API",
    "section": "",
    "text": "Package httr2 for pipeable API for working with web APIs"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#api-link",
    "href": "posts/api_with_httr2/index.html#api-link",
    "title": "使用R httr2 调用API",
    "section": "API link",
    "text": "API link\n\n\nCode\nNWS_base_url &lt;- 'https://api.weather.gov'\n\nNWS_response_link &lt;- request(NWS_base_url) |&gt; \n  req_url_path_append(\n    'points',\n    '38.8894,-77.0352'\n  ) \n\nNWS_response_link"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#create-response-and-check-connection",
    "href": "posts/api_with_httr2/index.html#create-response-and-check-connection",
    "title": "使用R httr2 调用API",
    "section": "create response and check connection",
    "text": "create response and check connection\n\n\nCode\nNWS_response=NWS_response_link|&gt; req_perform()\nNWS_response"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#get-forecast-hourly-url-from-response",
    "href": "posts/api_with_httr2/index.html#get-forecast-hourly-url-from-response",
    "title": "使用R httr2 调用API",
    "section": "get forecast hourly url from response",
    "text": "get forecast hourly url from response\n\n\nCode\nNWS_response |&gt; \n  resp_body_json() |&gt; \n  glimpse()\n\n\n\n\nCode\nforecast_url &lt;- NWS_response |&gt; \n  resp_body_json() |&gt; \n  pluck('properties', 'forecastHourly')\n\nforecast_url"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#make-forecast-hourly-response",
    "href": "posts/api_with_httr2/index.html#make-forecast-hourly-response",
    "title": "使用R httr2 调用API",
    "section": "make forecast hourly response",
    "text": "make forecast hourly response\n\n\nCode\nforecast_response &lt;- request(forecast_url) |&gt; \n  req_perform()\n\nforecast_response |&gt; \n  resp_body_json() |&gt; \n  glimpse()"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#get-forecast-hourly-data",
    "href": "posts/api_with_httr2/index.html#get-forecast-hourly-data",
    "title": "使用R httr2 调用API",
    "section": "get forecast hourly data",
    "text": "get forecast hourly data\n\n\nCode\nextracted_data &lt;- forecast_response |&gt; \n  resp_body_json() |&gt; \n  pluck('properties', 'periods') |&gt; \n  map_dfr( # iterates over each list and binds rows to a tibble\n    \\(x) {\n      tibble(\n        time = x |&gt; pluck('startTime'),\n        temp_F = x |&gt; pluck('temperature'),\n        rain_prob = x |&gt; pluck('probabilityOfPrecipitation', 'value'),\n        forecast = x |&gt; pluck('shortForecast')\n      )\n    }\n  )\n\nextracted_data"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#create-response",
    "href": "posts/api_with_httr2/index.html#create-response",
    "title": "使用R httr2 调用API",
    "section": "create response",
    "text": "create response\n\n\nCode\nlibrary(keyring)\nopenweathermap_base_url &lt;- 'https://api.openweathermap.org/data/2.5'\n\nopenweathermap_api_key=key_get(\"openweathermap_api_key\")\n\ncity='Bangkok'\n\nopenweathermap_response_link &lt;- request(openweathermap_base_url) |&gt; \n  req_url_path_append(\n    paste0('weather?q=',city,'&appid=',openweathermap_api_key,'&units=metric')\n  ) \n\nopenweathermap_response_link\n\n\n\n\nCode\nopenweathermap_response=openweathermap_response_link|&gt; req_perform()\nopenweathermap_response"
  },
  {
    "objectID": "posts/api_with_httr2/index.html#get-data-from-response",
    "href": "posts/api_with_httr2/index.html#get-data-from-response",
    "title": "使用R httr2 调用API",
    "section": "get data from response",
    "text": "get data from response\n\n\nCode\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  glimpse()\n\n\n\n\nCode\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('main', 'temp') \n\na=openweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('weather') \n\n(a[[1]])$main\n\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('name') \n\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('coord', 'lon') \n\nopenweathermap_response |&gt; \n  resp_body_json() |&gt; \n  pluck('coord', 'lat') \n\n\nLondon air_pollution:\nhttp://api.openweathermap.org/data/2.5/air_pollution?lat=51.5085&lon=-0.1257&appid=625ae405e4f11b5b957af484b77fbd62"
  },
  {
    "objectID": "posts/LLM_model/index.html",
    "href": "posts/LLM_model/index.html",
    "title": "（LLM）大语言模型",
    "section": "",
    "text": "(LLM)Large language model\nCode\nlibrary(tidyverse)\nlibrary(openxlsx)\nlibrary(readxl)\nCode\ndata001=read_excel('AI model.xlsx')\nhead(data001)"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html",
    "href": "posts/youtube_yt-dlp/index.html",
    "title": "Youtube下载工具：yt-dlp",
    "section": "",
    "text": "yt-dlp is a feature-rich command-line audio/video downloader with support for thousands of sites. The project is a fork of youtube-dl based on the now inactive youtube-dlc.\nhttps://github.com/yt-dlp/yt-dlp"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#start-download-youtube",
    "href": "posts/youtube_yt-dlp/index.html#start-download-youtube",
    "title": "Youtube下载工具：yt-dlp",
    "section": "Start download youtube",
    "text": "Start download youtube\n\nCommand lineRPython\n\n\n\ndownload video with chrome cookies\nyt-dlp --cookies-from-browser chrome 'https://www.youtube.com/watch?v=yBl8UdSav5Y'\n\n\ndownload video with firefox cookies\nYou may also use a conforming browser extension for exporting cookies, such as Get cookies.txt LOCALLY for Chrome\nyt-dlp --cookies-from-browser firefox 'https://www.youtube.com/watch?v=yBl8UdSav5Y'\n\n\ndownload video with export cookies\nYou may also use a conforming browser extension for exporting cookies, such as Get cookies.txt LOCALLY for Chrome\n\n\nget video titles\nyt-dlp --cookies-from-browser firefox --get-title 'https://www.youtube.com/watch?v=yBl8UdSav5Y'\n\n\ndownload video to mp3 format\nyt-dlp --cookies-from-browser chrome -x --audio-format mp3 --audio-quality 0 'https://www.youtube.com/watch?v=FkOpwodhROI'\n\n\ndownload video with timestamp\nyt-dlp --cookies-from-browser chrome --download-sections '*00:02-03:00' 'https://www.youtube.com/watch?v=FkOpwodhROI'\n\n\ndownload video to mp4 with timestamp\nyt-dlp -f mp4 --cookies-from-browser chrome  --download-sections '*00:02-03:00'  'https://www.youtube.com/watch?v=FkOpwodhROI'\n\n\n\n\n\n\n\n\n\n\n="
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video",
    "href": "posts/youtube_yt-dlp/index.html#download-video",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video",
    "text": "download video\n\n\nCode\n!yt-dlp --cookies-from-browser chrome 'https://www.youtube.com/watch?v=ULRVwRmfCmM'"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-to-mp3-format",
    "href": "posts/youtube_yt-dlp/index.html#download-video-to-mp3-format",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video to mp3 format",
    "text": "download video to mp3 format\nyt-dlp --cookies-from-browser chrome -x --audio-format mp3 --audio-quality 0 'https://www.youtube.com/watch?v=FkOpwodhROI'"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-with-timestamp",
    "href": "posts/youtube_yt-dlp/index.html#download-video-with-timestamp",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video with timestamp",
    "text": "download video with timestamp\nyt-dlp --cookies-from-browser chrome --download-sections '*00:02-03:00' 'https://www.youtube.com/watch?v=FkOpwodhROI'"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-to-mp4-with-timestamp",
    "href": "posts/youtube_yt-dlp/index.html#download-video-to-mp4-with-timestamp",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video to mp4 with timestamp",
    "text": "download video to mp4 with timestamp\nyt-dlp -f mp4 --cookies-from-browser chrome  --download-sections '*00:02-03:00'  'https://www.youtube.com/watch?v=FkOpwodhROI'"
  },
  {
    "objectID": "posts/LLM_model/index.html#math",
    "href": "posts/LLM_model/index.html#math",
    "title": "（LLM）大语言模型",
    "section": "math",
    "text": "math\n\nAIME\nhttps://en.wikipedia.org/wiki/American_Invitational_Mathematics_Examination\n\n\nMATH-500"
  },
  {
    "objectID": "posts/LLM_model/index.html#code",
    "href": "posts/LLM_model/index.html#code",
    "title": "（LLM）大语言模型",
    "section": "Code",
    "text": "Code"
  },
  {
    "objectID": "posts/LLM_model/index.html#codeforces",
    "href": "posts/LLM_model/index.html#codeforces",
    "title": "（LLM）大语言模型",
    "section": "Codeforces",
    "text": "Codeforces"
  },
  {
    "objectID": "posts/LLM_model/index.html#livecodebench",
    "href": "posts/LLM_model/index.html#livecodebench",
    "title": "（LLM）大语言模型",
    "section": "LiveCodeBench",
    "text": "LiveCodeBench"
  },
  {
    "objectID": "posts/LLM_model/index.html#english",
    "href": "posts/LLM_model/index.html#english",
    "title": "（LLM）大语言模型",
    "section": "English",
    "text": "English\n\nMMLU\nMeasuring Massive Multitask Language Understanding (MMLU)\nhttps://en.wikipedia.org/wiki/MMLU"
  },
  {
    "objectID": "posts/LLM_model/index.html#science",
    "href": "posts/LLM_model/index.html#science",
    "title": "（LLM）大语言模型",
    "section": "Science",
    "text": "Science\n\nGPQA-Diamond\nGraduate-Level Google-Proof Q&A\nDescription: GPQA consists of 448 multiple-choice questions meticulously crafted by domain experts in biology, physics, and chemistry. These questions are intentionally designed to be high-quality and extremely difficult.\nExpert Accuracy: Even experts who hold or are pursuing PhDs in the corresponding domains achieve only 65% accuracy on these questions (or 74% when excluding clear mistakes identified in retrospect).\nGoogle-Proof: The questions are “Google-proof,” meaning that even with unrestricted access to the web, highly skilled non-expert validators only reach an accuracy of 34% despite spending over 30 minutes searching for answers.\nAI Systems Difficulty: State-of-the-art AI systems, including our strongest GPT-4 based baseline, achieve only 39% accuracy on this challenging dataset."
  },
  {
    "objectID": "posts/linux_command/index.html",
    "href": "posts/linux_command/index.html",
    "title": "Linux系统操作代码",
    "section": "",
    "text": "Top useful Linux command"
  },
  {
    "objectID": "posts/linux_command/index.html#create-txt-file",
    "href": "posts/linux_command/index.html#create-txt-file",
    "title": "Linux系统操作代码",
    "section": "create txt file",
    "text": "create txt file\nnano"
  },
  {
    "objectID": "posts/linux_command/index.html#edit-current-txt-file",
    "href": "posts/linux_command/index.html#edit-current-txt-file",
    "title": "Linux系统操作代码",
    "section": "edit current txt file",
    "text": "edit current txt file\nnano test.txt"
  },
  {
    "objectID": "posts/regular_expression/index.html",
    "href": "posts/regular_expression/index.html",
    "title": "正则表达式代码",
    "section": "",
    "text": "Top useful Linux command regular expression"
  },
  {
    "objectID": "posts/docker/index.html",
    "href": "posts/docker/index.html",
    "title": "Docker使用介绍",
    "section": "",
    "text": "Docker intro"
  },
  {
    "objectID": "posts/regular_expression/index.html#view",
    "href": "posts/regular_expression/index.html#view",
    "title": "正则表达式代码",
    "section": "view",
    "text": "view\n\n\nCode\nlibrary(stringr)\n\n\n\n\nCode\nlibrary(stringr)\npattern='cat'\nstr_view_all(\"The cat sat on the mat with another cat.\", pattern)"
  },
  {
    "objectID": "posts/regular_expression/index.html#extract-all-numbers-from-a-string",
    "href": "posts/regular_expression/index.html#extract-all-numbers-from-a-string",
    "title": "正则表达式代码",
    "section": "Extract all numbers from a string:",
    "text": "Extract all numbers from a string:\n\n\nCode\npattern=\"\\\\d+\"\nstr_view(\"I bought 3 apples, 12 bananas, and 5 oranges.\",pattern)\n\n\n\n\nCode\nstr_extract_all(\"I bought 3 apples, 12 bananas, and 5 oranges.\", pattern) |&gt; unlist()"
  },
  {
    "objectID": "posts/regular_expression/index.html#extract-string-between-two-string",
    "href": "posts/regular_expression/index.html#extract-string-between-two-string",
    "title": "正则表达式代码",
    "section": "Extract string between two string:",
    "text": "Extract string between two string:\n\n\nCode\na &lt;- \"STR1 11111 STR2 STR1 22222 STR2,\"\nres &lt;- str_extract_all(a, \"STR1\\\\s*(.*?)\\\\s*STR2\")\nres\n\na=res |&gt; unlist()\n\nprint(paste0(\"first match: \",a[1]))\n      \nprint(paste0(\"second match: \",a[2]))"
  },
  {
    "objectID": "posts/regular_expression/index.html#match-sperical",
    "href": "posts/regular_expression/index.html#match-sperical",
    "title": "正则表达式代码",
    "section": "match sperical",
    "text": "match sperical\nregular expression for getting string between ‘/’ and ’\\(' on \"The /1234cat\\) sat on the 1245ma with another 4444ee cat.”\n\n\nCode\npattern= \"/(.*?)\\\\$\"\nstr_view_all(\"The /1234cat$ sat on the 1245ma with another 4444ee cat.\", pattern)\n\n\n\n\nCode\npattern= \"/(.*?)\\\\$\"\nmatches &lt;- str_extract_all(\"The /1234cat$ sat on the 1245ma with another 4444ee cat.\",pattern)\nmatches"
  },
  {
    "objectID": "posts/docker/index.html#create-docker-file",
    "href": "posts/docker/index.html#create-docker-file",
    "title": "Docker使用介绍",
    "section": "create Docker file",
    "text": "create Docker file\n\n\n\nCode\n\ntidyverse_4.3.3.Dockerfile\n\nFROM docker.io/library/ubuntu:jammy\n\nENV R_VERSION=\"4.3.3\"\nENV R_HOME=\"/usr/local/lib/R\"\nENV TZ=\"Etc/UTC\"\n\nCOPY scripts/install_R_source.sh /rocker_scripts/install_R_source.sh\nRUN /rocker_scripts/install_R_source.sh\n\nENV CRAN=\"https://p3m.dev/cran/__linux__/jammy/2024-04-23\"\nENV LANG=en_US.UTF-8\n\nCOPY scripts/bin/ /rocker_scripts/bin/\nCOPY scripts/setup_R.sh /rocker_scripts/setup_R.sh\nRUN /rocker_scripts/setup_R.sh\n\nCOPY scripts/install_tidyverse.sh /rocker_scripts/install_tidyverse.sh\nRUN /rocker_scripts/install_tidyverse.sh\n\nENV S6_VERSION=\"v2.1.0.2\"\nENV RSTUDIO_VERSION=\"2023.12.1+402\"\nENV DEFAULT_USER=\"rstudio\"\n\nCOPY scripts/install_rstudio.sh /rocker_scripts/install_rstudio.sh\nCOPY scripts/install_s6init.sh /rocker_scripts/install_s6init.sh\nCOPY scripts/default_user.sh /rocker_scripts/default_user.sh\nCOPY scripts/init_set_env.sh /rocker_scripts/init_set_env.sh\nCOPY scripts/init_userconf.sh /rocker_scripts/init_userconf.sh\nCOPY scripts/pam-helper.sh /rocker_scripts/pam-helper.sh\nRUN /rocker_scripts/install_rstudio.sh\n\nEXPOSE 8787\nCMD [\"/init\"]\n\nCOPY scripts/install_pandoc.sh /rocker_scripts/install_pandoc.sh\nRUN /rocker_scripts/install_pandoc.sh\n\nCOPY scripts/install_quarto.sh /rocker_scripts/install_quarto.sh\nRUN /rocker_scripts/install_quarto.sh\n\nCOPY scripts /rocker_scripts"
  },
  {
    "objectID": "posts/docker/index.html#bulid-docker-image-from-dockerfile",
    "href": "posts/docker/index.html#bulid-docker-image-from-dockerfile",
    "title": "Docker使用介绍",
    "section": "bulid Docker image from dockerfile",
    "text": "bulid Docker image from dockerfile\n\n\nCode\ndocker build -f tidyverse_4.3.3.Dockerfile -t proj:myapp ."
  },
  {
    "objectID": "posts/docker/index.html#run-container-from-image",
    "href": "posts/docker/index.html#run-container-from-image",
    "title": "Docker使用介绍",
    "section": "run container from image",
    "text": "run container from image\n\n\nCode\ndocker run"
  },
  {
    "objectID": "posts/docker/index.html#stop-container",
    "href": "posts/docker/index.html#stop-container",
    "title": "Docker使用介绍",
    "section": "stop container",
    "text": "stop container\n\n\nCode\ndocker stop"
  },
  {
    "objectID": "posts/docker/index.html#restart-container",
    "href": "posts/docker/index.html#restart-container",
    "title": "Docker使用介绍",
    "section": "restart container",
    "text": "restart container\n\n\nCode\ndocker start"
  },
  {
    "objectID": "posts/docker/index.html#delete-container",
    "href": "posts/docker/index.html#delete-container",
    "title": "Docker使用介绍",
    "section": "delete container",
    "text": "delete container\n\n\nCode\ndocker rm"
  },
  {
    "objectID": "posts/docker/index.html#delete-image",
    "href": "posts/docker/index.html#delete-image",
    "title": "Docker使用介绍",
    "section": "delete image",
    "text": "delete image\n\n\nCode\ndocker rmr"
  },
  {
    "objectID": "posts/docker/index.html#run-docker-image",
    "href": "posts/docker/index.html#run-docker-image",
    "title": "Docker使用介绍",
    "section": "run Docker image",
    "text": "run Docker image\n\n\nCode\ndocker run -p 8787:8787 proj:myapp\n\n\nrun at backend\n\n\nCode\ndocker run -d proj:myapp\n\n\nRstuido server is open at: http://localhost:8787/\nuser name is rstudio\npassword is show on terminal"
  },
  {
    "objectID": "posts/docker/index.html#go-inside-docker-containers-with-containers-id",
    "href": "posts/docker/index.html#go-inside-docker-containers-with-containers-id",
    "title": "Docker使用介绍",
    "section": "go inside docker containers with containers id",
    "text": "go inside docker containers with containers id\n\n\nCode\ndocker exec -it b28a1b8eeeb6 sh\n\n\nexit docker linux\n\n\nCode\nexit"
  },
  {
    "objectID": "posts/docker/index.html#stop-container-with-container-id",
    "href": "posts/docker/index.html#stop-container-with-container-id",
    "title": "Docker使用介绍",
    "section": "stop container with container id",
    "text": "stop container with container id\n\n\nCode\ndocker stop b28a1b8eeeb6"
  },
  {
    "objectID": "posts/docker/index.html#restart-container-with-container-id",
    "href": "posts/docker/index.html#restart-container-with-container-id",
    "title": "Docker使用介绍",
    "section": "restart container with container id",
    "text": "restart container with container id\n\n\nCode\ndocker start b28a1b8eeeb6"
  },
  {
    "objectID": "posts/docker/index.html#delete-a-stop-container",
    "href": "posts/docker/index.html#delete-a-stop-container",
    "title": "Docker使用介绍",
    "section": "delete a stop container",
    "text": "delete a stop container\n\n\nCode\ndocker rm -f b28a1b8eeeb6"
  },
  {
    "objectID": "posts/docker/index.html#delete-image-with-image-id",
    "href": "posts/docker/index.html#delete-image-with-image-id",
    "title": "Docker使用介绍",
    "section": "delete image with image id",
    "text": "delete image with image id\n\n\nCode\ndocker rmi -f 7e1a4e2d11e2"
  },
  {
    "objectID": "posts/password_management/index.html",
    "href": "posts/password_management/index.html",
    "title": "密码管理",
    "section": "",
    "text": "Password management in R and Python"
  },
  {
    "objectID": "posts/password_management/index.html#open-home.renviron",
    "href": "posts/password_management/index.html#open-home.renviron",
    "title": "密码管理",
    "section": "open /home/.Renviron",
    "text": "open /home/.Renviron\n\n\nCode\nusethis::edit_r_environ()"
  },
  {
    "objectID": "posts/password_management/index.html#save-following-password-in-.renviron",
    "href": "posts/password_management/index.html#save-following-password-in-.renviron",
    "title": "密码管理",
    "section": "save following password in .Renviron",
    "text": "save following password in .Renviron\n\n\nCode\nfake_userid = \"username\"\nfake_pwd = \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#get-it-back",
    "href": "posts/password_management/index.html#get-it-back",
    "title": "密码管理",
    "section": "get it back",
    "text": "get it back\n\n\nCode\nSys.getenv(\"fake_userid\")\n\n\n[1] \"username\"\n\n\nCode\nSys.getenv(\"fake_pwd\")\n\n\n[1] \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#use-environment-variables",
    "href": "posts/password_management/index.html#use-environment-variables",
    "title": "密码管理",
    "section": "Use Environment variables",
    "text": "Use Environment variables\n\nopen /home/.Renviron\n\n\nCode\nusethis::edit_r_environ()\n\n\n\n\nsave following password in .Renviron\n\n\nCode\nfake_userid = \"username\"\nfake_pwd = \"password\"   \n\n\n\n\nget it back\n\n\nCode\nSys.getenv(\"fake_userid\")\n\n\n[1] \"username\"\n\n\nCode\nSys.getenv(\"fake_pwd\")\n\n\n[1] \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#using-keyringr-package",
    "href": "posts/password_management/index.html#using-keyringr-package",
    "title": "密码管理",
    "section": "using keyringr package",
    "text": "using keyringr package\n\n\nCode\npak::pak(\"keyring\")\n\n\n\n\nCode\nlibrary(keyring)\n\n\n\n\nCode\n# Interactively save a secret. This avoids typing the value of the secret\n# into the console as this could be recorded in your `.Rhistory`\nkey_set(\"account_fake_001\")\n\n\n\n\nCode\n# Later retrieve that secret\nkey_get(\"account_fake_001\")"
  },
  {
    "objectID": "posts/password_management/index.html#using-source",
    "href": "posts/password_management/index.html#using-source",
    "title": "密码管理",
    "section": "using source",
    "text": "using source\n\ncreate pass.r and keep it yourself\n\n\n\nCode\n\npass.r\n\npass1='123'\n\n\n\n\n\nsource the pass.r in the main code\n\n\nCode\nsource('pass.r')\npass1\n\n\n[1] \"123\""
  },
  {
    "objectID": "posts/password_management/index.html#opton-1-using-source",
    "href": "posts/password_management/index.html#opton-1-using-source",
    "title": "密码管理",
    "section": "Opton 1 using source",
    "text": "Opton 1 using source\n\ncreate pass.r and keep it yourself\n\n\n\nCode\n\npass.r\n\npass1='123'\n\n\n\n\n\nsource the pass.r in the main code\n\n\nCode\nsource('pass.r')\npass1\n\n\n[1] \"123\""
  },
  {
    "objectID": "posts/password_management/index.html#opton-2-use-environment-variables",
    "href": "posts/password_management/index.html#opton-2-use-environment-variables",
    "title": "密码管理",
    "section": "Opton 2 Use Environment variables",
    "text": "Opton 2 Use Environment variables\n\nopen /home/.Renviron\n\n\nCode\nusethis::edit_r_environ()\n\n\n\n\nsave following password in .Renviron\n\n\nCode\nfake_userid = \"username\"\nfake_pwd = \"password\"   \n\n\n\n\nget it back\n\n\nCode\nSys.getenv(\"fake_userid\")\n\n\n[1] \"username\"\n\n\nCode\nSys.getenv(\"fake_pwd\")\n\n\n[1] \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#opton-3-using-keyringr-package",
    "href": "posts/password_management/index.html#opton-3-using-keyringr-package",
    "title": "密码管理",
    "section": "Opton 3 using keyringr package",
    "text": "Opton 3 using keyringr package\n\n\nCode\npak::pak(\"keyring\")\n\n\n\n\nCode\nlibrary(keyring)\n\n\n\n\nCode\n# Interactively save a secret. This avoids typing the value of the secret\n# into the console as this could be recorded in your `.Rhistory`\nkey_set(\"account_fake_001\")\n\n\n\n\nCode\n# Later retrieve that secret\nkey_get(\"account_fake_001\")"
  },
  {
    "objectID": "posts/password_management/index.html#opton-1-using-import",
    "href": "posts/password_management/index.html#opton-1-using-import",
    "title": "密码管理",
    "section": "Opton 1 using import",
    "text": "Opton 1 using import\n\ncreate pass_file.py and keep it yourself\n\n\n\nCode\n\npass_file.py\n\npass1='123'\n\n\n\n\n\ncall pass_file.py with import\n\n\nCode\nfrom pass_file import *\n#from pass_file import acct\npass_w\n\n\n'123'\n\n\nCode\nacct_w\n\n\n'222'"
  },
  {
    "objectID": "posts/password_management/index.html#option-1-using-source",
    "href": "posts/password_management/index.html#option-1-using-source",
    "title": "密码管理",
    "section": "Option 1 using source",
    "text": "Option 1 using source\n\ncreate pass.r and keep it yourself\n\n\n\nCode\n\npass.r\n\npass1='123'\n\n\n\n\n\nsource the pass.r in the main code\n\n\nCode\nsource('pass.r')\npass1\n\n\n[1] \"123\""
  },
  {
    "objectID": "posts/password_management/index.html#option-2-use-environment-variables",
    "href": "posts/password_management/index.html#option-2-use-environment-variables",
    "title": "密码管理",
    "section": "Option 2 Use Environment variables",
    "text": "Option 2 Use Environment variables\n\nopen /home/.Renviron\n\n\nCode\nusethis::edit_r_environ()\n\n\n\n\nsave following password in .Renviron\n\n\nCode\nfake_userid = \"username\"\nfake_pwd = \"password\"   \n\n\n\n\nget it back\n\n\nCode\nSys.getenv(\"fake_userid\")\n\n\n[1] \"username\"\n\n\nCode\nSys.getenv(\"fake_pwd\")\n\n\n[1] \"password\""
  },
  {
    "objectID": "posts/password_management/index.html#option-3-using-keyringr-package",
    "href": "posts/password_management/index.html#option-3-using-keyringr-package",
    "title": "密码管理",
    "section": "Option 3 using keyringr package",
    "text": "Option 3 using keyringr package\n\n\nCode\npak::pak(\"keyring\")\n\n\n\n\nCode\nlibrary(keyring)\n\n\n\n\nCode\n# Interactively save a secret. This avoids typing the value of the secret\n# into the console as this could be recorded in your `.Rhistory`\nkey_set(\"account_fake_001\")\n\n\n\n\nCode\n# Later retrieve that secret\nkey_get(\"account_fake_001\")"
  },
  {
    "objectID": "posts/password_management/index.html#option-1-using-import",
    "href": "posts/password_management/index.html#option-1-using-import",
    "title": "密码管理",
    "section": "Option 1 using import",
    "text": "Option 1 using import\n\ncreate pass_file.py and keep it yourself\n\n\n\nCode\n\npass_file.py\n\npass1='123'\n\n\n\n\n\ncall pass_file.py with import\n\n\nCode\nfrom pass_file import *\n#from pass_file import acct\npass_w\n\n\n'123'\n\n\nCode\nacct_w\n\n\n'222'"
  },
  {
    "objectID": "posts/git/index.html",
    "href": "posts/git/index.html",
    "title": "使用git代码版本管理",
    "section": "",
    "text": "download github desktop\nhttps://desktop.github.com/download/\n\n\nset up github account\nhttps://github.com/\n\n\nClone a repository into a new directory\ngit clone \n\n\nInitialize a new Git repository\ngit init\n\n\nAdd to the staging area\ngit add  git add .\n\n\nCommit changes to the repository\ngit commit -m “commit message”\n\n\nView the commit history\ngit log\n\n\nCheck the status of changes\ngit status\n\n\nShow the changes in the working directory\ngit diff\n\n\nCreate a new branch\ngit branch \n\n\nList all branches\ngit branch\n\n\nSwitch to a different branch\ngit checkout \n\n\nCreate and switch to a new branch\ngit checkout -b \n\n\nMerge a branch into the current branch\ngit merge \n\n\nchanges from a remote repository\ngit pull\n\n\nPush changes to a remote repository\ngit push\n\n\nDelete a branch\ngit branch -d  git push origin –delete \n\n\nStash changes\ngit stash\n\n\nApply stashed changes\ngit stash apply\n\n\nShow stashed changes\ngit stash list\n\n\nRemove a file from the staging area\ngit reset \n\n\nreset to the last commit with commit id but keep your actual file unchange\ngit reset –soft HEAD~1\n\n\nreset to the last commit with commit id\ngit reset –hard e4a59dd6b356b93f914db2a2a253dc55582bd61e"
  },
  {
    "objectID": "posts/run_ai_online/index.html#google-gemini",
    "href": "posts/run_ai_online/index.html#google-gemini",
    "title": "调用网络端AI模型",
    "section": "google gemini",
    "text": "google gemini\n\ngemini-2.0-flash\n\n\nCode\nchat_gemini_model=chat_gemini(\n  system_prompt = NULL,\n  turns = NULL,\n  base_url = \"https://generativelanguage.googleapis.com/v1beta/\",\n  api_key = key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  api_args = list(),\n  echo = NULL\n)\n\nchat_gemini_model\n\n\n\n\nCode\nchat_gemini_model$chat(\"Tell me three jokes about statisticians\")"
  },
  {
    "objectID": "posts/AI_subtitles/index.html",
    "href": "posts/AI_subtitles/index.html",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "",
    "text": "Use mlx_whisper for transcribe Audio to Text,and use gemini-2.0-flash for correction\nload R package\nCode\n#pak::pkg_install('tuneR')\nlibrary(ellmer)\nlibrary(tidyverse)\nlibrary(srt)\nlibrary(openxlsx)\nlibrary(readxl)\nlibrary(lares)\nlibrary(tuneR)\nlibrary(stringr)"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#trim-mp3-if-needed",
    "href": "posts/AI_subtitles/index.html#trim-mp3-if-needed",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "trim mp3 if needed",
    "text": "trim mp3 if needed\n\n\nCode\n# library(lares)\n# trim_mp3(\n#   mp3_title,\n#   start_time = 1,\n#   end_time = 9999999,\n#   overwrite = FALSE,\n#   ext = \"mp3\",\n#   quiet = FALSE\n# )\n\n\n# output file:\n#paste0(mp3_title |&gt; str_replace('.mp3,',''),\"_trim.mp3\")"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#define-model",
    "href": "posts/AI_subtitles/index.html#define-model",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "define model",
    "text": "define model\n\n\nCode\nchat_gemini_model&lt;- chat_gemini(\n  system_prompt = \"你是一个中文和英文的语言学家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model\n\n\n\n\nCode\n#testing model connection\nchat_result=chat_gemini_model$chat(\"hello\")\nchat_result"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#run-model",
    "href": "posts/AI_subtitles/index.html#run-model",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "Run model",
    "text": "Run model\n\n\nCode\nsrt_txt0=read_srt('text.srt')\nsrt_txt2=srt_txt0$subtitle|&gt; as.character()\n\n\n\n\nCode\nlength(srt_txt2)\n\n\n\n\nCode\nprompt_text=paste0('把以下文字是通过语言识别出来的文字。如果有错别字请更正并输出中文。保持更正后的文字与原文的文字长度一样。也保持句子总长度与更正后的句子总长度一致。比如hovah请更正为福建人。没有错则不变。有更正的句子后面加上!!!!。不要多余的反馈。输出格式为:更正前的句子《---》更正后的句子 ',srt_txt2)\nchat_result1=chat_gemini_model$chat(prompt_text)\n\n\n\n\nCode\nall_result2=unlist(strsplit(chat_result1, \"\\n\"))\nlength(all_result2)\n#all_result2= c(all_result2,\"\")"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#add-to-data",
    "href": "posts/AI_subtitles/index.html#add-to-data",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "add to data",
    "text": "add to data\n\n\nCode\nsrt_txt=srt_txt0 |&gt; mutate(correct_txt=all_result2 |&gt; str_replace('!!!!','')|&gt; str_extract( \"(?&lt;=《---》).*\")\n                           ,all_correct_txt=all_result2\n                           \n                           )"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#define-model-1",
    "href": "posts/AI_subtitles/index.html#define-model-1",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "define model",
    "text": "define model\n中翻英 using google LLM model gemini-2.0-flash\n\n\nCode\nchat_gemini_model_translate&lt;- chat_gemini(\n  system_prompt = \"你是一个中文和英文的翻译专家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model_translate"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#run-model-1",
    "href": "posts/AI_subtitles/index.html#run-model-1",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "run model",
    "text": "run model\n\n\nCode\ncorrect_txt=srt_txt$correct_txt|&gt; as.character()\n\n\n\n\nCode\nprompt_text=paste0('请联系上下文把以下文字翻译成英文。总句子数量不变。不要多余的反馈。输出格式为:原来的文字《---》翻译成英文',correct_txt)\nchat_result1=chat_gemini_model_translate$chat(prompt_text)\n\n\n\n\nCode\nall_result2=unlist(strsplit(chat_result1, \"\\n\"))\nlength(all_result2)\n#all_result2=all_result2[1:422]"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#add-to-data-1",
    "href": "posts/AI_subtitles/index.html#add-to-data-1",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "add to data",
    "text": "add to data\n\n\nCode\nsrt_txt=srt_txt |&gt; mutate(correct_english_txt=all_result2 |&gt; str_extract( \"(?&lt;=《---》).*\"))"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#output-srt_txt",
    "href": "posts/AI_subtitles/index.html#output-srt_txt",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "output srt_txt",
    "text": "output srt_txt\n\n\nCode\nwrite.xlsx(srt_txt,'srt_data.xlsx')"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#output-chinese-and-english-subtites-to-srt",
    "href": "posts/AI_subtitles/index.html#output-chinese-and-english-subtites-to-srt",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "output chinese and english subtites to srt",
    "text": "output chinese and english subtites to srt\n\n\nCode\ncn_correct_srt_txt=srt_txt |&gt; select(n,start,end,subtitle=correct_txt)\nen_correct_srt_txt=srt_txt |&gt; select(n,start,end,subtitle=correct_english_txt)\n\nsrt::write_srt(cn_correct_srt_txt,\"corrected_cn_srt2.srt\",wrap = FALSE)\nsrt::write_srt(en_correct_srt_txt,\"corrected_en_srt2.srt\",wrap = FALSE)"
  },
  {
    "objectID": "posts/AI_subtitles/index.html#check-mp3-duration",
    "href": "posts/AI_subtitles/index.html#check-mp3-duration",
    "title": "使用AI给视频自动生成中英文字幕",
    "section": "check mp3 duration",
    "text": "check mp3 duration\n\n\nCode\n# Load the MP3 file\n# Load the MP3 file\nmp3_file &lt;- readMP3(mp3_title)\n\n# Get the duration in seconds\nduration_mins &lt;- (length(mp3_file@left) / mp3_file@samp.rate)/60\nduration_mins"
  },
  {
    "objectID": "posts/AI_podcast/index.html",
    "href": "posts/AI_podcast/index.html",
    "title": "使用AI给播客语音转文字并作摘要",
    "section": "",
    "text": "Article abstract for podcast like firstory/poddtoppen/小宇宙FM\nCode\n#pak::pkg_install('tuneR')\nlibrary(ellmer)\nlibrary(tidyverse)\nlibrary(srt)\nlibrary(openxlsx)\nlibrary(readxl)\nlibrary(lares)\nlibrary(tuneR)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(av)"
  },
  {
    "objectID": "posts/AI_podcast/index.html#define-model",
    "href": "posts/AI_podcast/index.html#define-model",
    "title": "使用AI给播客语音转文字并作摘要",
    "section": "define model",
    "text": "define model\n\n\nCode\nchat_gemini_model&lt;- chat_gemini(\n  system_prompt = \"你是一个中文，英文，威士忌专家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model\n\n\n\n\nCode\n#testing model connection\nchat_result=chat_gemini_model$chat(\"hello\")\nchat_result"
  },
  {
    "objectID": "posts/AI_podcast/index.html#run-model",
    "href": "posts/AI_podcast/index.html#run-model",
    "title": "使用AI给播客语音转文字并作摘要",
    "section": "Run model",
    "text": "Run model\n\n\nCode\nsrt_txt0=read_srt('text.srt')\nsrt_txt2=srt_txt0$subtitle|&gt; as.character()\n\n\n\n\nCode\nlength(srt_txt2)\n\n\n\n\nCode\nprompt_text=paste0('请给以下文字作500字内摘要：',srt_txt2)\nsummary_text=chat_gemini_model$chat(prompt_text)\n\n\n\n\nCode\nsummary_text |&gt; tibble() |&gt; write_delim('summary.txt')"
  },
  {
    "objectID": "posts/AI_podcast/index.html#define-model-1",
    "href": "posts/AI_podcast/index.html#define-model-1",
    "title": "使用AI给播客语音转文字并作摘要",
    "section": "define model",
    "text": "define model\n\n\nCode\nchat_gemini_model&lt;- chat_gemini(\n  system_prompt = \"你是一个中文和英文的威士忌专家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model"
  },
  {
    "objectID": "posts/AI_podcast/index.html#run-model-1",
    "href": "posts/AI_podcast/index.html#run-model-1",
    "title": "使用AI给播客语音转文字并作摘要",
    "section": "Run model",
    "text": "Run model\n\n\nCode\nprompt_text=paste0('请更正以下文字的错别字，并且改正胡云为壶云，希游记为嬉游忌,Wish Jokey为WhisJockey,不要空白行',summary_text)\ncorrect_summary_text=chat_gemini_model$chat(prompt_text)\n\n\n\n\nCode\ncorrect_summary_text |&gt; str_replace_all('\\n\\n','\\n')|&gt; tibble() |&gt; write_delim('correct_summary2.txt')"
  },
  {
    "objectID": "posts/AI_podcast/index.html#define-model-2",
    "href": "posts/AI_podcast/index.html#define-model-2",
    "title": "使用AI给播客语音转文字并作摘要",
    "section": "define model",
    "text": "define model\n\n\nCode\nchat_gemini_model&lt;- chat_gemini(\n  system_prompt = \"你是一个中文和英文的威士忌专家\",\n  turns = NULL,\n  # base_url = \"https://generativelanguage.googleapis.com/v1beta\",\n  api_key = keyring::key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  #model = \"gemini-2.5-pro-exp-03-25\",\n  #api_args = list(),\n  #echo = NULL\n)\nchat_gemini_model"
  },
  {
    "objectID": "posts/AI_podcast/index.html#run-model-2",
    "href": "posts/AI_podcast/index.html#run-model-2",
    "title": "使用AI给播客语音转文字并作摘要",
    "section": "Run model",
    "text": "Run model\n\n\nCode\nsrt_txt_format=read.delim('text.srt')\n\n\n\n\nCode\nprompt_text=paste0('下面的内容是srt文档。请按每5分钟做一个摘要，再更正以下文字，胡云为壶云，希游记为嬉游忌,Wish Jokey为WhisJockey',srt_txt_format)\ncorrect_summary_text=chat_gemini_model$chat(prompt_text)\n\n\n\n\nCode\ncorrect_summary_text|&gt; tibble() |&gt; write_delim('correct_srt_summary.txt')"
  },
  {
    "objectID": "posts/send_email/index.html",
    "href": "posts/send_email/index.html",
    "title": "使用代码发邮件",
    "section": "",
    "text": "Using R or Python to send email"
  },
  {
    "objectID": "posts/send_email/index.html#load-library",
    "href": "posts/send_email/index.html#load-library",
    "title": "使用代码发邮件",
    "section": "load library",
    "text": "load library\n\n\nCode\nlibrary(blastula)\nlibrary(keyring)"
  },
  {
    "objectID": "posts/send_email/index.html#create-smtp-credentials",
    "href": "posts/send_email/index.html#create-smtp-credentials",
    "title": "使用代码发邮件",
    "section": "create smtp credentials",
    "text": "create smtp credentials\n\ngmail\n\n\nCode\ncreate_smtp_creds_key(\n  id = \"gmail001_creds\",\n  provider = \"gmail\",\n  user = \"verykoala@gmail.com\",\n  overwrite = TRUE\n  )\n\n\n\n\noutlook\n\n\nCode\n# create_smtp_creds_key(\n#   id = \"outlook001_creds\",\n#   provider = \"outlook\",\n#   user = \"jcpartner@outlook.com\",\n#   overwrite = TRUE\n#   )\n\ncreate_smtp_creds_file(file = \"ggnot_throwaway_creds\",\n                       user = \"jcpartner@outlook.com\",\n                       provider = \"outlook\")\n\n\n\n\nCode\n#delete_credential_key(\"gmail001_creds\")\n\n\n\n\nCode\nview_credential_keys()"
  },
  {
    "objectID": "posts/send_email/index.html#email-content",
    "href": "posts/send_email/index.html#email-content",
    "title": "使用代码发邮件",
    "section": "email content",
    "text": "email content\n\n\nCode\nlibrary(blastula)\nmsg=compose_email(\n  body = md(\n  \"Hi there 👋,\n  \n  This is an email to let you now thatrunning job **finished**.\n\n  Best,&lt;br&gt;\n  Tony\"\n  )\n)\n\nmsg"
  },
  {
    "objectID": "posts/send_email/index.html#send-email",
    "href": "posts/send_email/index.html#send-email",
    "title": "使用代码发邮件",
    "section": "send email",
    "text": "send email\n\nsend from gmail\n\n\nCode\nmsg %&gt;% \n  smtp_send(\n    from = 'verykoala@gmail.com',\n    to = \"jcflyingco@outlook.com\",\n    subject = \"Testing the email function\",\n    credentials = creds_key(id = \"gmail001_creds\")\n  )\n\n\n\n\nsend from outlook\n\n\nCode\nlibrary(Microsoft365R)\noutl &lt;- get_personal_outlook()\n\n\n\n\nCode\n# list the most recent emails in your Inbox\n#outl$list_emails()\n\n\n\n\nCode\nem &lt;- outl$create_email(msg, subject=\"Hello\", to=\"jcflyingco@outlook.com\")\n\n\n\n\nCode\nem$send()"
  },
  {
    "objectID": "posts/send_email/index.html#send-email-with-quarto-content",
    "href": "posts/send_email/index.html#send-email-with-quarto-content",
    "title": "使用代码发邮件",
    "section": "send email with quarto content",
    "text": "send email with quarto content\n\n\nCode\nemail_obj=render_email('.quarto_email.Rmd')\n\n\n\n\nCode\nemail_obj\n\n\n\nsend from gmail\n\n\nCode\nemail_obj%&gt;% \n  smtp_send(\n    from = 'verykoala@gmail.com',\n    to = \"jcflyingco@outlook.com\",\n    subject = \"Testing the email function\",\n    credentials = creds_key(id = \"gmail001_creds\")\n  )\n\n\n\n\nsend from outlook\n\n\nCode\nem &lt;- outl$create_email(email_obj, subject=\"Hello\", to=\"jcflyingco@outlook.com\")\nem$send()"
  },
  {
    "objectID": "posts/send_email/index.html#step-1-create-smtp-credentials",
    "href": "posts/send_email/index.html#step-1-create-smtp-credentials",
    "title": "使用代码发邮件",
    "section": "Step 1 create smtp credentials",
    "text": "Step 1 create smtp credentials\n\ngmail\n\n\nCode\ncreate_smtp_creds_key(\n  id = \"gmail001_creds\",\n  provider = \"gmail\",\n  user = \"verykoala@gmail.com\",\n  overwrite = TRUE\n  )\n\n\n\n\noutlook\n\n\nCode\n# create_smtp_creds_key(\n#   id = \"outlook001_creds\",\n#   provider = \"outlook\",\n#   user = \"jcpartner@outlook.com\",\n#   overwrite = TRUE\n#   )\n\ncreate_smtp_creds_file(file = \"ggnot_throwaway_creds\",\n                       user = \"jcpartner@outlook.com\",\n                       provider = \"outlook\")\n\n\n\n\nCode\n#delete_credential_key(\"gmail001_creds\")\n\n\n\n\nCode\nview_credential_keys()"
  },
  {
    "objectID": "posts/send_email/index.html#step-2-email-content",
    "href": "posts/send_email/index.html#step-2-email-content",
    "title": "使用代码发邮件",
    "section": "Step 2 email content",
    "text": "Step 2 email content\n\n\nCode\nlibrary(blastula)\nmsg=compose_email(\n  body = md(\n  \"Hi there 👋,\n  \n  This is an email to let you now thatrunning job **finished**.\n\n  Best,&lt;br&gt;\n  Tony\"\n  )\n)\n\nmsg"
  },
  {
    "objectID": "posts/send_email/index.html#step-3-send-email",
    "href": "posts/send_email/index.html#step-3-send-email",
    "title": "使用代码发邮件",
    "section": "Step 3 send email",
    "text": "Step 3 send email\n\nsend from gmailsend from outlook\n\n\n\n\nCode\nmsg %&gt;% \n  smtp_send(\n    from = 'verykoala@gmail.com',\n    to = \"jcflyingco@outlook.com\",\n    subject = \"Testing the email function\",\n    credentials = creds_key(id = \"gmail001_creds\")\n  )\n\n\n\n\n\n\nCode\nlibrary(Microsoft365R)\noutl &lt;- get_personal_outlook()\n\n\n\n\nCode\n# list the most recent emails in your Inbox\n#outl$list_emails()\n\n\n\n\nCode\nem &lt;- outl$create_email(msg, subject=\"Hello\", to=\"jcflyingco@outlook.com\")\n\n\n\n\nCode\nem$send()"
  },
  {
    "objectID": "posts/send_email/index.html#step3-option-b-send-email-with-quarto-content",
    "href": "posts/send_email/index.html#step3-option-b-send-email-with-quarto-content",
    "title": "使用代码发邮件",
    "section": "Step3 (option B) send email with quarto content",
    "text": "Step3 (option B) send email with quarto content\ncreate email Rmd file(.quarto_email.Rmd):\n\n\n\n\nCode\n\n.quarto_email.Rmd\n\n---\ntitle: \"Quarto Email\"\noutput: blastula::blastula_email \n---\n\n\n\n# tesing\n\ntesting\n\n\n# Reference:\nhttps://www.youtube.com/watch?v=PihKq1GPlcc\n\n\n\n\ncreate email\n\n\nCode\nemail_obj=render_email('.quarto_email.Rmd')\n\n\nView the email\n\n\nCode\nemail_obj\n\n\n\nsend from gmailsend from outlook\n\n\n\n\nCode\nemail_obj%&gt;% \n  smtp_send(\n    from = 'verykoala@gmail.com',\n    to = \"jcflyingco@outlook.com\",\n    subject = \"Testing the email function\",\n    credentials = creds_key(id = \"gmail001_creds\")\n  )\n\n\n\n\n\n\nCode\nem &lt;- outl$create_email(email_obj, subject=\"Hello\", to=\"jcflyingco@outlook.com\")\nem$send()"
  },
  {
    "objectID": "posts/web_scraping_in_Python/index.html",
    "href": "posts/web_scraping_in_Python/index.html",
    "title": "Web scraping in Python",
    "section": "",
    "text": "python web scraping with requests and BeautifulSoup\n\n\nCode\nimport requests\nfrom bs4 import BeautifulSoup\nfrom io import StringIO\nimport re\nimport pandas as pd\n\n\n\n\nReference"
  },
  {
    "objectID": "posts/run_ai_online/index.html#gemini-model",
    "href": "posts/run_ai_online/index.html#gemini-model",
    "title": "调用网络端AI模型",
    "section": "gemini model",
    "text": "gemini model\n\n\nCode\nfrom chatlas import ChatGoogle\n\nchat_google_model = ChatGoogle(\n  model = \"gemini-2.0-flash\",\n  api_key=keyring.get_password(\"system\", \"google_ai_api_key\"),\n  system_prompt = \"You are a whisky expert\",\n)\n\nchat_google_model\n\n\n\n\nCode\nchat_google_model.chat(\"translate following whisky tasting note to English:微酸，脏麦芽。菲特肯还是要找1988\")"
  },
  {
    "objectID": "posts/run_ai_online/index.html#local-ollama-model",
    "href": "posts/run_ai_online/index.html#local-ollama-model",
    "title": "调用网络端AI模型",
    "section": "local Ollama model",
    "text": "local Ollama model\n\n\nCode\nfrom chatlas import ChatOllama\n\nchat_llama_model = ChatOllama(\n  model=\"llama3.2\",\n  #api_key=keyring.get_password(\"system\", \"google_ai_api_key\"),\n  system_prompt = \"You are a whisky expert\",\n)\n\nchat_llama_model\n\n\n\n\nCode\nchat_llama_model.chat(\"translate following whisky tasting note to English:微酸，脏麦芽。菲特肯还是要找1988\")\n\n\n\n\nCode\ntoken_usage()"
  },
  {
    "objectID": "posts/path_managment/index.html",
    "href": "posts/path_managment/index.html",
    "title": "路径管理",
    "section": "",
    "text": "Since windows and mac have different file path, we use package to manage the file path."
  },
  {
    "objectID": "posts/path_managment/index.html#show-current-working-directory",
    "href": "posts/path_managment/index.html#show-current-working-directory",
    "title": "路径管理",
    "section": "show current working directory",
    "text": "show current working directory\n\n\nCode\nhere()"
  },
  {
    "objectID": "posts/path_managment/index.html#show-all-file-in-the-current-directory",
    "href": "posts/path_managment/index.html#show-all-file-in-the-current-directory",
    "title": "路径管理",
    "section": "show all file in the current directory",
    "text": "show all file in the current directory\n\n\nCode\nlist.files(here())"
  },
  {
    "objectID": "posts/path_managment/index.html#show-one-file-path",
    "href": "posts/path_managment/index.html#show-one-file-path",
    "title": "路径管理",
    "section": "show one file path",
    "text": "show one file path\nhere.png in images folder\n\n\nCode\nimage_path=here('posts/path_managment/images','here.png')\nimage_path"
  },
  {
    "objectID": "posts/path_managment/index.html#show-project-directory",
    "href": "posts/path_managment/index.html#show-project-directory",
    "title": "路径管理",
    "section": "show project directory",
    "text": "show project directory\n\n\nCode\nhere()"
  },
  {
    "objectID": "posts/path_managment/index.html#show-all-file-in-the-project-directory",
    "href": "posts/path_managment/index.html#show-all-file-in-the-project-directory",
    "title": "路径管理",
    "section": "show all file in the project directory",
    "text": "show all file in the project directory\n\n\nCode\nlist.files(here())"
  },
  {
    "objectID": "posts/AI_create_code/index.html",
    "href": "posts/AI_create_code/index.html",
    "title": "AI生成代码",
    "section": "",
    "text": "https://gallery.shinyapps.io/assistant/\n\n\ncreate a shinyapp using R with single file app.R which can use python package yt-dlp to download youtube video.\n1.yt-dlp command need to have –cookies-from-browser chrome.\n2 User input: a.youtube video url b.using cookies options:–cookies-from-browser chrome or –cookies-from-browser firefox c.download file as mp4 format or mp3 format in a subfolder called “download” in the same directory as the shinyapp\n3.please display the final system command at the left side of the shinyapp after Play Downloaded File.\n4.add a a real time progress bar to show the download progress by add a progress indicator is to put withProgress() inside of the reactive(), observer(), or renderXx() function\n5.add a video player or mp3 player into the shinyapp when finish download,auto load the new downloaded mp4 or mp3 in shinyapp so we can play the downloaded file in shinyapp,also include a options for user to select the previous downloaded file(video or mp3) to play"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-with-chrome-cookies",
    "href": "posts/youtube_yt-dlp/index.html#download-video-with-chrome-cookies",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video with chrome cookies",
    "text": "download video with chrome cookies\nyt-dlp --cookies-from-browser chrome 'https://www.youtube.com/watch?v=yBl8UdSav5Y'"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-with-firefox-cookies",
    "href": "posts/youtube_yt-dlp/index.html#download-video-with-firefox-cookies",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video with firefox cookies",
    "text": "download video with firefox cookies\nYou may also use a conforming browser extension for exporting cookies, such as Get cookies.txt LOCALLY for Chrome\nyt-dlp --cookies-from-browser firefox 'https://www.youtube.com/watch?v=yBl8UdSav5Y'"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#download-video-with-export-cookies",
    "href": "posts/youtube_yt-dlp/index.html#download-video-with-export-cookies",
    "title": "Youtube下载工具：yt-dlp",
    "section": "download video with export cookies",
    "text": "download video with export cookies\nYou may also use a conforming browser extension for exporting cookies, such as Get cookies.txt LOCALLY for Chrome"
  },
  {
    "objectID": "posts/youtube_yt-dlp/index.html#get-video-titles",
    "href": "posts/youtube_yt-dlp/index.html#get-video-titles",
    "title": "Youtube下载工具：yt-dlp",
    "section": "get video titles",
    "text": "get video titles\nyt-dlp --cookies-from-browser firefox --get-title 'https://www.youtube.com/watch?v=yBl8UdSav5Y'"
  },
  {
    "objectID": "posts/display_table/index.html",
    "href": "posts/display_table/index.html",
    "title": "表格展示",
    "section": "",
    "text": "With the gt package, anyone can make wonderful-looking tables using the R/Python programming language.\n\nGT package\n\n\nRPython\n\n\n\n\nCode\nlibrary(gt)\nlibrary(dplyr) # Using dplyr for mutate, optional but convenient\nlibrary(gtExtras) # For image embedding\n\n\n\n\nCode\n#exibble\n\n\n\n\nCode\nexibble |&gt; gt() |&gt; opt_stylize(style=3,color = \"green\") |&gt; fmt_auto()\n\n\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n\n\n0.111\napricot\none\n2015-01-15\n13:35\n2018-01-01 02:22\n    49.95 \nrow_1\ngrp_a\n\n\n2.222\nbanana\ntwo\n2015-02-15\n14:40\n2018-02-02 14:33\n    17.95 \nrow_2\ngrp_a\n\n\n33.33\ncoconut\nthree\n2015-03-15\n15:45\n2018-03-03 03:44\n     1.39 \nrow_3\ngrp_a\n\n\n444.4\ndurian\nfour\n2015-04-15\n16:50\n2018-04-04 15:55\n65,100    \nrow_4\ngrp_a\n\n\n5,550\nNA\nfive\n2015-05-15\n17:55\n2018-05-05 04:00\n 1,325.81 \nrow_5\ngrp_b\n\n\nNA\nfig\nsix\n2015-06-15\nNA\n2018-06-06 16:11\n    13.255\nrow_6\ngrp_b\n\n\n777,000\ngrapefruit\nseven\nNA\n19:10\n2018-07-07 05:22\nNA\nrow_7\ngrp_b\n\n\n8.880 × 106\nhoneydew\neight\n2015-08-15\n20:20\nNA\n     0.44 \nrow_8\ngrp_b\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, md,exibble\nfrom great_tables.data import reactions\n\n\n\n\nCode\n#exibble\n\n\n\n\nCode\nGT(exibble).opt_stylize(style=3,color = \"green\")\n\n\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n\n\n0.1111\napricot\none\n2015-01-15\n13:35\n2018-01-01 02:22\n49.95\nrow_1\ngrp_a\n\n\n2.222\nbanana\ntwo\n2015-02-15\n14:40\n2018-02-02 14:33\n17.95\nrow_2\ngrp_a\n\n\n33.33\ncoconut\nthree\n2015-03-15\n15:45\n2018-03-03 03:44\n1.39\nrow_3\ngrp_a\n\n\n444.4\ndurian\nfour\n2015-04-15\n16:50\n2018-04-04 15:55\n65100.0\nrow_4\ngrp_a\n\n\n5550.0\n\nfive\n2015-05-15\n17:55\n2018-05-05 04:00\n1325.81\nrow_5\ngrp_b\n\n\n\nfig\nsix\n2015-06-15\n\n2018-06-06 16:11\n13.255\nrow_6\ngrp_b\n\n\n777000.0\ngrapefruit\nseven\n\n19:10\n2018-07-07 05:22\n\nrow_7\ngrp_b\n\n\n8880000.0\nhoneydew\neight\n2015-08-15\n20:20\n\n0.44\nrow_8\ngrp_b\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\nTable 1\norigin table:\n\n\nRPython\n\n\n\n\nCode\n# Load the necessary library\nlibrary(gt)\nlibrary(dplyr) # Using dplyr for mutate, optional but convenient\nlibrary(gtExtras) # For image embedding\n\n\n\n\nCode\n# 1. Create the data frame\n# Note: Storing percentages as numbers (0-100) for easier formatting\nhoosiers_data &lt;- data.frame(\n  TEAM = c(\"Wake Forest\", \"Indiana\", \"North Carolina\", \"Coppin St.\", \"Vermont\", \"New Mexico St.\"),\n  logo_url = c(\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/154.png\",      # Wake Forest\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/84.png\",       # Indiana\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/153.png\",      # North Carolina\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/2154.png\",     # Coppin St.\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/261.png\",     # Vermont\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/166.png\"       # New Mexico St.\n  ),\n  `3FG_Text` = c(\"17-61\", \"19-79\", \"20-60\", \"21-60\", \"22-89\", \"22-72\"), # Keep original text for display\n  `3FG%` = c(27.87, 24.05, 33.33, 35.00, 24.72, 30.56),\n  PER_GAME = c(2.83, 3.17, 3.33, 3.50, 3.67, 3.67),\n  SEED = c(4, NA, 6, 16, 16, 13),\n  ROUND = c(\"R64\", NA, \"R32\", \"R68\", \"R64\", \"R64\"),\n  YEAR = c(2009, 2024, 2014, 2008, 2010, 2014),\n  stringsAsFactors = FALSE # Good practice\n)\n\n\n\n\nCode\n# 2. Create the gt table\ngt_table &lt;- hoosiers_data %&gt;%\n  gt() %&gt;%\n  # --- Add Logos ---\n  gt_img_rows(columns = logo_url, height = 25) %&gt;% # Use URL column, set image height\n  # --- Move logo column ---\n  cols_move_to_start(columns = logo_url) %&gt;% # Place logo column first\n  # Add title and subtitle\n  tab_header(\n    title = \"History does not bode well for the Hoosiers\",\n    subtitle = \"Only one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\"\n  ) %&gt;%\n  # Create the spanner header over the shooting columns\n  tab_spanner(\n    label = \"Shooting\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME)\n  ) %&gt;%\n  # Format column labels\n  cols_label(\n    logo_url = \"\", # No header text for the logo column\n    TEAM = \"TEAM\",\n    `X3FG_Text` = \"3FG\", # Use the text column for display\n    `X3FG.` = \"3FG%\",\n    PER_GAME = \"PER GAME\",\n    SEED = \"SEED\",\n    ROUND = \"ROUND\",\n    YEAR = \"YEAR\"\n  ) %&gt;%\n  # Format the percentage column\n  fmt_percent(\n    columns = `X3FG.`,\n    decimals = 2,\n    scale_values = FALSE # Values are already 0-100\n  ) %&gt;%\n  # Format the 'PER GAME' column to two decimal places\n  fmt_number(\n    columns = PER_GAME,\n    decimals = 2\n  ) %&gt;%\n  # Replace NA values with \"???\"\n  sub_missing(\n    columns = c(SEED, ROUND),\n    missing_text = \"???\"\n  ) %&gt;%\n   # Align columns (optional, but often improves appearance)\n  cols_align(\n    align = \"center\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME, SEED, ROUND, YEAR)\n  ) %&gt;%\n  cols_align(\n    align = \"left\",\n    columns = TEAM\n  ) %&gt;%\n  # Highlight the Indiana row (using a light blue background as an example)\n  tab_style(\n    style = cell_fill(color = \"#ADD8E6\"), # AliceBlue, adjust as needed\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n  tab_style(\n    style = cell_borders(\n      sides = c(\"top\", 'bottom',\"left\", \"right\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(2)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`)\n  ) %&gt;%\n  # Add the source note\n  tab_source_note(\n    source_note = \"Viz. + Analysis by @andreweatherman\"\n  )%&gt;%\n  # Adjust width of the logo column if needed (optional)\n  cols_width(\n      logo_url ~ px(40) # Set logo column width to 40 pixels\n  )\ngt_table\n\n\n\n\n\n\n\n\nHistory does not bode well for the Hoosiers\n\n\nOnly one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\n\n\n\nTEAM\n\nShooting\n\nSEED\nROUND\nYEAR\n\n\n3FG\n3FG%\nPER GAME\n\n\n\n\n\nWake Forest\n17-61\n27.87%\n2.83\n4\nR64\n2009\n\n\n\nIndiana\n19-79\n24.05%\n3.17\n???\n???\n2024\n\n\n\nNorth Carolina\n20-60\n33.33%\n3.33\n6\nR32\n2014\n\n\n\nCoppin St.\n21-60\n35.00%\n3.50\n16\nR68\n2008\n\n\n\nVermont\n22-89\n24.72%\n3.67\n16\nR64\n2010\n\n\n\nNew Mexico St.\n22-72\n30.56%\n3.67\n13\nR64\n2014\n\n\n\nViz. + Analysis by @andreweatherman\n\n\n\n\n\n\n\n\n\nthe row Team Indiana background color is not correct,and also letter is not bold,So adjust it.\n\n\nCode\nlibrary(magick)\n\n# Read the image\nimg &lt;- image_read(\"images/my screenshots.png\")\n\n# Display the image to inspect it (optional, opens in a viewer)\n#image_browse(img)\n\n\n\n\nCode\n# Get image dimensions\nimg_info &lt;- image_info(img)\nprint(img_info)\n\n\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n1 PNG     1066    872 sRGB       TRUE    983185 57x57  \n\n\n\n\nCode\n# Crop a 50x50 pixel section from the Indiana row background\n# Adjust coordinates based on your image dimensions\nimg_cropped &lt;- image_crop(img, \"50x50+200+400\")\n\n# Display the cropped section to confirm (optional)\n#image_browse(img_cropped)\n\n\n\n\nCode\n# Convert the cropped image to a raster\nimg_raster &lt;- as.raster(img_cropped)\n\n# Convert the raster to a matrix of colors\nimg_matrix &lt;- as.matrix(img_raster)\n\n# Extract RGB values from the matrix\n# col2rgb expects a vector of colors, so we flatten the matrix\nrgb_values &lt;- col2rgb(img_matrix)\n\n# Calculate the average RGB values (to approximate the dominant background color)\navg_rgb &lt;- rowMeans(rgb_values, na.rm = TRUE)\n\n# Convert the average RGB to Hex\n# col2rgb returns values in the range 0-255, so we can use them directly\nhex_code &lt;- rgb(avg_rgb[1], avg_rgb[2], avg_rgb[3], maxColorValue = 255)\n\n# Print the Hex code\nprint(hex_code)\n\n\n[1] \"#70AACA\"\n\n\n\n\nCode\n# 2. Create the gt table\ngt_table &lt;- hoosiers_data %&gt;%\n  gt() %&gt;%\n  # --- Add Logos ---\n  gt_img_rows(columns = logo_url, height = 25) %&gt;% # Use URL column, set image height\n  # --- Move logo column ---\n  cols_move_to_start(columns = logo_url) %&gt;% # Place logo column first\n  # Add title and subtitle\n  tab_header(\n    title = \"History does not bode well for the Hoosiers\",\n    subtitle = \"Only one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\"\n  ) %&gt;%\n  # Create the spanner header over the shooting columns\n  tab_spanner(\n    label = \"Shooting\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME)\n  ) %&gt;%\n  # Format column labels\n  cols_label(\n    logo_url = \"\", # No header text for the logo column\n    TEAM = \"TEAM\",\n    `X3FG_Text` = \"3FG\", # Use the text column for display\n    `X3FG.` = \"3FG%\",\n    PER_GAME = \"PER GAME\",\n    SEED = \"SEED\",\n    ROUND = \"ROUND\",\n    YEAR = \"YEAR\"\n  ) %&gt;%\n  # Format the percentage column\n  fmt_percent(\n    columns = `X3FG.`,\n    decimals = 2,\n    scale_values = FALSE # Values are already 0-100\n  ) %&gt;%\n  # Format the 'PER GAME' column to two decimal places\n  fmt_number(\n    columns = PER_GAME,\n    decimals = 2\n  ) %&gt;%\n  # Replace NA values with \"???\"\n  sub_missing(\n    columns = c(SEED, ROUND),\n    missing_text = \"???\"\n  ) %&gt;%\n   # Align columns (optional, but often improves appearance)\n  cols_align(\n    align = \"center\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME, SEED, ROUND, YEAR)\n  ) %&gt;%\n  cols_align(\n    align = \"left\",\n    columns = TEAM\n  ) %&gt;%\n  # Highlight the Indiana row (using a light blue background as an example)\n  tab_style(\n    \n    style = cell_fill(color = \"#70AACA\"), # AliceBlue, adjust as needed\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n   tab_style(\n     style = cell_text(weight = \"bold\"),\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n  ### dotted line\n  tab_style(\n    style = cell_borders(\n      sides = c(\"top\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`,rows = TEAM == \"Wake Forest\") # Apply to Indiana row)\n  ) %&gt;%\n    ### dotted line\n    tab_style(\n    style = cell_borders(\n      sides = c(\"bottom\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`,rows = TEAM == \"New Mexico St.\")\n  ) %&gt;%\n  ### dotted line\n    tab_style(\n    style = cell_borders(\n      sides = c(\"left\",\"right\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`)\n  ) %&gt;%\n  # Add the source note\n  tab_source_note(\n    source_note = \"Viz. + Analysis by @andreweatherman\"\n  )%&gt;%\n  # Adjust width of the logo column if needed (optional)\n  cols_width(\n      logo_url ~ px(40) # Set logo column width to 40 pixels\n  )\ngt_table\n\n\n\n\n\n\n\n\nHistory does not bode well for the Hoosiers\n\n\nOnly one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\n\n\n\nTEAM\n\nShooting\n\nSEED\nROUND\nYEAR\n\n\n3FG\n3FG%\nPER GAME\n\n\n\n\n\nWake Forest\n17-61\n27.87%\n2.83\n4\nR64\n2009\n\n\n\nIndiana\n19-79\n24.05%\n3.17\n???\n???\n2024\n\n\n\nNorth Carolina\n20-60\n33.33%\n3.33\n6\nR32\n2014\n\n\n\nCoppin St.\n21-60\n35.00%\n3.50\n16\nR68\n2008\n\n\n\nVermont\n22-89\n24.72%\n3.67\n16\nR64\n2010\n\n\n\nNew Mexico St.\n22-72\n30.56%\n3.67\n13\nR64\n2014\n\n\n\nViz. + Analysis by @andreweatherman\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport polars as pl\nimport pandas as pd\nimport numpy as np\nfrom great_tables import GT, md, html, loc, style, px# Import necessary components\n\n\n\n\nCode\n# 1. Create the Pandas DataFrame\n# Using a dictionary preserves column names with special characters/spaces\nhoosiers_data = pd.DataFrame({\n    \"TEAM\": [\"Wake Forest\", \"Indiana\", \"North Carolina\", \"Coppin St.\", \"Vermont\", \"New Mexico St.\"],\n    \"logo_url\": [\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/154.png\",      # Wake Forest\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/84.png\",       # Indiana\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/153.png\",      # North Carolina\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/2154.png\",     # Coppin St.\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/261.png\",      # Vermont\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/166.png\"       # New Mexico St.\n    ],\n    \"3FG_Text\": [\"17-61\", \"19-79\", \"20-60\", \"21-60\", \"22-89\", \"22-72\"], # Keep original text\n    \"3FG%\": [27.87, 24.05, 33.33, 35.00, 24.72, 30.56],\n    \"PER_GAME\": [2.83, 3.17, 3.33, 3.50, 3.67, 3.67],\n    \"SEED\": [4, np.nan, 6, 16, 16, 13], # Use numpy.nan for missing values\n    \"ROUND\": [\"R64\", np.nan, \"R32\", \"R68\", \"R64\", \"R64\"],\n    \"YEAR\": [2009, 2024, 2014, 2008, 2010, 2014],\n})\n\nhoosiers_data_pl=pl.from_pandas(hoosiers_data)\n\n\n\n\nCode\n# 2. Create the great_tables table (Using lambda for older versions)\n# NOTE: This assumes fmt_image and loc.body exist in your version.\n# If you get errors on those, your version might be very old.\ngt_table = (\n    GT(data=hoosiers_data_pl)\n    .fmt_image(columns=\"logo_url\", height=25)\n    .cols_move_to_start(columns=[\"logo_url\"])\n    .tab_header(\n        title=\"History does not bode well for the Hoosiers\",\n        subtitle=\"Only one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\"\n    )\n    .tab_spanner(\n        label=\"Shooting\",\n        columns=[\"3FG_Text\", \"3FG%\", \"PER_GAME\"]\n    )\n    .cols_label(\n        logo_url = \"\",\n        TEAM = \"TEAM\",\n        **{\"3FG_Text\": \"3FG\"},\n        **{\"3FG%\": \"3FG%\"},\n        PER_GAME = \"PER GAME\",\n        SEED = \"SEED\",\n        ROUND = \"ROUND\",\n        YEAR = \"YEAR\"\n    )\n    .fmt_percent(\n        columns=\"3FG%\",\n        decimals=2,\n        scale_values=False\n    )\n    .fmt_number(\n        columns=\"PER_GAME\",\n        decimals=2\n    )\n    .sub_missing(\n        columns=[\"SEED\", \"ROUND\"],\n        missing_text=\"???\"\n    )\n    .cols_align(\n        align=\"center\",\n        columns=[\"3FG_Text\", \"3FG%\", \"PER_GAME\", \"SEED\", \"ROUND\", \"YEAR\"]\n    )\n    .cols_align(\n        align=\"left\",\n        columns=\"TEAM\"\n    )\n    # Highlight the Indiana row (Using lambda function)\n    .tab_style(\n        style=style.fill(color=\"#70AACA\"),\n        # pandas way   Use a lambda function to define the row condition\n      # locations=[loc.body(rows=lambda x: x[\"TEAM\"] == \"Indiana\")]\n        locations=[loc.body(rows=pl.col(\"TEAM\")  == \"Indiana\")]\n    )\n    # Make letter bold the Indiana row (Using lambda function)\n    .tab_style(\n        style=style.text(weight = \"bold\"),\n        # pandas way   Use a lambda function to define the row condition\n      # locations=[loc.body(rows=lambda x: x[\"TEAM\"] == \"Indiana\")]\n        locations=[loc.body(rows=pl.col(\"TEAM\")  == \"Indiana\")]\n    )\n\n    # Add the source note\n    .tab_source_note(\n        source_note=md(\"Viz. + Analysis by @andreweatherman\")\n    )\n     # Adjust width of the logo column\n     .cols_width(\n        logo_url = px(40)\n     )\n)\n\n\n\n\nCode\n# save:\n# gt_table.save(\"hoosiers_table.html\")\n\n# To display(In Jupyter):\ngt_table # In Jupyter\n\n\n\n\n\n\n\n\nHistory does not bode well for the Hoosiers\n\n\nOnly one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\n\n\n\nTEAM\nShooting\nSEED\nROUND\nYEAR\n\n\n3FG\n3FG%\nPER GAME\n\n\n\n\n\nWake Forest\n17-61\n27.87%\n2.83\n4.0\nR64\n2009\n\n\n\nIndiana\n19-79\n24.05%\n3.17\n???\n???\n2024\n\n\n\nNorth Carolina\n20-60\n33.33%\n3.33\n6.0\nR32\n2014\n\n\n\nCoppin St.\n21-60\n35.00%\n3.50\n16.0\nR68\n2008\n\n\n\nVermont\n22-89\n24.72%\n3.67\n16.0\nR64\n2010\n\n\n\nNew Mexico St.\n22-72\n30.56%\n3.67\n13.0\nR64\n2014\n\n\n\nViz. + Analysis by @andreweatherman\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\nTable 2\norigin table:\n\n\nRPython\n\n\n\n\nCode\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(scales)\nlibrary(lubridate)\n\n\n\n\nCode\n# URL for the data\ndata_url &lt;- \"https://github.com/machow/coffee-sales-data/raw/main/data/coffee-sales.ndjson\"\ncoffee_data_raw =stream_in(url(data_url), simplifyDataFrame = TRUE)\n\n\n\n Found 14 records...\n Imported 14 records. Simplifying...\n\n\n\nPrompt gemini 2.5\nusing R GT package to recreate this table.data source from https://github.com/machow/coffee-sales-data/blob/main/data/coffee-sales.ndjson\nStep 1 load package and read in data from github library(gt) library(gtExtras) library(dplyr) library(jsonlite) library(scales) library(lubridate) data_url &lt;- “https://github.com/machow/coffee-sales-data/raw/main/data/coffee-sales.ndjson” coffee_data_raw =stream_in(url(data_url), simplifyDataFrame = TRUE)\nno need to no need to Aggregate data for the table.all number are given\nStep 2 create GT table,using cols_nanoplot() to add the bar plot for column Monthly Sales\nno need to create the icon at left side\nSince gt v0.3.0, columns = vars(...) has been deprecated. • Please use columns = c(...) instead.\n\n\nCode\n# Step 1: Load necessary packages\n# ----------------------------------------------------\n# Ensure gt and gtExtras are installed and loaded\n# install.packages(\"gt\")\n# install.packages(\"gtExtras\")\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(dplyr) # Still useful for data frame creation/manipulation\nlibrary(tibble) # Good for defining data frames\n\n# Step 2: Define the data frame manually based on the image\n# ----------------------------------------------------\n# Note:\n# - Amounts are entered as numbers (e.g., 904000 for $904K, 2.05e6 for $2.05M)\n#   so fmt_currency(scale_suffixing = TRUE) works correctly.\n# - Percentages are entered as proportions (e.g., 0.03 for 3%) for fmt_percent.\n# - Monthly Sales data needs to be a list of numeric vectors. Since we don't\n#   have the exact monthly data, we create approximate data representative\n#   of the bar patterns shown in the image. The length (14) is arbitrary.\n\n# coffee_table_data &lt;- tibble(\n#   Product = c(\"Grinder\", \"Moka pot\", \"Cold brew\", \"Filter\", \"Drip machine\",\n#               \"AeroPress\", \"Pour over\", \"French press\", \"Cezve\", \"Chemex\",\n#               \"Scale\", \"Kettle\", \"Espresso Machine\"),\n#   Revenue_Amount = c(904000, 2050000, 289000, 404000, 2630000,\n#                      2600000, 846000, 1110000, 2510000, 3140000,\n#                      3800000, 756000, 8410000),\n#   Revenue_Percent = c(0.03, 0.07, 0.01, 0.01, 0.09,\n#                       0.09, 0.03, 0.04, 0.09, 0.11,\n#                       0.13, 0.03, 0.29),\n#   Profit_Amount = c(568000, 181000, 242000, 70000, 1370000,\n#                     1290000, 365000, 748000, 1970000, 818000,\n#                     2910000, 618000, 3640000),\n#   Profit_Percent = c(0.04, 0.01, 0.02, 0.00, 0.09,\n#                      0.09, 0.02, 0.05, 0.13, 0.06,\n#                      0.20, 0.04, 0.25),\n#   # --- Estimated Monthly Sales Data (List Column) ---\n#   # Create lists of numbers that approximate the bar patterns\n#   Monthly_Sales = list(\n#     c(8,9,8,9,8,9,8,9,8,9,8,9,8,9),         # Grinder (Consistent high)\n#     c(7,8,7,8,7,8,7,8,7,8,7,8,7,8),         # Moka pot (Consistent medium-high)\n#     c(2,3,4,5,6,7,8,7,6,5,4,3,2,1),         # Cold brew (Peak in middle)\n#     c(6,7,6,7,6,7,6,7,6,7,6,7,6,7),         # Filter (Consistent medium)\n#     c(8,9,8,9,8,9,8,9,8,9,8,9,8,9),         # Drip machine (Consistent high)\n#     c(8,9,8,9,8,9,8,9,8,9,8,9,8,9),         # AeroPress (Consistent high)\n#     c(5,6,7,6,5,6,7,6,5,6,7,6,5,6),         # Pour over (Slight variation medium)\n#     c(7,8,7,8,7,8,7,8,7,8,7,8,7,8),         # French press (Consistent medium-high)\n#     c(6,7,8,7,6,7,8,7,6,7,8,7,6,7),         # Cezve (Slight variation medium-high)\n#     c(7,8,9,8,7,8,9,8,7,8,9,8,7,8),         # Chemex (Slight variation high)\n#     c(8,9,8,9,8,9,8,9,8,9,8,9,8,9),         # Scale (Consistent high)\n#     c(7,8,7,8,7,8,7,8,7,8,7,8,7,8),         # Kettle (Consistent medium-high)\n#     c(1,2,3,4,5,6,7,7,6,6,5,5,4,4)          # Espresso Machine (Ramp up, plateau/dip)\n#   )\n# )\n\ncoffee_table_data=coffee_data_raw |&gt; rename(\n  Product=product,\n  Revenue_Amount=revenue_dollars,\n  Revenue_Percent=revenue_pct,\n  Profit_Amount=profit_dollars,\n  Profit_Percent=profit_pct,\n  Monthly_Sales=monthly_sales\n)\n\n# Step 3: Create the GT table\n# --------------------------------------------------\n\ncoffee_gt_table_manual &lt;- coffee_table_data %&gt;%\n  # Initialize gt table, using 'Product' column as row labels (stub)\n  gt(rowname_col = \"icon\") %&gt;%\n\n  # --- Add Column Spanners ---\n  tab_spanner(\n    label = \"Revenue\",\n    columns = c(Revenue_Amount, Revenue_Percent)\n  ) %&gt;%\n  tab_spanner(\n    label = \"Profit\",\n    columns = c(Profit_Amount, Profit_Percent)\n  ) %&gt;%\n\n  # --- Format Columns ---\n  # Format Amounts using short scale (K, M)\n  fmt_currency(\n      columns = c(Revenue_Amount, Profit_Amount),\n      currency = \"USD\", # Assuming USD\n      decimals = 1,     # One decimal place shown in image for totals, apply consistently\n      suffixing = TRUE # Key for K, M suffixes\n  ) %&gt;%\n  # Format percentage columns\n  fmt_percent(\n      columns = c(Revenue_Percent, Profit_Percent),\n      decimals = 0 # Zero decimal places\n  ) %&gt;%\n\n  # --- Add Nanoplot (Bar Chart) ---\n  cols_nanoplot(\n     columns = Monthly_Sales,\n     plot_type = \"bar\",\n     options = nanoplot_options(\n         data_bar_fill_color = \"steelblue\",\n         data_bar_stroke_color = \"steelblue\"\n     )\n  ) %&gt;%\n\n  # --- Add Grand Summary Row ---\n  # Calculate sums directly from the numeric columns we created\n  # Verify these match the totals in the image ($29.4M, 100%, $14.8M, 100%)\n  # grand_summary_rows(\n  #   columns = c(Revenue_Amount, Profit_Amount),\n  #   fns = list(\n  #     Total = ~sum(., na.rm = TRUE)\n  #   ),\n  #   formatter = fmt_currency,\n  #    #currency = \"USD\",\n  #    decimals = 1,\n  #    suffixing = TRUE\n  # ) %&gt;%\n  #  grand_summary_rows(\n  #   columns = c(Revenue_Percent, Profit_Percent),\n  #   fns = list(\n  #       Total = ~sum(., na.rm = TRUE)\n  #   ),\n  #   formatter = fmt_percent,\n  #   decimals = 0\n  #  ) %&gt;%\n\n  # --- Add Title and Labels ---\n  tab_header(\n    title = \"Sales of Coffee Equipment\"\n  ) %&gt;%\n  cols_label(\n    Revenue_Amount = \"Amount\",\n    Revenue_Percent = \"Percent\",\n    Profit_Amount = \"Amount\",\n    Profit_Percent = \"Percent\",\n    Monthly_Sales = \"Monthly Sales\"\n  ) %&gt;%\n\n  # --- Styling ---\n   cols_width(\n      c(Product) ~ px(150),\n      contains(\"Amount\") ~ px(100),\n      contains(\"Percent\") ~ px(80),\n      Monthly_Sales ~ px(150)\n   ) %&gt;%\n   tab_style(\n      style = cell_text(align = \"center\", weight = \"bold\"),\n      locations = list(\n          cells_column_spanners(),\n          cells_column_labels()\n          )\n   ) %&gt;%\n   cols_align(\n      align = \"right\",\n      columns = c(Revenue_Amount, Profit_Amount, Revenue_Percent, Profit_Percent)\n   ) %&gt;%\n    cols_align( # Center align product names (stub) and monthly sales plot\n      align = \"center\",\n      columns = c(Product, Monthly_Sales)\n   ) %&gt;%\n   cols_align( # Left align product names (stub)\n      align = \"left\",\n      columns = Product\n   ) %&gt;%\n   tab_options(\n       column_labels.padding = px(5),\n       data_row.padding = px(5),\n       summary_row.padding = px(5), # Controls grand summary padding too\n       grand_summary_row.padding = px(5)\n   )\n\n\n\n\nCode\n# --- Display the table ---\ncoffee_gt_table_manual |&gt; tab_style(\n        style= list(cell_fill(color =\"aliceblue\")),\n        locations=cells_body(columns = c(Revenue_Amount, Revenue_Percent))\n        )|&gt; tab_style(\n        style= list(cell_fill(color =\"papayawhip\")),\n        locations=cells_body(columns = c(Profit_Amount, Profit_Percent))\n    )|&gt; tab_style(\n        style= list(cell_text(weight=\"bold\")),\n        locations=cells_body(rows = Revenue_Amount == max(Revenue_Amount))\n    ) |&gt; fmt_image(\"icon\", path=\"assets\") |&gt; sub_missing(missing_text=\"\")\n\n\n\n\n\n\n\n\nSales of Coffee Equipment\n\n\n\nProduct\n\nRevenue\n\n\nProfit\n\nnanoplots\n\n\nAmount\nPercent\nAmount\nPercent\n\n\n\n\n\nGrinder\n$904.5K\n3%\n$568.0K\n4%\n\n\n     \n\n               765 0   521   494   596   613   667   748   765   686   607   594   568   751\n\n\n\n\n\nMoka pot\n$2.0M\n7%\n$181.1K\n1%\n\n\n     \n\n               6.87K 0   4.73K   4.74K   4.79K   5.51K   6.16K   6.62K   6.87K   6.03K   5.30K   4.88K   4.65K   6.28K\n\n\n\n\n\nCold brew\n$288.8K\n1%\n$241.8K\n2%\n\n\n     \n\n               2.70K 0   244   249   438   981   1.77K   2.70K   2.61K   2.35K   1.74K   896   499   244\n\n\n\n\n\nFilter\n$404.2K\n1%\n$70.0K\n0%\n\n\n     \n\n               2.74K 0   2.07K   1.81K   1.84K   2.12K   2.25K   2.63K   2.56K   2.37K   2.16K   2.19K   2.07K   2.74K\n\n\n\n\n\nDrip machine\n$2.6M\n9%\n$1.4M\n9%\n\n\n     \n\n               2.58K 0   2.14K   1.62K   1.97K   2.10K   2.58K   2.46K   2.34K   2.32K   2.05K   1.97K   1.84K   2.33K\n\n\n\n\n\nAeroPress\n$2.6M\n9%\n$1.3M\n9%\n\n\n     \n\n               9.27K 0   6.33K   5.20K   6.37K   7.02K   7.91K   8.70K   8.69K   7.80K   6.83K   6.96K   6.88K   9.27K\n\n\n\n\n\nPour over\n$846.0K\n3%\n$364.5K\n2%\n\n\n     \n\n               2.18K 0   1.56K   1.29K   1.51K   1.69K   1.94K   2.18K   2.14K   1.86K   1.72K   1.81K   1.60K   2.16K\n\n\n\n\n\nFrench press\n$1.1M\n4%\n$748.1K\n5%\n\n\n     \n\n               4.82K 0   3.51K   2.88K   3.35K   3.79K   3.90K   4.10K   4.18K   4.43K   3.28K   3.42K   3.30K   4.82K\n\n\n\n\n\nCezve\n$2.5M\n9%\n$2.0M\n13%\n\n\n     \n\n               17.1K 0   12.2K   11.5K   11.8K   13.6K   15.4K   16.5K   17.1K   14.4K   13.0K   12.9K   11.6K   15.9K\n\n\n\n\n\nChemex\n$3.1M\n11%\n$817.7K\n6%\n\n\n     \n\n               7.22K 0   4.94K   4.17K   5.24K   6.00K   6.36K   6.77K   7.11K   6.25K   5.60K   6.08K   4.98K   7.22K\n\n\n\n\n\nScale\n$3.8M\n13%\n$2.9M\n20%\n\n\n     \n\n               3.18K 0   1.54K   1.57K   1.68K   2.03K   2.43K   2.55K   2.57K   2.23K   2.04K   2.09K   1.69K   3.18K\n\n\n\n\n\nKettle\n$756.2K\n3%\n$617.5K\n4%\n\n\n     \n\n               1.53K 0   1.14K   1.02K   1.09K   1.13K   1.41K   1.48K   1.46K   1.30K   1.14K   1.23K   1.19K   1.53K\n\n\n\n\n\nEspresso Machine\n$8.4M\n29%\n$3.6M\n25%\n\n\n     \n\n               2.58K 0   686   840   618   598   2.15K   533   797   996   1.00K   668   858   2.58K\n\n\n\n\n\n\nTotal\n$29.4M\n100%\n$14.8M\n100%\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, loc, style\n\ncoffee_sales = pl.read_ndjson(\"coffee-sales.ndjson\")\nsel_rev = cs.starts_with(\"revenue\")\nsel_prof = cs.starts_with(\"profit\")\n\n\ncoffee_table = (\n    GT(coffee_sales)\n    .tab_header(\"Sales of Coffee Equipment\")\n    .tab_spanner(label=\"Revenue\", columns=sel_rev)\n    .tab_spanner(label=\"Profit\", columns=sel_prof)\n    .cols_label(\n        revenue_dollars=\"Amount\",\n        profit_dollars=\"Amount\",\n        revenue_pct=\"Percent\",\n        profit_pct=\"Percent\",\n        monthly_sales=\"Monthly Sales\",\n        icon=\"\",\n        product=\"Product\",\n    )\n    # formatting ----\n    .fmt_number(\n        columns=cs.ends_with(\"dollars\"),\n        compact=True,\n        pattern=\"${x}\",\n        n_sigfig=3,\n    )\n    .fmt_percent(columns=cs.ends_with(\"pct\"), decimals=0)\n    # style ----\n    .tab_style(\n        style=style.fill(color=\"aliceblue\"),\n        locations=loc.body(columns=sel_rev),\n    )\n    .tab_style(\n        style=style.fill(color=\"papayawhip\"),\n        locations=loc.body(columns=sel_prof),\n    )\n    .tab_style(\n        style=style.text(weight=\"bold\"),\n        locations=loc.body(rows=pl.col(\"product\") == \"Total\"),\n    )\n    .fmt_nanoplot(\"monthly_sales\", plot_type=\"bar\")\n    .fmt_image(\"icon\", path=\"assets\")\n    .sub_missing(missing_text=\"\")\n)\n\ncoffee_table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSales of Coffee Equipment\n\n\n\nProduct\nRevenue\nProfit\nMonthly Sales\n\n\nAmount\nPercent\nAmount\nPercent\n\n\n\n\n\nGrinder\n$904K\n3%\n$568K\n4%\n\n\n\n\n7650521494596613667748765686607594568751\n\n\n\n\n\nMoka pot\n$2.05M\n7%\n$181K\n1%\n\n\n\n\n6.87K04.73K4.74K4.79K5.51K6.16K6.62K6.87K6.03K5.30K4.88K4.65K6.28K\n\n\n\n\n\nCold brew\n$289K\n1%\n$242K\n2%\n\n\n\n\n2.70K02442494389811.77K2.70K2.61K2.35K1.74K896499244\n\n\n\n\n\nFilter\n$404K\n1%\n$70.0K\n0%\n\n\n\n\n2.74K02.07K1.81K1.84K2.12K2.25K2.63K2.56K2.37K2.16K2.19K2.07K2.74K\n\n\n\n\n\nDrip machine\n$2.63M\n9%\n$1.37M\n9%\n\n\n\n\n2.58K02.14K1.62K1.97K2.10K2.58K2.46K2.34K2.32K2.05K1.97K1.84K2.33K\n\n\n\n\n\nAeroPress\n$2.60M\n9%\n$1.29M\n9%\n\n\n\n\n9.27K06.33K5.20K6.37K7.02K7.91K8.70K8.69K7.80K6.83K6.96K6.88K9.27K\n\n\n\n\n\nPour over\n$846K\n3%\n$365K\n2%\n\n\n\n\n2.18K01.56K1.29K1.51K1.69K1.94K2.18K2.14K1.86K1.72K1.81K1.60K2.16K\n\n\n\n\n\nFrench press\n$1.11M\n4%\n$748K\n5%\n\n\n\n\n4.82K03.51K2.88K3.35K3.79K3.90K4.10K4.18K4.43K3.28K3.42K3.30K4.82K\n\n\n\n\n\nCezve\n$2.51M\n9%\n$1.97M\n13%\n\n\n\n\n17.1K012.2K11.5K11.8K13.6K15.4K16.5K17.1K14.4K13.0K12.9K11.6K15.9K\n\n\n\n\n\nChemex\n$3.14M\n11%\n$818K\n6%\n\n\n\n\n7.22K04.94K4.17K5.24K6.00K6.36K6.77K7.11K6.25K5.60K6.08K4.98K7.22K\n\n\n\n\n\nScale\n$3.80M\n13%\n$2.91M\n20%\n\n\n\n\n3.18K01.54K1.57K1.68K2.03K2.42K2.55K2.57K2.23K2.04K2.09K1.69K3.18K\n\n\n\n\n\nKettle\n$756K\n3%\n$618K\n4%\n\n\n\n\n1.53K01.14K1.02K1.09K1.13K1.41K1.48K1.46K1.30K1.14K1.23K1.19K1.53K\n\n\n\n\n\nEspresso Machine\n$8.41M\n29%\n$3.64M\n25%\n\n\n\n\n2.58K06868406185982.15K5337979961.00K6688582.58K\n\n\n\n\n\nTotal\n$29.4M\n100%\n$14.8M\n100%\n\n\n\n\n\n\n\n        \n\n\nCode\n#coffee_table.save(\"data/coffee-table.png\",  scale=2)\n\n\n\npython to R with gemini 2.5\ntranslate following python code to R code,using cols_nanoplot in R to replace fmt_nanoplot()\nError in fmt_currency(., columns = ends_with(“dollars”), currency = “USD”, : unused arguments (use_sigfig = TRUE, sigfig = 3)\n\n\nCode\n# --- Load necessary libraries ---\nlibrary(gt)\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(gtExtras)\n\n# --- Data Loading ---\n# (Assuming coffee_sales is loaded as before)\ncon &lt;- file(\"coffee-sales.ndjson\", \"r\")\ncoffee_sales &lt;- stream_in(con, simplifyDataFrame = TRUE) %&gt;%\n  as_tibble()\n\n\n\n Found 14 records...\n Imported 14 records. Simplifying...\n\n\nCode\nclose(con)\n\n# --- Table Creation and Styling with gt ---\ncoffee_table &lt;-\n  gt(coffee_sales) %&gt;%\n\n  # --- Headers and Spanners ---\n  tab_header(title = \"Sales of Coffee Equipment\") %&gt;%\n  tab_spanner(label = \"Revenue\", columns = starts_with(\"revenue\")) %&gt;%\n  tab_spanner(label = \"Profit\", columns = starts_with(\"profit\")) %&gt;%\n\n  # --- Column Labels ---\n  cols_label(\n    revenue_dollars = \"Amount\",\n    profit_dollars = \"Amount\",\n    revenue_pct = \"Percent\",\n    profit_pct = \"Percent\",\n    monthly_sales = \"Monthly Sales\",\n    icon = \"\",\n    product = \"Product\"\n  ) %&gt;%\n\n  # --- Formatting ---\n  # *** CORRECTED SECTION ***\n  # Format numeric columns using significant figures and add '$' prefix with pattern\n  fmt_number(\n      columns = ends_with(\"dollars\"),\n      pattern = \"${x}\",  # Use pattern to add the dollar sign\n      n_sigfig = 3 ,      # Specify 3 significant figures\n      # If you also wanted the compact K/M notation like in Python's compact=True:\n      suffixing = TRUE\n  ) %&gt;%\n  # Format percentage columns\n  fmt_percent(columns = ends_with(\"pct\"), decimals = 0) %&gt;%\n\n  # --- Styling ---\n  tab_style(\n    style = cell_fill(color = \"aliceblue\"),\n    locations = cells_body(columns = starts_with(\"revenue\"))\n  ) %&gt;%\n  tab_style(\n    style = cell_fill(color = \"papayawhip\"),\n    locations = cells_body(columns = starts_with(\"profit\"))\n  ) %&gt;%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_body(columns = everything(), rows = product == \"Total\")\n  ) %&gt;%\n\n  # --- Special Formatting ---\n  #gt_plt_bar(column = monthly_sales, color=\"grey\", background = \"lightgrey\") %&gt;%\n  # text_transform(\n  #   locations = cells_body(columns = icon),\n  #   fn = function(x) {\n  #       image_path &lt;- file.path(\"assets\", x)\n  #        if (!file.exists(image_path)) {\n  #           warning(\"Image file not found: \", image_path)\n  #           return(\"\")\n  #         }\n  #       local_image(filename = image_path, height = px(25))\n  #   }\n  # ) %&gt;%\n  sub_missing(missing_text = \"\")\n\n\n\n# --- Save the table (optional) ---\n# gtsave(coffee_table, filename = \"data/coffee-table.png\", zoom = 2)\n\n\n\n\nCode\n# --- Display the table ---\ncoffee_table|&gt; fmt_image(\"icon\", path=\"assets\") |&gt;  \n  # --- Add Nanoplot (Bar Chart) ---\n  cols_nanoplot(\n     columns = monthly_sales,\n     plot_type = \"bar\",\n     options = nanoplot_options(\n         data_bar_fill_color = \"steelblue\",\n         data_bar_stroke_color = \"steelblue\"\n     )\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSales of Coffee Equipment\n\n\n\nProduct\n\nRevenue\n\n\nProfit\n\nnanoplots\n\n\nAmount\nPercent\nAmount\nPercent\n\n\n\n\n\nGrinder\n$904K\n3%\n$568K\n4%\n\n\n     \n\n               765 0   521   494   596   613   667   748   765   686   607   594   568   751\n\n\n\n\n\nMoka pot\n$2.05M\n7%\n$181K\n1%\n\n\n     \n\n               6.87K 0   4.73K   4.74K   4.79K   5.51K   6.16K   6.62K   6.87K   6.03K   5.30K   4.88K   4.65K   6.28K\n\n\n\n\n\nCold brew\n$289K\n1%\n$242K\n2%\n\n\n     \n\n               2.70K 0   244   249   438   981   1.77K   2.70K   2.61K   2.35K   1.74K   896   499   244\n\n\n\n\n\nFilter\n$404K\n1%\n$70.0K\n0%\n\n\n     \n\n               2.74K 0   2.07K   1.81K   1.84K   2.12K   2.25K   2.63K   2.56K   2.37K   2.16K   2.19K   2.07K   2.74K\n\n\n\n\n\nDrip machine\n$2.63M\n9%\n$1.37M\n9%\n\n\n     \n\n               2.58K 0   2.14K   1.62K   1.97K   2.10K   2.58K   2.46K   2.34K   2.32K   2.05K   1.97K   1.84K   2.33K\n\n\n\n\n\nAeroPress\n$2.60M\n9%\n$1.29M\n9%\n\n\n     \n\n               9.27K 0   6.33K   5.20K   6.37K   7.02K   7.91K   8.70K   8.69K   7.80K   6.83K   6.96K   6.88K   9.27K\n\n\n\n\n\nPour over\n$846K\n3%\n$365K\n2%\n\n\n     \n\n               2.18K 0   1.56K   1.29K   1.51K   1.69K   1.94K   2.18K   2.14K   1.86K   1.72K   1.81K   1.60K   2.16K\n\n\n\n\n\nFrench press\n$1.11M\n4%\n$748K\n5%\n\n\n     \n\n               4.82K 0   3.51K   2.88K   3.35K   3.79K   3.90K   4.10K   4.18K   4.43K   3.28K   3.42K   3.30K   4.82K\n\n\n\n\n\nCezve\n$2.51M\n9%\n$1.97M\n13%\n\n\n     \n\n               17.1K 0   12.2K   11.5K   11.8K   13.6K   15.4K   16.5K   17.1K   14.4K   13.0K   12.9K   11.6K   15.9K\n\n\n\n\n\nChemex\n$3.14M\n11%\n$818K\n6%\n\n\n     \n\n               7.22K 0   4.94K   4.17K   5.24K   6.00K   6.36K   6.77K   7.11K   6.25K   5.60K   6.08K   4.98K   7.22K\n\n\n\n\n\nScale\n$3.80M\n13%\n$2.91M\n20%\n\n\n     \n\n               3.18K 0   1.54K   1.57K   1.68K   2.03K   2.43K   2.55K   2.57K   2.23K   2.04K   2.09K   1.69K   3.18K\n\n\n\n\n\nKettle\n$756K\n3%\n$618K\n4%\n\n\n     \n\n               1.53K 0   1.14K   1.02K   1.09K   1.13K   1.41K   1.48K   1.46K   1.30K   1.14K   1.23K   1.19K   1.53K\n\n\n\n\n\nEspresso Machine\n$8.41M\n29%\n$3.64M\n25%\n\n\n     \n\n               2.58K 0   686   840   618   598   2.15K   533   797   996   1.00K   668   858   2.58K\n\n\n\n\n\n\nTotal\n$29.4M\n100%\n$14.8M\n100%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3\norigin table:\n\n\nRPython\n\n\n\nPrompt\nwrite R code using GT pacakge to recreate this table\n1.opt_align change to cols_align 2.cols_labels change to cols_label\n\n\ninput data\n\n\nCode\nlibrary(gt)\nlibrary(dplyr)\n\n# Create the data frame (replace with your actual data loading if needed)\ndata &lt;-read.csv(\"power-generation.csv\")\n\n\n\n\nmake GT table\n\n\nCode\n# Create the gt table\ngt_table &lt;- data %&gt;%\n  gt() %&gt;%\n  # Title and subtitle\n  tab_header(\n    title = md(\"2023 Mean **Carbon Intensity** (gCO2eq/kWh) and **Power Consumption** Breakdown (%)\")\n  ) %&gt;%\n  # Column labels\n  cols_label(\n    CO2.Intensity = \"CO2 Intensity\",\n    Hydro.Discharge = \"Hydro Discharge\",\n    Battery.Discharge = \"Battery Discharge\"\n  ) %&gt;%\n  # Format the numeric columns to have one decimal place\n  fmt_number(\n    columns = -Zone, # Apply to all columns except Zone\n    decimals = 1\n  ) %&gt;%\n  # Add a spanning header for the power consumption breakdown\n  # tab_spanner(\n  #   label = \"Power Consumption Breakdown (%)\",\n  #   columns = c(Hydro, Nuclear, Wind, Solar, Geothermal, Biomass, Gas, Coal, Oil, Unknown, Hydro.Discharge, Battery.Discharge)\n  # ) %&gt;%\n  # Add source note\n  tab_source_note(md(\"Source: [Your Data Source Information Here]\")) %&gt;%\n  # Add a footnote about the methodology\n  tab_footnote(\n    md(\"Some emissions factors are based on IPCC 2014 defaults, while some are based on more accurate regional factors.\")\n  ) %&gt;%\n  # Style the table (optional, customize as needed)\n   cols_align(align = \"center\") %&gt;%\n  opt_row_striping()\n\n# Display the table\ngt_table\n\n\n\n\n\n  \n    \n      2023 Mean Carbon Intensity (gCO2eq/kWh) and Power Consumption Breakdown (%)\n    \n    \n    \n      Zone\n      CO2 Intensity\n      Hydro\n      Nuclear\n      Wind\n      Solar\n      Geothermal\n      Biomass\n      Gas\n      Coal\n      Oil\n      Unknown\n      Hydro Discharge\n      Battery Discharge\n    \n  \n  \n    Sweden\n23.5\n0.4\n0.3\n0.2\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n    Iceland\n27.6\n0.7\n0.0\n0.0\n0.0\n0.3\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n    Quebec\n30.6\n0.9\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n    France\n52.7\n0.1\n0.6\n0.1\n0.0\n0.0\n0.0\n0.1\n0.0\n0.0\n0.0\n0.0\n0.0\n    Ontario\n72.6\n0.3\n0.5\n0.1\n0.0\n0.0\n0.0\n0.1\n0.0\n0.0\n0.0\n0.0\n0.0\n    Finland\n87.2\n0.2\n0.4\n0.2\n0.0\n0.0\n0.1\n0.0\n0.1\n0.0\n0.0\n0.0\n0.0\n    Tasmania\n92.2\n0.7\n0.0\n0.2\n0.1\n0.0\n0.0\n0.0\n0.1\n0.0\n0.0\n0.0\n0.0\n    New Zealand\n94.5\n0.6\n0.0\n0.1\n0.0\n0.2\n0.0\n0.1\n0.0\n0.0\n0.0\n0.0\n0.0\n    Belgium\n139.6\n0.0\n0.4\n0.2\n0.1\n0.0\n0.0\n0.2\n0.0\n0.0\n0.0\n0.0\n0.0\n    West Denmark\n143.1\n0.2\n0.0\n0.5\n0.1\n0.0\n0.1\n0.1\n0.1\n0.0\n0.0\n0.0\n0.0\n    East Denmark\n147.6\n0.1\n0.1\n0.4\n0.1\n0.0\n0.1\n0.0\n0.1\n0.0\n0.0\n0.0\n0.0\n    Spain\n154.0\n0.1\n0.2\n0.2\n0.2\n0.0\n0.0\n0.2\n0.0\n0.0\n0.0\n0.0\n0.0\n    South Australia\n185.8\n0.0\n0.0\n0.4\n0.2\n0.0\n0.0\n0.2\n0.1\n0.0\n0.0\n0.0\n0.0\n    Great Britain\n199.8\n0.0\n0.2\n0.3\n0.1\n0.0\n0.1\n0.3\n0.0\n0.0\n0.0\n0.0\n0.0\n    California\n257.7\n0.1\n0.1\n0.1\n0.2\n0.0\n0.0\n0.4\n0.0\n0.0\n0.0\n0.0\n0.0\n    Netherlands\n272.8\n0.0\n0.0\n0.3\n0.2\n0.0\n0.1\n0.3\n0.1\n0.0\n0.0\n0.0\n0.0\n    New York ISO\n280.0\n0.2\n0.2\n0.0\n0.0\n0.0\n0.0\n0.5\n0.0\n0.0\n0.0\n0.0\n0.0\n    Italy (North)\n307.3\n0.2\n0.1\n0.0\n0.1\n0.0\n0.0\n0.4\n0.0\n0.0\n0.1\n0.0\n0.0\n    Texas\n383.2\n0.0\n0.1\n0.3\n0.1\n0.0\n0.0\n0.4\n0.1\n0.0\n0.0\n0.0\n0.0\n    Germany\n396.8\n0.1\n0.0\n0.3\n0.1\n0.0\n0.1\n0.1\n0.2\n0.0\n0.0\n0.0\n0.0\n    Western Australia\n433.3\n0.0\n0.0\n0.2\n0.2\n0.0\n0.0\n0.4\n0.3\n0.0\n0.0\n0.0\n0.0\n    Alberta\n438.9\n0.0\n0.0\n0.1\n0.0\n0.0\n0.0\n0.7\n0.1\n0.0\n0.0\n0.0\n0.0\n    Victoria\n506.4\n0.1\n0.0\n0.2\n0.1\n0.0\n0.0\n0.0\n0.6\n0.0\n0.0\n0.0\n0.0\n    New South Wales\n556.3\n0.0\n0.0\n0.1\n0.2\n0.0\n0.0\n0.0\n0.6\n0.0\n0.0\n0.0\n0.0\n    India (North)\n558.2\n0.2\n0.0\n0.0\n0.1\n0.0\n0.0\n0.0\n0.6\n0.0\n0.0\n0.0\n0.0\n    Queensland\n607.0\n0.0\n0.0\n0.0\n0.2\n0.0\n0.0\n0.1\n0.7\n0.0\n0.0\n0.0\n0.0\n    South Africa\n701.0\n0.0\n0.0\n0.1\n0.0\n0.0\n0.0\n0.0\n0.8\n0.0\n0.0\n0.0\n0.0\n  \n  \n    \n      Source: [Your Data Source Information Here]\n    \n  \n  \n    \n       Some emissions factors are based on IPCC 2014 defaults, while some are based on more accurate regional factors.\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nReference:\nhttps://github.com/rich-iannone/great-tables-mini-workshop?tab=readme-ov-file"
  },
  {
    "objectID": "posts/display_table/index.html#in-r-with-gt-package",
    "href": "posts/display_table/index.html#in-r-with-gt-package",
    "title": "表格展示",
    "section": "in R with GT package",
    "text": "in R with GT package\n\n\nCode\n# Load the necessary library\nlibrary(gt)\nlibrary(dplyr) # Using dplyr for mutate, optional but convenient\nlibrary(gtExtras) # For image embedding\n\n\n\n\nCode\n# 1. Create the data frame\n# Note: Storing percentages as numbers (0-100) for easier formatting\nhoosiers_data &lt;- data.frame(\n  TEAM = c(\"Wake Forest\", \"Indiana\", \"North Carolina\", \"Coppin St.\", \"Vermont\", \"New Mexico St.\"),\n  logo_url = c(\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/154.png\",      # Wake Forest\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/84.png\",       # Indiana\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/153.png\",      # North Carolina\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/2154.png\",     # Coppin St.\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/261.png\",     # Vermont\n    \"https://a.espncdn.com/i/teamlogos/ncaa/500/166.png\"       # New Mexico St.\n  ),\n  `3FG_Text` = c(\"17-61\", \"19-79\", \"20-60\", \"21-60\", \"22-89\", \"22-72\"), # Keep original text for display\n  `3FG%` = c(27.87, 24.05, 33.33, 35.00, 24.72, 30.56),\n  PER_GAME = c(2.83, 3.17, 3.33, 3.50, 3.67, 3.67),\n  SEED = c(4, NA, 6, 16, 16, 13),\n  ROUND = c(\"R64\", NA, \"R32\", \"R68\", \"R64\", \"R64\"),\n  YEAR = c(2009, 2024, 2014, 2008, 2010, 2014),\n  stringsAsFactors = FALSE # Good practice\n)\n\n\n\n\nCode\n# 2. Create the gt table\ngt_table &lt;- hoosiers_data %&gt;%\n  gt() %&gt;%\n  # --- Add Logos ---\n  gt_img_rows(columns = logo_url, height = 25) %&gt;% # Use URL column, set image height\n  # --- Move logo column ---\n  cols_move_to_start(columns = logo_url) %&gt;% # Place logo column first\n  # Add title and subtitle\n  tab_header(\n    title = \"History does not bode well for the Hoosiers\",\n    subtitle = \"Only one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\"\n  ) %&gt;%\n  # Create the spanner header over the shooting columns\n  tab_spanner(\n    label = \"Shooting\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME)\n  ) %&gt;%\n  # Format column labels\n  cols_label(\n    logo_url = \"\", # No header text for the logo column\n    TEAM = \"TEAM\",\n    `X3FG_Text` = \"3FG\", # Use the text column for display\n    `X3FG.` = \"3FG%\",\n    PER_GAME = \"PER GAME\",\n    SEED = \"SEED\",\n    ROUND = \"ROUND\",\n    YEAR = \"YEAR\"\n  ) %&gt;%\n  # Format the percentage column\n  fmt_percent(\n    columns = `X3FG.`,\n    decimals = 2,\n    scale_values = FALSE # Values are already 0-100\n  ) %&gt;%\n  # Format the 'PER GAME' column to two decimal places\n  fmt_number(\n    columns = PER_GAME,\n    decimals = 2\n  ) %&gt;%\n  # Replace NA values with \"???\"\n  sub_missing(\n    columns = c(SEED, ROUND),\n    missing_text = \"???\"\n  ) %&gt;%\n   # Align columns (optional, but often improves appearance)\n  cols_align(\n    align = \"center\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME, SEED, ROUND, YEAR)\n  ) %&gt;%\n  cols_align(\n    align = \"left\",\n    columns = TEAM\n  ) %&gt;%\n  # Highlight the Indiana row (using a light blue background as an example)\n  tab_style(\n    style = cell_fill(color = \"#ADD8E6\"), # AliceBlue, adjust as needed\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n  tab_style(\n    style = cell_borders(\n      sides = c(\"top\", 'bottom',\"left\", \"right\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(2)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`)\n  ) %&gt;%\n  # Add the source note\n  tab_source_note(\n    source_note = \"Viz. + Analysis by @andreweatherman\"\n  )%&gt;%\n  # Adjust width of the logo column if needed (optional)\n  cols_width(\n      logo_url ~ px(40) # Set logo column width to 40 pixels\n  )\ngt_table\n\n\n\n\n\n\n\n\nHistory does not bode well for the Hoosiers\n\n\nOnly one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\n\n\n\nTEAM\n\nShooting\n\nSEED\nROUND\nYEAR\n\n\n3FG\n3FG%\nPER GAME\n\n\n\n\n\nWake Forest\n17-61\n27.87%\n2.83\n4\nR64\n2009\n\n\n\nIndiana\n19-79\n24.05%\n3.17\n???\n???\n2024\n\n\n\nNorth Carolina\n20-60\n33.33%\n3.33\n6\nR32\n2014\n\n\n\nCoppin St.\n21-60\n35.00%\n3.50\n16\nR68\n2008\n\n\n\nVermont\n22-89\n24.72%\n3.67\n16\nR64\n2010\n\n\n\nNew Mexico St.\n22-72\n30.56%\n3.67\n13\nR64\n2014\n\n\n\nViz. + Analysis by @andreweatherman\n\n\n\n\n\n\n\n\n\nthe row Team Indiana background color is not correct,and also letter is not bold,So adjust it.\n\n\nCode\nlibrary(magick)\n\n# Read the image\nimg &lt;- image_read(\"images/my screenshots.png\")\n\n# Display the image to inspect it (optional, opens in a viewer)\n#image_browse(img)\n\n\n\n\nCode\n# Get image dimensions\nimg_info &lt;- image_info(img)\nprint(img_info)\n\n\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n1 PNG     1066    872 sRGB       TRUE    983185 57x57  \n\n\n\n\nCode\n# Crop a 50x50 pixel section from the Indiana row background\n# Adjust coordinates based on your image dimensions\nimg_cropped &lt;- image_crop(img, \"50x50+200+400\")\n\n# Display the cropped section to confirm (optional)\n#image_browse(img_cropped)\n\n\n\n\nCode\n# Convert the cropped image to a raster\nimg_raster &lt;- as.raster(img_cropped)\n\n# Convert the raster to a matrix of colors\nimg_matrix &lt;- as.matrix(img_raster)\n\n# Extract RGB values from the matrix\n# col2rgb expects a vector of colors, so we flatten the matrix\nrgb_values &lt;- col2rgb(img_matrix)\n\n# Calculate the average RGB values (to approximate the dominant background color)\navg_rgb &lt;- rowMeans(rgb_values, na.rm = TRUE)\n\n# Convert the average RGB to Hex\n# col2rgb returns values in the range 0-255, so we can use them directly\nhex_code &lt;- rgb(avg_rgb[1], avg_rgb[2], avg_rgb[3], maxColorValue = 255)\n\n# Print the Hex code\nprint(hex_code)\n\n\n[1] \"#70AACA\"\n\n\n\n\nCode\n# 2. Create the gt table\ngt_table &lt;- hoosiers_data %&gt;%\n  gt() %&gt;%\n  # --- Add Logos ---\n  gt_img_rows(columns = logo_url, height = 25) %&gt;% # Use URL column, set image height\n  # --- Move logo column ---\n  cols_move_to_start(columns = logo_url) %&gt;% # Place logo column first\n  # Add title and subtitle\n  tab_header(\n    title = \"History does not bode well for the Hoosiers\",\n    subtitle = \"Only one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\"\n  ) %&gt;%\n  # Create the spanner header over the shooting columns\n  tab_spanner(\n    label = \"Shooting\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME)\n  ) %&gt;%\n  # Format column labels\n  cols_label(\n    logo_url = \"\", # No header text for the logo column\n    TEAM = \"TEAM\",\n    `X3FG_Text` = \"3FG\", # Use the text column for display\n    `X3FG.` = \"3FG%\",\n    PER_GAME = \"PER GAME\",\n    SEED = \"SEED\",\n    ROUND = \"ROUND\",\n    YEAR = \"YEAR\"\n  ) %&gt;%\n  # Format the percentage column\n  fmt_percent(\n    columns = `X3FG.`,\n    decimals = 2,\n    scale_values = FALSE # Values are already 0-100\n  ) %&gt;%\n  # Format the 'PER GAME' column to two decimal places\n  fmt_number(\n    columns = PER_GAME,\n    decimals = 2\n  ) %&gt;%\n  # Replace NA values with \"???\"\n  sub_missing(\n    columns = c(SEED, ROUND),\n    missing_text = \"???\"\n  ) %&gt;%\n   # Align columns (optional, but often improves appearance)\n  cols_align(\n    align = \"center\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME, SEED, ROUND, YEAR)\n  ) %&gt;%\n  cols_align(\n    align = \"left\",\n    columns = TEAM\n  ) %&gt;%\n  # Highlight the Indiana row (using a light blue background as an example)\n  tab_style(\n    \n    style = cell_fill(color = \"#70AACA\"), # AliceBlue, adjust as needed\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n   tab_style(\n     style = cell_text(weight = \"bold\"),\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n  ### dotted line\n  tab_style(\n    style = cell_borders(\n      sides = c(\"top\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`,rows = TEAM == \"Wake Forest\") # Apply to Indiana row)\n  ) %&gt;%\n    ### dotted line\n    tab_style(\n    style = cell_borders(\n      sides = c(\"bottom\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`,rows = TEAM == \"New Mexico St.\")\n  ) %&gt;%\n  ### dotted line\n    tab_style(\n    style = cell_borders(\n      sides = c(\"left\",\"right\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`)\n  ) %&gt;%\n  # Add the source note\n  tab_source_note(\n    source_note = \"Viz. + Analysis by @andreweatherman\"\n  )%&gt;%\n  # Adjust width of the logo column if needed (optional)\n  cols_width(\n      logo_url ~ px(40) # Set logo column width to 40 pixels\n  )\ngt_table\n\n\n\n\n\n\n\n\nHistory does not bode well for the Hoosiers\n\n\nOnly one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\n\n\n\nTEAM\n\nShooting\n\nSEED\nROUND\nYEAR\n\n\n3FG\n3FG%\nPER GAME\n\n\n\n\n\nWake Forest\n17-61\n27.87%\n2.83\n4\nR64\n2009\n\n\n\nIndiana\n19-79\n24.05%\n3.17\n???\n???\n2024\n\n\n\nNorth Carolina\n20-60\n33.33%\n3.33\n6\nR32\n2014\n\n\n\nCoppin St.\n21-60\n35.00%\n3.50\n16\nR68\n2008\n\n\n\nVermont\n22-89\n24.72%\n3.67\n16\nR64\n2010\n\n\n\nNew Mexico St.\n22-72\n30.56%\n3.67\n13\nR64\n2014\n\n\n\nViz. + Analysis by @andreweatherman"
  },
  {
    "objectID": "posts/display_table/index.html#the-color-is-not-correct",
    "href": "posts/display_table/index.html#the-color-is-not-correct",
    "title": "表格展示",
    "section": "the color is not correct,",
    "text": "the color is not correct,\n\n\nCode\nlibrary(magick)\n\n# Read the image\nimg &lt;- image_read(\"images/my screenshots.png\")\n\n# Display the image to inspect it (optional, opens in a viewer)\n#image_browse(img)\n\n\n\n\nCode\n# Get image dimensions\nimg_info &lt;- image_info(img)\nprint(img_info)\n\n\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n1 PNG     1066    872 sRGB       TRUE    983185 57x57  \n\n\n\n\nCode\n# Crop a 50x50 pixel section from the Indiana row background\n# Adjust coordinates based on your image dimensions\nimg_cropped &lt;- image_crop(img, \"50x50+200+400\")\n\n# Display the cropped section to confirm (optional)\n#image_browse(img_cropped)\n\n\n\n\nCode\n# Convert the cropped image to a raster\nimg_raster &lt;- as.raster(img_cropped)\n\n# Convert the raster to a matrix of colors\nimg_matrix &lt;- as.matrix(img_raster)\n\n# Extract RGB values from the matrix\n# col2rgb expects a vector of colors, so we flatten the matrix\nrgb_values &lt;- col2rgb(img_matrix)\n\n# Calculate the average RGB values (to approximate the dominant background color)\navg_rgb &lt;- rowMeans(rgb_values, na.rm = TRUE)\n\n# Convert the average RGB to Hex\n# col2rgb returns values in the range 0-255, so we can use them directly\nhex_code &lt;- rgb(avg_rgb[1], avg_rgb[2], avg_rgb[3], maxColorValue = 255)\n\n# Print the Hex code\nprint(hex_code)\n\n\n[1] \"#70AACA\"\n\n\n\n\nCode\n# 2. Create the gt table\ngt_table &lt;- hoosiers_data %&gt;%\n  gt() %&gt;%\n  # --- Add Logos ---\n  gt_img_rows(columns = logo_url, height = 25) %&gt;% # Use URL column, set image height\n  # --- Move logo column ---\n  cols_move_to_start(columns = logo_url) %&gt;% # Place logo column first\n  # Add title and subtitle\n  tab_header(\n    title = \"History does not bode well for the Hoosiers\",\n    subtitle = \"Only one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\"\n  ) %&gt;%\n  # Create the spanner header over the shooting columns\n  tab_spanner(\n    label = \"Shooting\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME)\n  ) %&gt;%\n  # Format column labels\n  cols_label(\n    logo_url = \"\", # No header text for the logo column\n    TEAM = \"TEAM\",\n    `X3FG_Text` = \"3FG\", # Use the text column for display\n    `X3FG.` = \"3FG%\",\n    PER_GAME = \"PER GAME\",\n    SEED = \"SEED\",\n    ROUND = \"ROUND\",\n    YEAR = \"YEAR\"\n  ) %&gt;%\n  # Format the percentage column\n  fmt_percent(\n    columns = `X3FG.`,\n    decimals = 2,\n    scale_values = FALSE # Values are already 0-100\n  ) %&gt;%\n  # Format the 'PER GAME' column to two decimal places\n  fmt_number(\n    columns = PER_GAME,\n    decimals = 2\n  ) %&gt;%\n  # Replace NA values with \"???\"\n  sub_missing(\n    columns = c(SEED, ROUND),\n    missing_text = \"???\"\n  ) %&gt;%\n   # Align columns (optional, but often improves appearance)\n  cols_align(\n    align = \"center\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME, SEED, ROUND, YEAR)\n  ) %&gt;%\n  cols_align(\n    align = \"left\",\n    columns = TEAM\n  ) %&gt;%\n  # Highlight the Indiana row (using a light blue background as an example)\n  tab_style(\n    \n    style = cell_fill(color = \"#70AACA\"), # AliceBlue, adjust as needed\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n   tab_style(\n     style = cell_text(weight = \"bold\"),\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n  \n  tab_style(\n    style = cell_borders(\n      sides = c(\"top\", 'bottom',\"left\", \"right\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(2)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`)\n  ) %&gt;%\n  # Add the source note\n  tab_source_note(\n    source_note = \"Viz. + Analysis by @andreweatherman\"\n  )%&gt;%\n  # Adjust width of the logo column if needed (optional)\n  cols_width(\n      logo_url ~ px(40) # Set logo column width to 40 pixels\n  )\ngt_table\n\n\n\n\n\n\n\n\nHistory does not bode well for the Hoosiers\n\n\nOnly one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\n\n\n\nTEAM\n\nShooting\n\nSEED\nROUND\nYEAR\n\n\n3FG\n3FG%\nPER GAME\n\n\n\n\n\nWake Forest\n17-61\n27.87%\n2.83\n4\nR64\n2009\n\n\n\nIndiana\n19-79\n24.05%\n3.17\n???\n???\n2024\n\n\n\nNorth Carolina\n20-60\n33.33%\n3.33\n6\nR32\n2014\n\n\n\nCoppin St.\n21-60\n35.00%\n3.50\n16\nR68\n2008\n\n\n\nVermont\n22-89\n24.72%\n3.67\n16\nR64\n2010\n\n\n\nNew Mexico St.\n22-72\n30.56%\n3.67\n13\nR64\n2014\n\n\n\nViz. + Analysis by @andreweatherman"
  },
  {
    "objectID": "posts/display_table/index.html#the-row-team-indiana-background-color-is-not-correctand-also-letter-is-not-boldso-adjust-it.",
    "href": "posts/display_table/index.html#the-row-team-indiana-background-color-is-not-correctand-also-letter-is-not-boldso-adjust-it.",
    "title": "表格展示",
    "section": "the row Team Indiana background color is not correct,and also letter is not bold,So adjust it.",
    "text": "the row Team Indiana background color is not correct,and also letter is not bold,So adjust it.\n\n\nCode\nlibrary(magick)\n\n# Read the image\nimg &lt;- image_read(\"images/my screenshots.png\")\n\n# Display the image to inspect it (optional, opens in a viewer)\n#image_browse(img)\n\n\n\n\nCode\n# Get image dimensions\nimg_info &lt;- image_info(img)\nprint(img_info)\n\n\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n1 PNG     1066    872 sRGB       TRUE    983185 57x57  \n\n\n\n\nCode\n# Crop a 50x50 pixel section from the Indiana row background\n# Adjust coordinates based on your image dimensions\nimg_cropped &lt;- image_crop(img, \"50x50+200+400\")\n\n# Display the cropped section to confirm (optional)\n#image_browse(img_cropped)\n\n\n\n\nCode\n# Convert the cropped image to a raster\nimg_raster &lt;- as.raster(img_cropped)\n\n# Convert the raster to a matrix of colors\nimg_matrix &lt;- as.matrix(img_raster)\n\n# Extract RGB values from the matrix\n# col2rgb expects a vector of colors, so we flatten the matrix\nrgb_values &lt;- col2rgb(img_matrix)\n\n# Calculate the average RGB values (to approximate the dominant background color)\navg_rgb &lt;- rowMeans(rgb_values, na.rm = TRUE)\n\n# Convert the average RGB to Hex\n# col2rgb returns values in the range 0-255, so we can use them directly\nhex_code &lt;- rgb(avg_rgb[1], avg_rgb[2], avg_rgb[3], maxColorValue = 255)\n\n# Print the Hex code\nprint(hex_code)\n\n\n[1] \"#70AACA\"\n\n\n\n\nCode\n# 2. Create the gt table\ngt_table &lt;- hoosiers_data %&gt;%\n  gt() %&gt;%\n  # --- Add Logos ---\n  gt_img_rows(columns = logo_url, height = 25) %&gt;% # Use URL column, set image height\n  # --- Move logo column ---\n  cols_move_to_start(columns = logo_url) %&gt;% # Place logo column first\n  # Add title and subtitle\n  tab_header(\n    title = \"History does not bode well for the Hoosiers\",\n    subtitle = \"Only one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\"\n  ) %&gt;%\n  # Create the spanner header over the shooting columns\n  tab_spanner(\n    label = \"Shooting\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME)\n  ) %&gt;%\n  # Format column labels\n  cols_label(\n    logo_url = \"\", # No header text for the logo column\n    TEAM = \"TEAM\",\n    `X3FG_Text` = \"3FG\", # Use the text column for display\n    `X3FG.` = \"3FG%\",\n    PER_GAME = \"PER GAME\",\n    SEED = \"SEED\",\n    ROUND = \"ROUND\",\n    YEAR = \"YEAR\"\n  ) %&gt;%\n  # Format the percentage column\n  fmt_percent(\n    columns = `X3FG.`,\n    decimals = 2,\n    scale_values = FALSE # Values are already 0-100\n  ) %&gt;%\n  # Format the 'PER GAME' column to two decimal places\n  fmt_number(\n    columns = PER_GAME,\n    decimals = 2\n  ) %&gt;%\n  # Replace NA values with \"???\"\n  sub_missing(\n    columns = c(SEED, ROUND),\n    missing_text = \"???\"\n  ) %&gt;%\n   # Align columns (optional, but often improves appearance)\n  cols_align(\n    align = \"center\",\n    columns = c(`X3FG_Text`, `X3FG.`, PER_GAME, SEED, ROUND, YEAR)\n  ) %&gt;%\n  cols_align(\n    align = \"left\",\n    columns = TEAM\n  ) %&gt;%\n  # Highlight the Indiana row (using a light blue background as an example)\n  tab_style(\n    \n    style = cell_fill(color = \"#70AACA\"), # AliceBlue, adjust as needed\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n   tab_style(\n     style = cell_text(weight = \"bold\"),\n    locations = cells_body(rows = TEAM == \"Indiana\")\n  ) %&gt;%\n  ### dotted line\n  tab_style(\n    style = cell_borders(\n      sides = c(\"top\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`,rows = TEAM == \"Wake Forest\") # Apply to Indiana row)\n  ) %&gt;%\n    ### dotted line\n    tab_style(\n    style = cell_borders(\n      sides = c(\"bottom\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`,rows = TEAM == \"New Mexico St.\")\n  ) %&gt;%\n  ### dotted line\n    tab_style(\n    style = cell_borders(\n      sides = c(\"left\",\"right\"), # Or \"top\", \"left\", \"right\", or \"all\"\n      color = \"black\", # Or a hex code\n      style = \"dotted\", # Or \"dashed\", \"dotted\", \"double\", \"hidden\"\n      weight = px(3)  # Default is 1px\n                         \n                         ), # AliceBlue, adjust as needed\n    locations = cells_body(columns = `X3FG.`)\n  ) %&gt;%\n  # Add the source note\n  tab_source_note(\n    source_note = \"Viz. + Analysis by @andreweatherman\"\n  )%&gt;%\n  # Adjust width of the logo column if needed (optional)\n  cols_width(\n      logo_url ~ px(40) # Set logo column width to 40 pixels\n  )\ngt_table\n\n\n\n\n\n\n\n\nHistory does not bode well for the Hoosiers\n\n\nOnly one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\n\n\n\nTEAM\n\nShooting\n\nSEED\nROUND\nYEAR\n\n\n3FG\n3FG%\nPER GAME\n\n\n\n\n\nWake Forest\n17-61\n27.87%\n2.83\n4\nR64\n2009\n\n\n\nIndiana\n19-79\n24.05%\n3.17\n???\n???\n2024\n\n\n\nNorth Carolina\n20-60\n33.33%\n3.33\n6\nR32\n2014\n\n\n\nCoppin St.\n21-60\n35.00%\n3.50\n16\nR68\n2008\n\n\n\nVermont\n22-89\n24.72%\n3.67\n16\nR64\n2010\n\n\n\nNew Mexico St.\n22-72\n30.56%\n3.67\n13\nR64\n2014\n\n\n\nViz. + Analysis by @andreweatherman"
  },
  {
    "objectID": "posts/display_table/index.html#in-python-with-gt-package",
    "href": "posts/display_table/index.html#in-python-with-gt-package",
    "title": "表格展示",
    "section": "in Python with GT package",
    "text": "in Python with GT package\n\n\nCode\nimport polars as pl\nimport pandas as pd\nimport numpy as np\nfrom great_tables import GT, md, html, loc, style, px# Import necessary components\n\n\n\n\nCode\n# 1. Create the Pandas DataFrame\n# Using a dictionary preserves column names with special characters/spaces\nhoosiers_data = pd.DataFrame({\n    \"TEAM\": [\"Wake Forest\", \"Indiana\", \"North Carolina\", \"Coppin St.\", \"Vermont\", \"New Mexico St.\"],\n    \"logo_url\": [\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/154.png\",      # Wake Forest\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/84.png\",       # Indiana\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/153.png\",      # North Carolina\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/2154.png\",     # Coppin St.\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/261.png\",      # Vermont\n        \"https://a.espncdn.com/i/teamlogos/ncaa/500/166.png\"       # New Mexico St.\n    ],\n    \"3FG_Text\": [\"17-61\", \"19-79\", \"20-60\", \"21-60\", \"22-89\", \"22-72\"], # Keep original text\n    \"3FG%\": [27.87, 24.05, 33.33, 35.00, 24.72, 30.56],\n    \"PER_GAME\": [2.83, 3.17, 3.33, 3.50, 3.67, 3.67],\n    \"SEED\": [4, np.nan, 6, 16, 16, 13], # Use numpy.nan for missing values\n    \"ROUND\": [\"R64\", np.nan, \"R32\", \"R68\", \"R64\", \"R64\"],\n    \"YEAR\": [2009, 2024, 2014, 2008, 2010, 2014],\n})\n\nhoosiers_data_pl=pl.from_pandas(hoosiers_data)\n\n\n\n\nCode\n# 2. Create the great_tables table (Using lambda for older versions)\n# NOTE: This assumes fmt_image and loc.body exist in your version.\n# If you get errors on those, your version might be very old.\ngt_table = (\n    GT(data=hoosiers_data_pl)\n    .fmt_image(columns=\"logo_url\", height=25)\n    .cols_move_to_start(columns=[\"logo_url\"])\n    .tab_header(\n        title=\"History does not bode well for the Hoosiers\",\n        subtitle=\"Only one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\"\n    )\n    .tab_spanner(\n        label=\"Shooting\",\n        columns=[\"3FG_Text\", \"3FG%\", \"PER_GAME\"]\n    )\n    .cols_label(\n        logo_url = \"\",\n        TEAM = \"TEAM\",\n        **{\"3FG_Text\": \"3FG\"},\n        **{\"3FG%\": \"3FG%\"},\n        PER_GAME = \"PER GAME\",\n        SEED = \"SEED\",\n        ROUND = \"ROUND\",\n        YEAR = \"YEAR\"\n    )\n    .fmt_percent(\n        columns=\"3FG%\",\n        decimals=2,\n        scale_values=False\n    )\n    .fmt_number(\n        columns=\"PER_GAME\",\n        decimals=2\n    )\n    .sub_missing(\n        columns=[\"SEED\", \"ROUND\"],\n        missing_text=\"???\"\n    )\n    .cols_align(\n        align=\"center\",\n        columns=[\"3FG_Text\", \"3FG%\", \"PER_GAME\", \"SEED\", \"ROUND\", \"YEAR\"]\n    )\n    .cols_align(\n        align=\"left\",\n        columns=\"TEAM\"\n    )\n    # Highlight the Indiana row (Using lambda function)\n    .tab_style(\n        style=style.fill(color=\"#70AACA\"),\n        # pandas way   Use a lambda function to define the row condition\n      # locations=[loc.body(rows=lambda x: x[\"TEAM\"] == \"Indiana\")]\n        locations=[loc.body(rows=pl.col(\"TEAM\")  == \"Indiana\")]\n    )\n    # Make letter bold the Indiana row (Using lambda function)\n    .tab_style(\n        style=style.text(weight = \"bold\"),\n        # pandas way   Use a lambda function to define the row condition\n      # locations=[loc.body(rows=lambda x: x[\"TEAM\"] == \"Indiana\")]\n        locations=[loc.body(rows=pl.col(\"TEAM\")  == \"Indiana\")]\n    )\n\n    # Add the source note\n    .tab_source_note(\n        source_note=md(\"Viz. + Analysis by @andreweatherman\")\n    )\n     # Adjust width of the logo column\n     .cols_width(\n        logo_url = px(40)\n     )\n)\n\n\n\n\nCode\n# save:\n# gt_table.save(\"hoosiers_table.html\")\n\n# To display(In Jupyter):\ngt_table # In Jupyter\n\n\n\n\n\n\n\n\nHistory does not bode well for the Hoosiers\n\n\nOnly one future tournament team made fewer 3PTs through their first six games than Indiana in 2024.\n\n\n\nTEAM\nShooting\nSEED\nROUND\nYEAR\n\n\n3FG\n3FG%\nPER GAME\n\n\n\n\n\nWake Forest\n17-61\n27.87%\n2.83\n4.0\nR64\n2009\n\n\n\nIndiana\n19-79\n24.05%\n3.17\n???\n???\n2024\n\n\n\nNorth Carolina\n20-60\n33.33%\n3.33\n6.0\nR32\n2014\n\n\n\nCoppin St.\n21-60\n35.00%\n3.50\n16.0\nR68\n2008\n\n\n\nVermont\n22-89\n24.72%\n3.67\n16.0\nR64\n2010\n\n\n\nNew Mexico St.\n22-72\n30.56%\n3.67\n13.0\nR64\n2014\n\n\n\nViz. + Analysis by @andreweatherman"
  },
  {
    "objectID": "posts/AI_create_code/index.html#create-prompt",
    "href": "posts/AI_create_code/index.html#create-prompt",
    "title": "AI生成代码",
    "section": "",
    "text": "create a shinyapp using R with single file app.R which can use python package yt-dlp to download youtube video.\n1.yt-dlp command need to have –cookies-from-browser chrome.\n2 User input: a.youtube video url b.using cookies options:–cookies-from-browser chrome or –cookies-from-browser firefox c.download file as mp4 format or mp3 format in a subfolder called “download” in the same directory as the shinyapp\n3.please display the final system command at the left side of the shinyapp after Play Downloaded File.\n4.add a a real time progress bar to show the download progress by add a progress indicator is to put withProgress() inside of the reactive(), observer(), or renderXx() function\n5.add a video player or mp3 player into the shinyapp when finish download,auto load the new downloaded mp4 or mp3 in shinyapp so we can play the downloaded file in shinyapp,also include a options for user to select the previous downloaded file(video or mp3) to play"
  },
  {
    "objectID": "posts/AI_create_code/index.html#create-prompt-1",
    "href": "posts/AI_create_code/index.html#create-prompt-1",
    "title": "AI生成代码",
    "section": "create prompt",
    "text": "create prompt\ncreate a shinyapp using R with single file app.R which can use python package yt-dlp to download youtube video.\n1.yt-dlp command need to have –cookies-from-browser chrome.\n2 User input: a.youtube video url b.using cookies options:–cookies-from-browser chrome or –cookies-from-browser firefox c.download file as mp4 format or mp3 format in a subfolder called “download” in the same directory as the shinyapp\n3.please display the final system command at the left side of the shinyapp after Play Downloaded File.\n4.add a real time progress bar to show the download progress\n5.add a video player or mp3 player into the shinyapp when finish download,auto load the new downloaded mp4 or mp3 in shinyapp so we can play the downloaded file in shinyapp,also include a options for user to select the previous downloaded file(video or mp3) to play"
  },
  {
    "objectID": "posts/TidyTuesday/index.html",
    "href": "posts/TidyTuesday/index.html",
    "title": "数据星期二",
    "section": "",
    "text": "TidyTuesday data project.github\n\ngetting the data\n\nRPython\n\n\n\n\nCode\n#pak::pak('tidytuesdayR')\n\n\n\n\nCode\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\n\n\n\ndownload the data\nall available data\n\n\nCode\n#tt_available() \n\n\n\n\nCode\ntuesdata &lt;- tidytuesdayR::tt_load('2025-04-01')\n\n\n\n\nCode\ntuesdata\n\n\n\n\nread data\n\n\nCode\ndata=tuesdata$pokemon_df\n#glimpse(data)\n\n\nor read directly from the url\n\n\nCode\ndata&lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv')\n\n\n\n\nusing shinyapps assistant to create shinyapp\nhttps://gallery.shinyapps.io/assistant\ngo to project folder and install quarto-ext/shinylive\n\n\nCode\nquarto add quarto-ext/shinylive\n\n\n\nPrompt 1:\ncreate a shinyapp with this data from github:https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv. left side: selector type_1 number of pokemon right side: histogram of height, color by type_2 histogram of weight, color by type_2 histogram of attack, color by type_2 histogram of defense color by type_2 barplot of color_1\nthere is no weight_kg,height_m.please use correct name.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Load the Pokemon data\npokemon_data &lt;- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-01/pokemon_df.csv\")\n\nui &lt;- page_sidebar(\n  title = \"Pokemon Data Explorer\",\n  sidebar = sidebar(\n    selectInput(\"type1\", \"Select Type 1:\", \n                choices = sort(unique(pokemon_data$type_1)),\n                selected = \"water\"),\n    hr(),\n    textOutput(\"pokemon_count\")\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Height Distribution by Type 2\"),\n      plotOutput(\"height_hist\")\n    ),\n    card(\n      card_header(\"Weight Distribution by Type 2\"),\n      plotOutput(\"weight_hist\")\n    )\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Attack Distribution by Type 2\"),\n      plotOutput(\"attack_hist\")\n    ),\n    card(\n      card_header(\"Defense Distribution by Type 2\"),\n      plotOutput(\"defense_hist\")\n    )\n  ),\n  \n  card(\n    card_header(\"Pokemon Color Distribution\"),\n    plotOutput(\"color_barplot\")\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Filtered data based on the selected type_1\n  filtered_data &lt;- reactive({\n    pokemon_data %&gt;%\n      filter(type_1 == input$type1)\n  })\n  \n  # Display number of Pokemon\n  output$pokemon_count &lt;- renderText({\n    count &lt;- nrow(filtered_data())\n    paste(\"Number of Pokemon with Type 1 '\", input$type1, \"': \", count)\n  })\n  \n  # Height histogram colored by type_2\n  output$height_hist &lt;- renderPlot({\n    ggplot(filtered_data(), aes(x = height, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Height\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Weight histogram colored by type_2\n  output$weight_hist &lt;- renderPlot({\n    ggplot(filtered_data(), aes(x = weight, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Weight\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Attack histogram colored by type_2\n  output$attack_hist &lt;- renderPlot({\n    ggplot(filtered_data(), aes(x = attack, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Attack\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Defense histogram colored by type_2\n  output$defense_hist &lt;- renderPlot({\n    ggplot(filtered_data(), aes(x = defense, fill = type_2)) +\n      geom_histogram(alpha = 0.7, bins = 20, position = \"identity\") +\n      scale_fill_viridis_d() +\n      theme_minimal() +\n      labs(x = \"Defense\", y = \"Count\", fill = \"Type 2\")\n  })\n  \n  # Barplot of color_1\n  output$color_barplot &lt;- renderPlot({\n    color_counts &lt;- filtered_data() %&gt;%\n      count(color_1) %&gt;%\n      arrange(desc(n))\n    \n    ggplot(color_counts, aes(x = reorder(color_1, n), y = n, fill = color_1)) +\n      geom_col() +\n      coord_flip() +\n      scale_fill_brewer(palette = \"Set3\") +\n      theme_minimal() +\n      labs(x = \"Color\", y = \"Count\", fill = \"Color\") +\n      theme(legend.position = \"none\")\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\n\nReference:\nhttps://github.com/rfordatascience/tidytuesday\nhttps://github.com/posit-dev/python-tidytuesday"
  },
  {
    "objectID": "posts/TidyTuesday/index.html#r",
    "href": "posts/TidyTuesday/index.html#r",
    "title": "数据星期二",
    "section": "R",
    "text": "R\n\n\nCode\n#pak::pak('tidytuesdayR')\n\n\n\n\nCode\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\n\n\n\n\nCode\ntuesdata &lt;- tidytuesdayR::tt_load('2025-01-14')\n\n\n\n\nCode\ndata=read.csv(\"conf2023.csv\")\nglimpse(data)\n\n\nRows: 116\nColumns: 9\n$ speaker_name        &lt;chr&gt; \"Elaine McVey\", \"David Meza\", \"Daniel Woodie\", \"Li…\n$ speaker_affiliation &lt;chr&gt; \"Chief\", \"NASA\", \"Eli Lilly & Company\", \"Metropoli…\n$ session_type        &lt;chr&gt; \"keynote\", \"keynote\", \"regular\", \"regular\", \"regul…\n$ session_title       &lt;chr&gt; \"From Data Confusion to Data Intelligence\", \"From …\n$ block_track_title   &lt;chr&gt; \"From Data Confusion to Data Intelligence\", \"From …\n$ session_date        &lt;chr&gt; \"2023-09-19\", \"2023-09-19\", \"2023-09-19\", \"2023-09…\n$ session_start       &lt;chr&gt; \"2023-09-19T14:00:00Z\", \"2023-09-19T14:00:00Z\", \"2…\n$ session_length      &lt;int&gt; 60, 60, 20, 20, 20, 20, 20, 20, 20, 20, 6, 6, 6, 6…\n$ session_abstract    &lt;chr&gt; \"Data science teams operate in a unique environmen…\n\n\nor read directly from the url\n\n\nCode\ndata&lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-14/conf2023.csv')"
  },
  {
    "objectID": "posts/TidyTuesday/index.html#python",
    "href": "posts/TidyTuesday/index.html#python",
    "title": "数据星期二",
    "section": "Python",
    "text": "Python\n\n\nCode\npip install pydytuesday\n\n\n\n\nCode\nimport pandas as pd\nimport pydytuesday as pdt\n\n\n\ndownload data\n\n\nCode\npdt.get_date('2025-01-14')\n\n\n\n\nread data\n\n\nCode\ndata=pd.read_csv('conf2023.csv')\n\n\n:::"
  },
  {
    "objectID": "posts/path_managment/index.html#fs-pacakge",
    "href": "posts/path_managment/index.html#fs-pacakge",
    "title": "路径管理",
    "section": "fs pacakge",
    "text": "fs pacakge\n\n\nCode\n#pak::pkg_install('here')\n#pak::pkg_install('fs')\nlibrary(fs)\n\n\n\n\nCode\ngetwd()\n\n\n\nlist file in the current directory\n\n\nCode\ndir_ls()\n\n\n\n\ncreate a new directory\n\n\nCode\n# create a new directory\ntmp &lt;- dir_create(file_temp())\ntmp\n\n\n\n\ncreate new files in that directory\n\n\nCode\n# create new files in that directory\nfile_create(path(tmp, \"my-file.txt\"))\ndir_ls(tmp)\n\n\n\n\nremove files from the directory\n\n\nCode\n# remove files from the directory\nfile_delete(path(tmp, \"my-file.txt\"))\ndir_ls(tmp)\n\n\n\n\nremove the directory\n\n\nCode\n# remove the directory\ndir_delete(tmp)"
  },
  {
    "objectID": "posts/path_managment/index.html#here-package",
    "href": "posts/path_managment/index.html#here-package",
    "title": "路径管理",
    "section": "here package",
    "text": "here package\n\n\nCode\nlibrary(here)\n\n\n\nshow project directory\n\n\nCode\nhere()\n\n\n\n\nshow all file in the project directory\n\n\nCode\nlist.files(here())\n\n\n\n\nshow one file path\nhere.png in images folder\n\n\nCode\nimage_path=here('posts/path_managment/images','here.png')\nimage_path"
  }
]