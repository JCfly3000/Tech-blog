{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Weather App with Streamlit\"\n",
        "\n",
        "author: \"Tony D\"\n",
        "\n",
        "date: \"2025-07-18\"\n",
        "\n",
        "categories: \n",
        "  - AI\n",
        "  - Python\n",
        "\n",
        "  \n",
        "execute:\n",
        "  warning: false\n",
        "  error: false\n",
        "  eval: false\n",
        "  \n",
        "image: 'https://streamlit.io/images/brand/streamlit-logo-secondary-colormark-darktext.svg'\n",
        "---\n",
        "\n",
        "Streamlit is an open-source Python library designed for building interactive web applications for data science and machine learning projects.\n",
        "\n",
        "With Streamlit, you can quickly create web apps to visualize data, share machine learning models, and interact with datasetsâ€”all using simple Python scripts.\n",
        "\n",
        "This project is to create a website using python and streamlit weather APP example\n",
        "\n",
        "![](images/clipboard-1167422948.png)\n",
        "\n",
        "[City Weather App](https://city-weather.streamlit.app/)\n",
        "\n",
        "## 1. First setup virtual environment with python version 3.13 using uv and add package\n",
        "\n",
        "``` bash\n",
        "uv init --python python3.13\n",
        "uv add streamlit pandas requests great_tables plotly\n",
        "```\n",
        "\n",
        "## 2. Download data from API\n",
        "\n",
        "python script `download_data.py` to download weather forcast data from open-meteo.com. This script will be run by a github action every day."
      ],
      "id": "53beca44"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "import pandas as pd\n",
        "import requests\n",
        "from datetime import date, timedelta\n",
        "import concurrent.futures\n",
        "\n",
        "def generate_weather_data(city_name, lat, lon):\n",
        "    \"\"\"\n",
        "    Fetches weather and air quality data for a given city.\n",
        "    \"\"\"\n",
        "    # 1. Define Date Range\n",
        "    today = date.today()\n",
        "    start_date = today - timedelta(days=7)\n",
        "    end_date = today + timedelta(days=7)\n",
        "\n",
        "    # 2. Fetch Weather and Rain Probability Data\n",
        "    weather_df = None\n",
        "    try:\n",
        "        weather_url = \"https://api.open-meteo.com/v1/forecast\"\n",
        "        params = {\n",
        "            \"latitude\": lat,\n",
        "            \"longitude\": lon,\n",
        "            \"daily\": \"weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_mean\",\n",
        "            \"start_date\": start_date.strftime(\"%Y-%m-%d\"),\n",
        "            \"end_date\": end_date.strftime(\"%Y-%m-%d\"),\n",
        "            \"timezone\": \"auto\"\n",
        "        }\n",
        "        resp_weather = requests.get(weather_url, params=params)\n",
        "        resp_weather.raise_for_status()\n",
        "        weather_data_raw = resp_weather.json()\n",
        "        \n",
        "        weather_df = pd.DataFrame(weather_data_raw['daily'])\n",
        "        weather_df = weather_df.rename(columns={\n",
        "            \"time\": \"date\",\n",
        "            \"temperature_2m_max\": \"temperature_max\",\n",
        "            \"temperature_2m_min\": \"temperature_min\",\n",
        "            \"precipitation_probability_mean\": \"rain_prob\"\n",
        "        })\n",
        "        weather_df['date'] = pd.to_datetime(weather_df['date'])\n",
        "        weather_df['day'] = weather_df['date'].dt.strftime('%a')\n",
        "\n",
        "        weather_mapping = {\n",
        "            0: \"Clear\", 1: \"Mainly Clear\", 2: \"Partly Cloudy\", 3: \"Overcast\",\n",
        "            45: \"Fog\", 48: \"Rime Fog\", 51: \"Light Drizzle\", 53: \"Drizzle\", 55: \"Heavy Drizzle\",\n",
        "            56: \"Light Freezing Drizzle\", 57: \"Freezing Drizzle\", 61: \"Light Rain\", 63: \"Rain\",\n",
        "            65: \"Heavy Rain\", 66: \"Light Freezing Rain\", 67: \"Freezing Rain\", 71: \"Light Snow\",\n",
        "            73: \"Snow\", 75: \"Heavy Snow\", 77: \"Snow Grains\", 80: \"Light Showers\", 81: \"Showers\",\n",
        "            82: \"Heavy Showers\", 85: \"Light Snow Showers\", 86: \"Snow Showers\", 95: \"Thunderstorm\",\n",
        "            96: \"Thunderstorm with Hail\", 99: \"Heavy Thunderstorm with Hail\"\n",
        "        }\n",
        "        weather_df['weather'] = weather_df['weather_code'].map(weather_mapping)\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"Failed to fetch weather data for {city_name}: {e}\")\n",
        "        return None\n",
        "\n",
        "    # 3. Fetch Air Quality Data\n",
        "    aqi_df = None\n",
        "    try:\n",
        "        aqi_start_date = today - timedelta(days=7)\n",
        "        aqi_end_date = today\n",
        "        aqi_url = \"https://air-quality-api.open-meteo.com/v1/air-quality\"\n",
        "        params = {\n",
        "            \"latitude\": lat,\n",
        "            \"longitude\": lon,\n",
        "            \"start_date\": aqi_start_date.strftime(\"%Y-%m-%d\"),\n",
        "            \"end_date\": aqi_end_date.strftime(\"%Y-%m-%d\"),\n",
        "            \"hourly\": \"pm2_5,us_aqi\",\n",
        "            \"timezone\": \"auto\"\n",
        "        }\n",
        "        resp_aqi = requests.get(aqi_url, params=params)\n",
        "        resp_aqi.raise_for_status()\n",
        "        aqi_data_raw = resp_aqi.json()\n",
        "        \n",
        "        if 'hourly' in aqi_data_raw:\n",
        "            aqi_df = pd.DataFrame(aqi_data_raw['hourly'])\n",
        "            aqi_df['date'] = pd.to_datetime(aqi_df['time']).dt.date\n",
        "            aqi_df = aqi_df.groupby('date').agg(\n",
        "                pm2_5=('pm2_5', 'median'),\n",
        "                us_aqi=('us_aqi', 'median')\n",
        "            ).reset_index()\n",
        "            aqi_df['date'] = pd.to_datetime(aqi_df['date'])\n",
        "\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"Failed to fetch AQI data for {city_name}: {e}\")\n",
        "\n",
        "    # 4. Combine and Process Data\n",
        "    combined_df = weather_df\n",
        "    if aqi_df is not None:\n",
        "        combined_df = pd.merge(combined_df, aqi_df, on=\"date\", how=\"left\")\n",
        "\n",
        "    combined_df['City'] = city_name\n",
        "    combined_df['lat'] = lat\n",
        "    combined_df['lon'] = lon\n",
        "    combined_df['forecast_flag'] = combined_df['date'].apply(lambda x: 'forecast' if x.date() > today else 'current')\n",
        "    \n",
        "    def get_aqi_status(us_aqi):\n",
        "        if pd.isna(us_aqi):\n",
        "            return \"N/A\"\n",
        "        if us_aqi <= 50:\n",
        "            return \"Good\"\n",
        "        if us_aqi <= 100:\n",
        "            return \"Moderate\"\n",
        "        if us_aqi <= 150:\n",
        "            return \"Unhealthy for Sensitive Groups\"\n",
        "        if us_aqi <= 200:\n",
        "            return \"Unhealthy\"\n",
        "        if us_aqi <= 300:\n",
        "            return \"Very Unhealthy\"\n",
        "        return \"Hazardous\"\n",
        "\n",
        "    if 'us_aqi' in combined_df.columns:\n",
        "        combined_df['us_aqi_status'] = combined_df['us_aqi'].apply(get_aqi_status)\n",
        "    else:\n",
        "        combined_df['us_aqi_status'] = \"N/A\"\n",
        "        combined_df['pm2_5'] = None\n",
        "        combined_df['us_aqi'] = None\n",
        "\n",
        "\n",
        "    return combined_df"
      ],
      "id": "00270ddf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. Create a streamlit app to display the plot and table\n",
        "\n",
        "a streamlit app `weather_app.py` to display the weather with plotly and greate table"
      ],
      "id": "f86fae0b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "import pandas as pd\n",
        "import streamlit as st\n",
        "from great_tables import GT, loc, style\n",
        "import plotly.express as px\n",
        "\n",
        "st.set_page_config(layout=\"wide\")\n",
        "\n",
        "# Load the data\n",
        "@st.cache_data\n",
        "def load_data():\n",
        "    return pd.read_csv(\"weather_data.csv\")\n",
        "\n",
        "weather_df = load_data()\n",
        "\n",
        "# City selection\n",
        "cities = weather_df[\"City\"].unique()\n",
        "selected_city = st.selectbox(\"Select a city\", cities)\n",
        "\n",
        "# Filter data for the selected city\n",
        "city_df = weather_df[weather_df[\"City\"] == selected_city].reset_index(drop=True)\n",
        "\n",
        "@st.cache_data\n",
        "def convert_df_to_csv(df):\n",
        "    # IMPORTANT: Cache the conversion to prevent computation on every rerun\n",
        "    return df.to_csv(index=False).encode(\"utf-8\")\n",
        "\n",
        "\n",
        "csv = convert_df_to_csv(city_df)\n",
        "\n",
        "st.download_button(\n",
        "    label=\"Download Weather Data (CSV)\",\n",
        "    data=csv,\n",
        "    file_name=f\"{selected_city}_weather_data.csv\",\n",
        "    mime=\"text/csv\",\n",
        ")\n",
        "\n",
        "\n",
        "# Display the Plotly chart\n",
        "st.header(\"Temperature Trend\")\n",
        "fig = px.line(city_df, x=\"date\", y=[\"temperature_max\", \"temperature_min\"], \n",
        "              labels={\"value\": \"Temperature (Â°C)\", \"variable\": \"Temperature Type\"},\n",
        "              title=\"Max and Min Daily Temperatures\")\n",
        "st.plotly_chart(fig, use_container_width=True)\n",
        "\n",
        "\n",
        "\n",
        "# Display the Great Table\n",
        "st.header(f\"Weather Forecast for {selected_city}\")\n",
        "\n",
        "gt = GT(city_df)\n",
        "\n",
        "gt = gt.tab_header(\n",
        "    title=f\"{selected_city}\",\n",
        "    subtitle=f\"Weather from {pd.to_datetime(city_df['date'].min()).strftime('%B %d')} to {pd.to_datetime(city_df['date'].max()).strftime('%B %d, %Y')}\"\n",
        ")\n",
        "\n",
        "# Color AQI status\n",
        "aqi_colors = {\n",
        "    \"Good\": \"#90EE90\",\n",
        "    \"Moderate\": \"#FFFF00\",\n",
        "    \"Unhealthy for Sensitive Groups\": \"#FFA500\",\n",
        "    \"Unhealthy\": \"#FF0000\",\n",
        "    \"Very Unhealthy\": \"#800080\",\n",
        "    \"Hazardous\": \"#808080\"\n",
        "}\n",
        "\n",
        "for status, color in aqi_colors.items():\n",
        "    gt = gt.tab_style(\n",
        "        style=style.fill(color=color),\n",
        "        locations=loc.body(\n",
        "            columns=\"us_aqi_status\",\n",
        "            rows=lambda df: df[\"us_aqi_status\"] == status\n",
        "        )\n",
        "    )\n",
        "\n",
        "\n",
        "gt = gt.data_color(\n",
        "    columns=[\"rain_prob\"],\n",
        "    domain=[50, 100],\n",
        "    palette=[\"#ffcdd2\", \"#f44336\"],\n",
        "    na_color=\"#FFFFFF00\"\n",
        ")\n",
        "\n",
        "gt = gt.fmt_number(columns=[\"temperature_max\", \"temperature_min\", \"pm2_5\", \"us_aqi\"], decimals=1)\n",
        "gt = gt.fmt_percent(columns=[\"rain_prob\"], scale_values=False, decimals=0)\n",
        "\n",
        "gt = gt.cols_label(\n",
        "    date=\"Date\",\n",
        "    day=\"Day\",\n",
        "    temperature_max=\"Max Temp (Â°C)\",\n",
        "    temperature_min=\"Min Temp (Â°C)\",\n",
        "    weather=\"Weather\",\n",
        "    rain_prob=\"Rain Probability\",\n",
        "    pm2_5=\"PM2.5\",\n",
        "    us_aqi=\"US AQI\",\n",
        "    us_aqi_status=\"AQI Status\"\n",
        ")\n",
        "\n",
        "st.html(gt._repr_html_())"
      ],
      "id": "3a852385",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. Run the streamlit app using github action\n",
        "\n",
        "github action to run the streamlit app: `.github/workflows/schedule-email.yml`. it run every day 6:00PM Beijing time (22:00 UTC).And it will also run when a new push to the main branch.\n",
        "\n",
        "``` yaml\n",
        "name: Refresh weather data\n",
        "\n",
        "on: \n",
        "  push:\n",
        "    branches:\n",
        "      - main\n",
        "  schedule:\n",
        "    - cron: '0 22 * * *' # 6:00 AM Beijing time is 22:00 UTC\n",
        "\n",
        "jobs:\n",
        "  refresh-data:\n",
        "    runs-on: ubuntu-latest\n",
        "    permissions:\n",
        "      contents: write\n",
        "    steps:\n",
        "      - name: Check out repository\n",
        "        uses: actions/checkout@v4\n",
        "\n",
        "      - name: Set up Python\n",
        "        uses: actions/setup-python@v5\n",
        "        with:\n",
        "          python-version-file: \"pyproject.toml\"\n",
        "\n",
        "      - name: Install uv\n",
        "        uses: astral-sh/setup-uv@v6\n",
        "\n",
        "      - name: Install the project\n",
        "        run: uv sync --locked --all-extras --dev\n",
        "            \n",
        "      - name: Run data download script\n",
        "        run: uv run download_data.py\n",
        "\n",
        "      - name: Commit and push if it changed\n",
        "        run: |-\n",
        "          git config user.name \"Automated Publisher\"\n",
        "          git config user.email \"actions@users.noreply.github.com\"\n",
        "          git add -A\n",
        "          timestamp=$(date -u)\n",
        "          git commit -m \"Latest data: ${timestamp}\" || exit 0\n",
        "          git push\n",
        "```"
      ],
      "id": "9ecc4200"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Library/Frameworks/Python.framework/Versions/3.13/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}