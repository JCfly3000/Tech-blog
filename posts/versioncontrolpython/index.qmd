---
title: "Version control for Python with uv"
author: "Tony D"
execute:
  warning: false
  error: false

  
date: "2025-03-14"
categories: 
  - Tool
  - Python
  
image: "images.png"

jupyter: python3
---

A comprehensive guide to using uv for Python project and package management. This document covers installation, project initialization, Python version management, and various package operations.

This document provides a comprehensive guide to using `uv`, a fast and efficient tool for Python project and package management. It covers the entire workflow, from installation and project initialization to managing Python versions and handling package operations. The guide also demonstrates how to use `uv` to synchronize dependencies and even run scripts with specific package requirements. This is a valuable resource for any Python developer looking to streamline their development process.

Introduces `uv` as a fast and comprehensive tool for Python project and package management. It covers `uv`'s installation, project initialization, Python version management, package operations, and dependency synchronization.

-   üöÄ A single tool to replace `pip`, `pip-tools`, `pipx`, `poetry`, `pyenv`, `twine`, `virtualenv`, and more.

-   ‚ö°Ô∏è [10-100x faster](https://github.com/astral-sh/uv/blob/main/BENCHMARKS.md) than `pip`.

-   üóÇÔ∏è Provides [comprehensive project management](https://github.com/astral-sh/uv?tab=readme-ov-file#projects), with a [universal lockfile](https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile).

![](images/clipboard-203636132.png)

# install

```{python}
#| eval: false
!pip install uv
```

# create project in current folder

```{python}
#| eval: false
!uv init
```

# show download python version


# chose python version

```{python}
#| eval: false
!uv python pin 3.13
```


# show all python include non download version 
```{python}
!uv python list
```


# download python version if not download

```{python}
#| eval: false
!uv python install cpython-3.14.0
```


# install pacakge

```{python}
#| eval: false
!uv add siuba
```

# show pacakge

```{python}
#| eval: false
!uv tree
```

# delete pacakge

```{python}
#| eval: false
!uv remove rich
```


# update lock file

```{python}
#| eval: false
!uv lock --upgrade
```


# Locking requirements

```{python}
#| eval: false
uv pip compile pyproject.toml -o requirements.txt
```


# check lock file and current environment
```{python}
#| eval: false
!uv lock --check
```




# Sync the project's dependencies with the environment,it will add packages to the environment from toml file.

```{python}
#| eval: false
!uv sync
```


# using uv with script header


## there is no rich package in python

```{python}
#| eval: false
try:
    import rich
    print('pacakge installed')
except ImportError as e:
    print('pacakge not installed')
    pass  # module doesn't exist, deal with it.
```

## but can add rich package in script

```{.python file.name='test.py'}
#| eval: false

{{< include test.py >}}

```

## run .py with uv

```{python}
!uv run test.py
```

# reference:

https://github.com/astral-sh/uv
